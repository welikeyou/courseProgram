/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:28:23 GMT 2019
 */

package org.apache.commons.collections4.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.apache.commons.collections4.set.ListOrderedSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ListOrderedSet_ESTest extends ListOrderedSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.add((Object) listOrderedSet0);
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>();
      Integer integer0 = new Integer((-728));
      listOrderedSet1.indexOf(integer0);
      // Undeclared exception!
      try { 
        listOrderedSet1.add((Object) listOrderedSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.add((Object) listOrderedSet0);
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet1.add((-1163), (Object) listOrderedSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>(linkedHashSet0);
      linkedHashSet0.add(listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.removeAll(linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      Integer integer0 = new Integer(0);
      listOrderedSet0.contains(integer0);
      listOrderedSet0.toString();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet0, (List<String>) linkedList0);
      ListOrderedSet<Object> listOrderedSet2 = new ListOrderedSet<Object>();
      Object object0 = new Object();
      listOrderedSet2.add(object0);
      ListOrderedSet<String> listOrderedSet3 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet0, (List<String>) linkedList0);
      ListOrderedSet<Object> listOrderedSet4 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet2);
      ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet1, (List<String>) linkedList0);
      listOrderedSet2.add((Object) listOrderedSet0);
      listOrderedSet4.remove((Object) listOrderedSet3);
      Object object1 = new Object();
      listOrderedSet4.remove(object1);
      List<Object> list0 = listOrderedSet4.asList();
      listOrderedSet4.addAll((Collection<?>) list0);
      ListOrderedSet<Integer> listOrderedSet5 = new ListOrderedSet<Integer>();
      listOrderedSet5.remove((Object) null);
      ListOrderedSet<String> listOrderedSet6 = ListOrderedSet.listOrderedSet((List<String>) linkedList0);
      // Undeclared exception!
      try { 
        listOrderedSet6.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<String>) linkedList0);
      ListOrderedSet<String> listOrderedSet1 = new ListOrderedSet<String>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) listOrderedSet1;
      objectArray0[1] = (Object) listOrderedSet0;
      objectArray0[2] = (Object) listOrderedSet0;
      listOrderedSet1.toArray(objectArray0);
      listOrderedSet1.remove(objectArray0[2]);
      int int0 = 0;
      Object object0 = new Object();
      listOrderedSet1.remove(object0);
      linkedList0.add((String) null);
      listOrderedSet1.add(0, " &;LY$spd");
      ListOrderedSet<String> listOrderedSet2 = new ListOrderedSet<String>(listOrderedSet0, linkedList0);
      listOrderedSet2.remove(0);
      listOrderedSet1.contains((Object) null);
      listOrderedSet0.clear();
      listOrderedSet1.iterator();
      ListOrderedSet<Integer> listOrderedSet3 = new ListOrderedSet<Integer>();
      int int1 = 0;
      ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet3);
      ListOrderedSet.listOrderedSet((List<String>) linkedList0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.clone();
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((List<Object>) linkedList1);
      listOrderedSet0.removeAll(linkedList1);
      listOrderedSet1.add((Object) listOrderedSet1);
      ListOrderedSet<Object> listOrderedSet2 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet1);
      // Undeclared exception!
      try { 
        listOrderedSet2.addAll((Collection<?>) linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = (-1783);
      linkedList0.clone();
      Integer integer0 = new Integer((-1783));
      linkedList0.add((Integer) null);
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      listOrderedSet0.clear();
      linkedList0.spliterator();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet1 = new ListOrderedSet<String>();
      Integer integer1 = new Integer(1747);
      linkedList0.add(integer1);
      listOrderedSet1.toArray();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet2 = ListOrderedSet.listOrderedSet((List<Object>) linkedList2);
      listOrderedSet1.removeAll(linkedList2);
      ListOrderedSet<Object> listOrderedSet3 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet2, (List<Object>) linkedList2);
      listOrderedSet3.add((Object) listOrderedSet2);
      ListOrderedSet<Object> listOrderedSet4 = new ListOrderedSet<Object>(listOrderedSet3, linkedList2);
      ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet4);
      listOrderedSet4.containsAll(linkedList0);
      // Undeclared exception!
      try { 
        listOrderedSet4.retainAll(listOrderedSet3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      listOrderedSet0.add((Object) linkedList0);
      linkedList0.push(listOrderedSet0);
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0);
      listOrderedSet1.toArray();
      Predicate.isEqual((Object) linkedList0);
      Predicate.isEqual((Object) listOrderedSet0);
      listOrderedSet1.remove((Object) "#ouD~T");
      listOrderedSet1.toArray();
      // Undeclared exception!
      try { 
        listOrderedSet0.remove((Object) listOrderedSet1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<String>) linkedList0);
      linkedList0.removeLastOccurrence(listOrderedSet0);
      ListOrderedSet<String> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet0);
      listOrderedSet1.iterator();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ListOrderedSet<Integer> listOrderedSet2 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList1);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListOrderedSet<Object> listOrderedSet3 = ListOrderedSet.listOrderedSet((Set<Object>) linkedHashSet0);
      listOrderedSet2.removeAll(listOrderedSet1);
      ListOrderedSet<Integer> listOrderedSet4 = ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet2);
      Integer integer0 = new Integer(1);
      ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet0);
      listOrderedSet4.add(integer0);
      listOrderedSet4.toString();
      listOrderedSet0.addAll(2, (Collection<? extends String>) listOrderedSet1);
      listOrderedSet3.toArray();
      // Undeclared exception!
      try { 
        listOrderedSet3.addAll(1, (Collection<?>) listOrderedSet2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      listOrderedSet0.retainAll(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add((Object) listOrderedSet0);
      linkedList1.add((Integer) null);
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll((Collection<?>) linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      ListOrderedSet<String> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<String>) linkedHashSet0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      listOrderedSet0.forEach(consumer0);
      ListOrderedSet<String> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<String>) linkedHashSet0);
      linkedHashSet0.add("");
      int int0 = 0;
      listOrderedSet1.get(0);
      // Undeclared exception!
      try { 
        listOrderedSet0.removeAll(linkedHashSet0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      listOrderedSet0.spliterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      listOrderedSet1.remove((Object) "");
      listOrderedSet0.containsAll(listOrderedSet1);
      listOrderedSet0.removeAll(listOrderedSet1);
      ListOrderedSet<String> listOrderedSet2 = new ListOrderedSet<String>(listOrderedSet0);
      listOrderedSet0.stream();
      listOrderedSet2.stream();
      listOrderedSet2.spliterator();
      listOrderedSet0.addAll(4319, (Collection<? extends String>) listOrderedSet2);
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll(4319, (Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = (-1);
      linkedList0.clone();
      Integer integer0 = new Integer((-1));
      linkedList0.add(integer0);
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) listOrderedSet0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      listOrderedSet0.removeIf(predicate3);
      listOrderedSet0.clear();
      listOrderedSet0.spliterator();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet1 = ListOrderedSet.listOrderedSet((List<String>) linkedList1);
      listOrderedSet1.toArray();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet2 = ListOrderedSet.listOrderedSet((List<Object>) linkedList2);
      listOrderedSet1.removeAll(linkedList2);
      ListOrderedSet<Object> listOrderedSet3 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet2, (List<Object>) linkedList2);
      listOrderedSet3.add((Object) listOrderedSet2);
      ListOrderedSet<Object> listOrderedSet4 = new ListOrderedSet<Object>(listOrderedSet3, linkedList2);
      ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet4);
      listOrderedSet4.containsAll(linkedList0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet4, (List<Object>) linkedList2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Set and List must be empty
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, (List<Object>) linkedList0);
      List<Object> list0 = listOrderedSet0.asList();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) listOrderedSet1);
      Object object0 = new Object();
      linkedList1.add(object0);
      ListOrderedSet<Object> listOrderedSet2 = new ListOrderedSet<Object>(listOrderedSet0, linkedList1);
      listOrderedSet0.stream();
      listOrderedSet2.containsAll(listOrderedSet1);
      listOrderedSet0.addAll((Collection<?>) listOrderedSet2);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet(list0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<String>) linkedList0);
      linkedList0.removeLastOccurrence(listOrderedSet0);
      ListOrderedSet<String> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet0);
      listOrderedSet1.iterator();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ListOrderedSet<Integer> listOrderedSet2 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList1);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListOrderedSet<Object> listOrderedSet3 = ListOrderedSet.listOrderedSet((Set<Object>) linkedHashSet0);
      listOrderedSet2.removeAll(listOrderedSet1);
      ListOrderedSet<Integer> listOrderedSet4 = ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet2);
      Integer integer0 = new Integer(1);
      ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet0);
      listOrderedSet4.add(integer0);
      listOrderedSet4.toString();
      listOrderedSet0.addAll(2, (Collection<? extends String>) listOrderedSet1);
      listOrderedSet3.toArray();
      listOrderedSet3.addAll(0, (Collection<?>) listOrderedSet2);
      ListOrderedSet<String> listOrderedSet5 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet1);
      // Undeclared exception!
      try { 
        listOrderedSet5.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      ListOrderedSet<String> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<String>) linkedHashSet0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      listOrderedSet0.forEach(consumer0);
      ListOrderedSet<String> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<String>) linkedHashSet0);
      int int0 = 0;
      listOrderedSet1.get(0);
      listOrderedSet0.removeAll(linkedHashSet0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet2 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      ListOrderedSet<Object> listOrderedSet3 = new ListOrderedSet<Object>(listOrderedSet2, linkedList0);
      // Undeclared exception!
      try { 
        listOrderedSet3.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      listOrderedSet0.remove((Object) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ListOrderedSet<Integer> listOrderedSet1 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList1);
      listOrderedSet1.retainAll(linkedList0);
      Integer integer0 = new Integer(1);
      ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet1, (List<Integer>) linkedList1);
      Integer integer1 = new Integer(1);
      linkedList1.add(integer1);
      listOrderedSet1.add(integer0);
      listOrderedSet1.spliterator();
      linkedList0.add((Object) linkedList1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      listOrderedSet0.forEach(consumer0);
      ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet1);
      ListOrderedSet<String> listOrderedSet2 = new ListOrderedSet<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet3 = new ListOrderedSet<String>(listOrderedSet2, linkedList2);
      ListOrderedSet<String> listOrderedSet4 = new ListOrderedSet<String>(listOrderedSet3);
      listOrderedSet4.clear();
      listOrderedSet4.addAll((Collection<? extends String>) linkedList2);
      ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet3);
      listOrderedSet0.get(0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet1, (List<Integer>) linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Set and List must be empty
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Set<String> set0 = null;
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      // Undeclared exception!
      try { 
        listOrderedSet0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      listOrderedSet0.add((Object) linkedList0);
      linkedList0.push(listOrderedSet0);
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0);
      linkedList0.add((Object) "org.apache.commons.collections4.set.ListOrderedSet$1");
      listOrderedSet1.toArray();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) listOrderedSet1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      predicate1.and(predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate2.and(predicate1);
      predicate2.test(predicate0);
      predicate0.and(predicate2);
      Predicate.isEqual((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet1.removeIf(predicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ListOrderedSet<String> listOrderedSet1 = new ListOrderedSet<String>(linkedHashSet0);
      linkedHashSet0.removeAll(listOrderedSet1);
      String string0 = "";
      linkedHashSet0.add("");
      listOrderedSet0.addAll((Collection<?>) linkedHashSet0);
      listOrderedSet0.retainAll(listOrderedSet1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) listOrderedSet0;
      objectArray0[2] = (Object) linkedHashSet0;
      listOrderedSet0.toArray(objectArray0);
      ListOrderedSet<String> listOrderedSet2 = ListOrderedSet.listOrderedSet((Set<String>) linkedHashSet0);
      ListOrderedSet<String> listOrderedSet3 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet2);
      List<String> list0 = listOrderedSet3.asList();
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<String>) linkedHashSet0, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Set and List must be empty
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = (-333);
      linkedList0.clear();
      Integer integer0 = new Integer((-333));
      linkedList0.add(integer0);
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      listOrderedSet0.retainAll(linkedList0);
      Integer integer1 = new Integer((-3711));
      linkedList0.add(integer1);
      Integer integer2 = new Integer(525);
      linkedList0.add(integer2);
      ListOrderedSet<Integer> listOrderedSet1 = new ListOrderedSet<Integer>(listOrderedSet0, linkedList0);
      listOrderedSet1.clear();
      listOrderedSet1.iterator();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListOrderedSet<Object> listOrderedSet2 = new ListOrderedSet<Object>(linkedHashSet0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet3 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet2, (List<Object>) linkedList1);
      Object[] objectArray0 = new Object[0];
      listOrderedSet3.toArray(objectArray0);
      listOrderedSet3.spliterator();
      listOrderedSet3.toString();
      listOrderedSet2.toString();
      listOrderedSet2.removeAll(linkedHashSet0);
      ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet3);
      ListOrderedSet<Integer> listOrderedSet4 = new ListOrderedSet<Integer>();
      // Undeclared exception!
      try { 
        listOrderedSet4.get((-2234));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      List<String> list0 = listOrderedSet0.asList();
      ListOrderedSet<String> listOrderedSet1 = ListOrderedSet.listOrderedSet(list0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet1, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      listOrderedSet0.forEach(consumer0);
      List<String> list0 = listOrderedSet0.asList();
      ListOrderedSet<String> listOrderedSet1 = new ListOrderedSet<String>(listOrderedSet0, list0);
      ListOrderedSet<String> listOrderedSet2 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet1, list0);
      listOrderedSet0.containsAll(list0);
      listOrderedSet1.containsAll(listOrderedSet0);
      int int0 = 0;
      String string0 = null;
      // Undeclared exception!
      try { 
        listOrderedSet2.add(0, (String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      String string0 = "[`}CN#D!";
      listOrderedSet0.add(0, "[`}CN#D!");
      listOrderedSet0.toArray();
      listOrderedSet0.add("org.apache.commons.collections4.collection.AbstractCollectionDecorator");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet1 = null;
      try {
        listOrderedSet1 = new ListOrderedSet<Object>((Set<Object>) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.clear();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("org.apache.commons.collections4.set.AbstractSerializableSetDecorator");
      ListOrderedSet<String> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<String>) linkedHashSet0);
      linkedHashSet0.add("org.apache.commons.collections4.set.AbstractSerializableSetDecorator");
      listOrderedSet1.containsAll(listOrderedSet0);
      listOrderedSet0.add((Object) null);
      listOrderedSet0.add((-94), (Object) null);
      linkedHashSet0.add("org.apache.commons.collections4.set.AbstractSerializableSetDecorator");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, (List<Object>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Set and List must be empty
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      Set<String> set0 = listOrderedSet0.decorated();
      List<String> list0 = listOrderedSet0.asList();
      ListOrderedSet<String> listOrderedSet1 = ListOrderedSet.listOrderedSet(set0, list0);
      listOrderedSet1.parallelStream();
      ListOrderedSet<String> listOrderedSet2 = new ListOrderedSet<String>(listOrderedSet1);
      ListOrderedSet<Object> listOrderedSet3 = new ListOrderedSet<Object>();
      listOrderedSet3.iterator();
      listOrderedSet3.clear();
      listOrderedSet3.toArray();
      ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet3);
      listOrderedSet0.add("");
      listOrderedSet3.iterator();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      // Undeclared exception!
      try { 
        listOrderedSet0.toArray(integerArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      ListOrderedSet<String> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet0);
      ListOrderedSet<String> listOrderedSet2 = new ListOrderedSet<String>(listOrderedSet1);
      Set<String> set0 = listOrderedSet2.decorated();
      ListOrderedSet<Object> listOrderedSet3 = new ListOrderedSet<Object>();
      listOrderedSet1.parallelStream();
      listOrderedSet1.clear();
      listOrderedSet2.removeAll(listOrderedSet3);
      List<String> list0 = listOrderedSet2.asList();
      listOrderedSet3.stream();
      ListOrderedSet.listOrderedSet(set0);
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      listOrderedSet3.remove((Object) integer0);
      ListOrderedSet<String> listOrderedSet4 = new ListOrderedSet<String>(set0, list0);
      listOrderedSet4.iterator();
      // Undeclared exception!
      try { 
        listOrderedSet4.add("tAaGk$HO\"");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      Integer integer0 = new Integer(0);
      listOrderedSet0.contains(integer0);
      listOrderedSet0.toString();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet0, (List<String>) linkedList0);
      ListOrderedSet<Object> listOrderedSet2 = new ListOrderedSet<Object>();
      Object object0 = new Object();
      listOrderedSet2.add(object0);
      ListOrderedSet<String> listOrderedSet3 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet0, (List<String>) linkedList0);
      ListOrderedSet<Object> listOrderedSet4 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet2);
      ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet1, (List<String>) linkedList0);
      listOrderedSet4.retainAll(listOrderedSet3);
      listOrderedSet4.remove((Object) listOrderedSet3);
      Object object1 = new Object();
      listOrderedSet4.remove(object1);
      List<Object> list0 = listOrderedSet4.asList();
      listOrderedSet4.addAll((Collection<?>) list0);
      ListOrderedSet<Integer> listOrderedSet5 = new ListOrderedSet<Integer>();
      listOrderedSet5.remove((Object) null);
      ListOrderedSet<String> listOrderedSet6 = ListOrderedSet.listOrderedSet((List<String>) linkedList0);
      // Undeclared exception!
      try { 
        listOrderedSet6.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>(linkedHashSet0);
      linkedHashSet0.add(listOrderedSet0);
      int int0 = (-1230);
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll((-1230), (Collection<?>) linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      ListOrderedSet<String> listOrderedSet1 = new ListOrderedSet<String>();
      List<String> list0 = listOrderedSet1.asList();
      ListOrderedSet<String> listOrderedSet2 = ListOrderedSet.listOrderedSet(list0);
      listOrderedSet0.addAll(740, (Collection<?>) listOrderedSet2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet3 = ListOrderedSet.listOrderedSet((List<String>) linkedList0);
      Set<String> set0 = listOrderedSet3.decorated();
      listOrderedSet3.addAll((Collection<? extends String>) linkedList0);
      ListOrderedSet<String> listOrderedSet4 = ListOrderedSet.listOrderedSet(set0, (List<String>) linkedList0);
      listOrderedSet4.iterator();
      listOrderedSet0.removeAll(listOrderedSet4);
      List<Object> list1 = listOrderedSet0.asList();
      listOrderedSet0.retainAll(list1);
      listOrderedSet0.addAll((Collection<?>) list1);
      ListOrderedSet<Object> listOrderedSet5 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, list1);
      listOrderedSet0.addAll((Collection<?>) listOrderedSet5);
      listOrderedSet2.removeAll(set0);
      listOrderedSet5.iterator();
      // Undeclared exception!
      try { 
        listOrderedSet5.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>(linkedHashSet0);
      ListOrderedSet<Integer> listOrderedSet1 = new ListOrderedSet<Integer>(listOrderedSet0);
      ListOrderedSet<Integer> listOrderedSet2 = ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet1);
      // Undeclared exception!
      try { 
        listOrderedSet2.remove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(4246);
      linkedList0.add(integer0);
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      listOrderedSet0.add(integer0);
      // Undeclared exception!
      try { 
        listOrderedSet0.remove(1029);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1029, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<String>) linkedList0);
      ListOrderedSet<String> listOrderedSet1 = new ListOrderedSet<String>(listOrderedSet0, linkedList0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) listOrderedSet1;
      objectArray0[1] = (Object) listOrderedSet0;
      objectArray0[2] = (Object) listOrderedSet0;
      listOrderedSet1.toArray(objectArray0);
      listOrderedSet1.remove(objectArray0[2]);
      int int0 = 0;
      Object object0 = new Object();
      listOrderedSet1.remove(object0);
      linkedList0.add((String) null);
      listOrderedSet1.add(0, " &;LY$spd");
      ListOrderedSet<String> listOrderedSet2 = new ListOrderedSet<String>(listOrderedSet0, linkedList0);
      listOrderedSet2.remove(0);
      listOrderedSet1.contains(" &;LY$spd");
      listOrderedSet0.clear();
      listOrderedSet1.iterator();
      ListOrderedSet<Integer> listOrderedSet3 = new ListOrderedSet<Integer>();
      int int1 = 0;
      ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet3);
      ListOrderedSet.listOrderedSet((List<String>) linkedList0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      ListOrderedSet<Integer> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet0);
      listOrderedSet0.parallelStream();
      listOrderedSet1.indexOf(listOrderedSet0);
      ListOrderedSet<Integer> listOrderedSet2 = ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet0);
      ListOrderedSet<Object> listOrderedSet3 = new ListOrderedSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet4 = new ListOrderedSet<Object>(listOrderedSet3, linkedList0);
      ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet4, (List<Object>) linkedList0);
      Integer integer0 = new Integer((-1));
      listOrderedSet2.add(integer0);
      listOrderedSet2.addAll((Collection<? extends Integer>) listOrderedSet0);
      ListOrderedSet<String> listOrderedSet5 = new ListOrderedSet<String>();
      listOrderedSet5.clear();
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<Object>) linkedHashSet0, (List<Object>) linkedList0);
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, (List<Object>) linkedList0);
      listOrderedSet1.clear();
      assertNotSame(listOrderedSet0, listOrderedSet1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>(listOrderedSet0, linkedList0);
      linkedList0.add((Object) listOrderedSet0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        listOrderedSet1.addAll(1, (Collection<?>) listOrderedSet0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(0);
      linkedList0.add((Object) integer0);
      ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      int int0 = (-3618);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      predicate1.and(predicate0);
      // Undeclared exception!
      try { 
        listOrderedSet0.toArray((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet1 = new ListOrderedSet<String>(listOrderedSet0, linkedList0);
      listOrderedSet1.asList();
      ListOrderedSet<String> listOrderedSet2 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet1);
      ListOrderedSet<String> listOrderedSet3 = new ListOrderedSet<String>(listOrderedSet2);
      ListOrderedSet<String> listOrderedSet4 = new ListOrderedSet<String>(listOrderedSet3, linkedList0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) listOrderedSet3;
      objectArray0[2] = (Object) listOrderedSet2;
      listOrderedSet4.toArray(objectArray0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ListOrderedSet<Integer> listOrderedSet5 = ListOrderedSet.listOrderedSet((Set<Integer>) linkedHashSet0);
      ListOrderedSet<Integer> listOrderedSet6 = ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet5);
      boolean boolean0 = listOrderedSet6.addAll((Collection<? extends Integer>) listOrderedSet5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>(linkedHashSet0);
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        listOrderedSet0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      listOrderedSet0.forEach(consumer0);
      listOrderedSet0.remove((Object) null);
      linkedList0.addLast(listOrderedSet0);
      listOrderedSet0.removeAll(linkedList0);
      int int0 = 0;
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>(listOrderedSet0);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        listOrderedSet1.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add((Object) null);
      linkedHashSet0.parallelStream();
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      List<String> list0 = listOrderedSet0.asList();
      ListOrderedSet<String> listOrderedSet1 = new ListOrderedSet<String>(listOrderedSet0, list0);
      linkedHashSet0.containsAll(listOrderedSet1);
      ListOrderedSet<Object> listOrderedSet2 = ListOrderedSet.listOrderedSet((Set<Object>) linkedHashSet0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("U3y,aX 3/\" ()`6");
      ListOrderedSet<String> listOrderedSet3 = ListOrderedSet.listOrderedSet((List<String>) linkedList0);
      listOrderedSet3.toString();
      listOrderedSet2.indexOf((Object) null);
      listOrderedSet2.toString();
      boolean boolean0 = listOrderedSet2.removeAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      ListOrderedSet<Integer> listOrderedSet1 = new ListOrderedSet<Integer>(listOrderedSet0);
      listOrderedSet1.parallelStream();
      Integer integer0 = new Integer(2237);
      listOrderedSet0.add(integer0);
      ListOrderedSet<Integer> listOrderedSet2 = new ListOrderedSet<Integer>(listOrderedSet1);
      listOrderedSet1.addAll((Collection<? extends Integer>) listOrderedSet2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet2, (List<Integer>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Set and List must be empty
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<Integer>) linkedHashSet0, (List<Integer>) linkedList0);
      String string0 = listOrderedSet0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = null;
      try {
        listOrderedSet0 = new ListOrderedSet<Object>((Set<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<String>) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Set must not be null
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Set<Integer> set0 = null;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Integer>) null, (List<Integer>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Set must not be null
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(8);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Integer>) linkedHashSet0, (List<Integer>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Set and List must be empty
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<String>) linkedList0);
      listOrderedSet0.remove((Object) null);
      linkedList0.add("");
      linkedList0.containsAll(listOrderedSet0);
      Set<Object> set0 = null;
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      boolean boolean0 = listOrderedSet0.addAll((Collection<?>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      linkedList0.add((Object) "Set must not be null");
      linkedList0.removeAll(listOrderedSet0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Integer integer0 = new Integer(73);
      linkedList1.add((Object) integer0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, (List<Object>) linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Set and List must be empty
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      assertNotNull(listOrderedSet0);
      
      ListOrderedSet<Integer> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      listOrderedSet1.indexOf(integer0);
      linkedList0.offerFirst(integer0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet2 = ListOrderedSet.listOrderedSet((List<Object>) linkedList1);
      listOrderedSet2.stream();
      listOrderedSet2.containsAll(linkedList0);
      List<Object> list0 = null;
      ListOrderedSet<Object> listOrderedSet3 = null;
      try {
        listOrderedSet3 = new ListOrderedSet<Object>(listOrderedSet2, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>(linkedHashSet0);
      Set<String> set0 = listOrderedSet0.decorated();
      ListOrderedSet<String> listOrderedSet1 = ListOrderedSet.listOrderedSet(set0);
      linkedHashSet0.add("");
      listOrderedSet1.toArray();
      listOrderedSet1.retainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      Object object0 = new Object();
      listOrderedSet0.remove(object0);
      // Undeclared exception!
      try { 
        listOrderedSet0.add(608, object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 608, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.asList();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedSet<Integer> listOrderedSet1 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      ListOrderedSet<Integer> listOrderedSet2 = new ListOrderedSet<Integer>(listOrderedSet1);
      listOrderedSet2.indexOf(listOrderedSet0);
      Integer integer0 = new Integer((-328));
      listOrderedSet2.add(integer0);
      boolean boolean0 = listOrderedSet1.addAll((-328), (Collection<? extends Integer>) listOrderedSet2);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>(linkedHashSet0);
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0);
      ListOrderedSet<Object> listOrderedSet2 = null;
      try {
        listOrderedSet2 = new ListOrderedSet<Object>(listOrderedSet1, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = listOrderedSet0.retainAll(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, (List<Object>) linkedList0);
      ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      ListOrderedSet<Object> listOrderedSet2 = new ListOrderedSet<Object>(listOrderedSet1);
      listOrderedSet1.add((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>(linkedHashSet0, linkedList0);
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, (List<Object>) linkedList0);
      ListOrderedSet<Object> listOrderedSet2 = new ListOrderedSet<Object>(listOrderedSet1);
      boolean boolean0 = listOrderedSet2.remove((Object) listOrderedSet1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      ListOrderedSet<String> listOrderedSet1 = new ListOrderedSet<String>(listOrderedSet0);
      List<String> list0 = listOrderedSet0.asList();
      ListOrderedSet<String> listOrderedSet2 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet1, list0);
      // Undeclared exception!
      try { 
        listOrderedSet2.remove(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, (List<Object>) linkedList0);
      int int0 = 0;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet1 = ListOrderedSet.listOrderedSet((List<String>) linkedList1);
      Set<String> set0 = listOrderedSet1.decorated();
      ListOrderedSet<String> listOrderedSet2 = ListOrderedSet.listOrderedSet(set0);
      ListOrderedSet<String> listOrderedSet3 = new ListOrderedSet<String>(listOrderedSet2, linkedList1);
      // Undeclared exception!
      try { 
        listOrderedSet3.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      int int0 = 3347;
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, (List<Object>) linkedList0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ListOrderedSet.listOrderedSet((Set<String>) linkedHashSet0);
      // Undeclared exception!
      try { 
        listOrderedSet1.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>(listOrderedSet0, linkedList0);
      ListOrderedSet<Object> listOrderedSet2 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet1);
      ListOrderedSet<Object> listOrderedSet3 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet2, (List<Object>) linkedList0);
      ListOrderedSet<Object> listOrderedSet4 = new ListOrderedSet<Object>(listOrderedSet3);
      boolean boolean0 = listOrderedSet4.removeAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      listOrderedSet0.iterator();
      listOrderedSet0.add(0, "G)6");
      assertTrue(listOrderedSet0.contains("G)6"));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<String>) linkedList0);
      // Undeclared exception!
      try { 
        listOrderedSet0.get(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0);
      listOrderedSet0.toArray();
      ListOrderedSet<Object> listOrderedSet2 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet1);
      boolean boolean0 = listOrderedSet2.add((Object) listOrderedSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      // Undeclared exception!
      try { 
        listOrderedSet0.remove(21);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 21, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet0, (List<String>) linkedList0);
      ListOrderedSet<String> listOrderedSet2 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet1);
      assertTrue(listOrderedSet2.equals((Object)listOrderedSet0));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      boolean boolean0 = listOrderedSet0.retainAll(listOrderedSet0);
      assertFalse(boolean0);
      
      listOrderedSet0.add(0, "k[Bgt5cEaP!edor$");
      listOrderedSet0.add(0, "k[Bgt5cEaP!edor$");
      assertTrue(listOrderedSet0.contains("k[Bgt5cEaP!edor$"));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet0, (List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      linkedList0.push(listOrderedSet0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) listOrderedSet0);
      Predicate.isEqual((Object) listOrderedSet0);
      listOrderedSet0.removeIf(predicate0);
      linkedList0.add((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, (List<Object>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Set and List must be empty
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListOrderedSet<String> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<String>) linkedList0);
      linkedList0.removeLastOccurrence(listOrderedSet0);
      ListOrderedSet<String> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ListOrderedSet<Integer> listOrderedSet2 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList1);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListOrderedSet<Object> listOrderedSet3 = ListOrderedSet.listOrderedSet((Set<Object>) linkedHashSet0);
      ListOrderedSet<Integer> listOrderedSet4 = ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet2);
      Integer integer0 = new Integer(1);
      ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet0);
      listOrderedSet4.add(integer0);
      listOrderedSet4.toString();
      linkedList1.add(integer0);
      listOrderedSet0.addAll(1, (Collection<? extends String>) listOrderedSet1);
      boolean boolean0 = listOrderedSet3.addAll(0, (Collection<?>) listOrderedSet2);
      assertEquals(2, linkedList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      ListOrderedSet<String> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<String>) linkedHashSet0);
      listOrderedSet0.get(0);
      boolean boolean0 = listOrderedSet0.removeAll(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      ListOrderedSet<Integer> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet0);
      listOrderedSet0.clear();
      listOrderedSet1.indexOf(listOrderedSet0);
      Integer integer0 = new Integer((-1));
      boolean boolean0 = listOrderedSet0.add(integer0);
      boolean boolean1 = listOrderedSet1.addAll((Collection<? extends Integer>) listOrderedSet0);
      assertFalse(boolean1 == boolean0);
      
      listOrderedSet0.asList();
      Object[] objectArray0 = listOrderedSet1.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      Integer[] integerArray0 = new Integer[0];
      Object[] objectArray0 = listOrderedSet0.toArray((Object[]) integerArray0);
      assertSame(integerArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ListOrderedSet<String> listOrderedSet0 = new ListOrderedSet<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet0, (List<String>) linkedList0);
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>();
      Object object0 = new Object();
      listOrderedSet1.add(object0);
      ListOrderedSet<String> listOrderedSet2 = ListOrderedSet.listOrderedSet((Set<String>) listOrderedSet0, (List<String>) linkedList0);
      ListOrderedSet<Object> listOrderedSet3 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet1);
      listOrderedSet3.retainAll(listOrderedSet2);
      listOrderedSet3.remove((Object) listOrderedSet2);
      // Undeclared exception!
      try { 
        listOrderedSet2.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      List<Object> list0 = null;
      ListOrderedSet<Object> listOrderedSet1 = null;
      try {
        listOrderedSet1 = new ListOrderedSet<Object>(listOrderedSet0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.add((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, (List<Object>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Set and List must be empty
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }
}
