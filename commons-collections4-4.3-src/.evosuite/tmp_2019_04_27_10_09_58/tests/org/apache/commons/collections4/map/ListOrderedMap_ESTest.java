/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:16:50 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.list.UnmodifiableList;
import org.apache.commons.collections4.map.ListOrderedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ListOrderedMap_ESTest extends ListOrderedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      ListOrderedMap<HashMap<Object, Object>, Object> listOrderedMap0 = new ListOrderedMap<HashMap<Object, Object>, Object>(hashMap0);
      Object object0 = listOrderedMap0.put(hashMap1, (Object) "WYcBSp.|][|,R>X\"?");
      assertNull(object0);
      
      String string0 = listOrderedMap0.toString();
      assertEquals("{{}=WYcBSp.|][|,R>X\"?}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ListOrderedMap<Integer, Integer> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Integer, Integer>) hashMap0);
      Integer integer0 = listOrderedMap0.remove((Object) hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ListOrderedMap<String, Object> listOrderedMap0 = new ListOrderedMap<String, Object>();
      ListOrderedMap.ListOrderedMapEntry<String, Object> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<String, Object>(listOrderedMap0, "wdI>m{< Q7<]00");
      Object object0 = listOrderedMap_ListOrderedMapEntry0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      ListOrderedMap<AbstractMap.SimpleEntry<Integer, Object>, Object> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Integer, Object>, Object>(hashMap0);
      LinkedList<AbstractMap.SimpleEntry<Integer, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Integer, Object>>();
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, (Integer) null);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleImmutableEntry0);
      linkedList0.add(abstractMap_SimpleEntry0);
      ListOrderedMap.ListOrderedIterator<AbstractMap.SimpleEntry<Integer, Object>, Object> listOrderedMap_ListOrderedIterator0 = new ListOrderedMap.ListOrderedIterator<AbstractMap.SimpleEntry<Integer, Object>, Object>(listOrderedMap0, linkedList0);
      Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object> map_Entry0 = listOrderedMap_ListOrderedIterator0.next();
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Integer>();
      ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, Integer> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, Integer>(hashMap0);
      LinkedList<AbstractMap.SimpleEntry<Object, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, Object>>();
      ListOrderedMap.EntrySetView<AbstractMap.SimpleEntry<Object, Object>, Integer> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<AbstractMap.SimpleEntry<Object, Object>, Integer>(listOrderedMap0, linkedList0);
      int int0 = listOrderedMap_EntrySetView0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ListOrderedMap<Integer, String> listOrderedMap0 = new ListOrderedMap<Integer, String>();
      ListOrderedMap.ValuesView<String> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<String>(listOrderedMap0);
      int int0 = listOrderedMap_ValuesView0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      ListOrderedMap.ValuesView<Object> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Object>(listOrderedMap0);
      Iterator<Object> iterator0 = listOrderedMap_ValuesView0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(0);
      ListOrderedMap<Object, Object> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Object, Object>) hashMap0);
      ListOrderedMap.KeySetView<Object> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<Object>(listOrderedMap0);
      int int0 = listOrderedMap_KeySetView0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ListOrderedMap<Integer, String> listOrderedMap0 = new ListOrderedMap<Integer, String>();
      ListOrderedMap.KeySetView<Integer> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<Integer>(listOrderedMap0);
      Iterator<Integer> iterator0 = listOrderedMap_KeySetView0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Integer> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Integer>();
      HashMap<Object, AbstractMap.SimpleImmutableEntry<String, Integer>> hashMap0 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      ListOrderedMap<Object, AbstractMap.SimpleImmutableEntry<String, Integer>> listOrderedMap1 = new ListOrderedMap<Object, AbstractMap.SimpleImmutableEntry<String, Integer>>(hashMap0);
      ListOrderedMap.ValuesView<AbstractMap.SimpleImmutableEntry<String, Integer>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<AbstractMap.SimpleImmutableEntry<String, Integer>>(listOrderedMap1);
      ListOrderedMap.EntrySetView<AbstractMap.SimpleImmutableEntry<String, Integer>, Integer> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<AbstractMap.SimpleImmutableEntry<String, Integer>, Integer>(listOrderedMap0, listOrderedMap_ValuesView0);
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Integer>, Integer>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Integer>, Integer>>)listOrderedMap_EntrySetView0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>>();
      ListOrderedMap<Object, Integer> listOrderedMap0 = new ListOrderedMap<Object, Integer>();
      ListOrderedMap.ListOrderedMapEntry<Object, Integer> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<Object, Integer>(listOrderedMap0, listOrderedMap0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(listOrderedMap_ListOrderedMapEntry0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      ListOrderedMap<Object, String> listOrderedMap1 = new ListOrderedMap<Object, String>(hashMap1);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(listOrderedMap1, "org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator");
      hashMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleEntry0);
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>> listOrderedMap2 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>>(hashMap0);
      OrderedMapIterator<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>> orderedMapIterator0 = listOrderedMap2.mapIterator();
      assertTrue(orderedMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ListOrderedMap<Integer, String> listOrderedMap0 = new ListOrderedMap<Integer, String>();
      Integer integer0 = new Integer((-1));
      listOrderedMap0.putIfAbsent(integer0, "");
      Integer integer1 = listOrderedMap0.lastKey();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ListOrderedMap<String, String> listOrderedMap0 = new ListOrderedMap<String, String>();
      ListOrderedMap.ListOrderedMapEntry<String, String> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<String, String>(listOrderedMap0, "");
      HashMap<String, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      ListOrderedMap<String, AbstractMap.SimpleEntry<Object, Object>> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<String, AbstractMap.SimpleEntry<Object, Object>>) hashMap0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(listOrderedMap_ListOrderedMapEntry0);
      hashMap0.put("", abstractMap_SimpleEntry0);
      Set<String> set0 = listOrderedMap1.keySet();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, String> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, String>();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Integer>, String> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleImmutableEntry<String, Integer>, String>) hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      listOrderedMap0.compute((AbstractMap.SimpleImmutableEntry<String, Integer>) null, biFunction0);
      int int0 = listOrderedMap0.indexOf((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ListOrderedMap<String, Object> listOrderedMap0 = new ListOrderedMap<String, Object>();
      // Undeclared exception!
      try { 
        listOrderedMap0.setValue(123, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 123, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      ListOrderedMap<AbstractMap.SimpleEntry<String, Object>, Object> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<String, Object>, Object>(hashMap0);
      // Undeclared exception!
      try { 
        listOrderedMap0.remove((-1115));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ListOrderedMap<String, Object> listOrderedMap0 = new ListOrderedMap<String, Object>();
      // Undeclared exception!
      try { 
        listOrderedMap0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ListOrderedMap<Integer, AbstractMap.SimpleEntry<String, String>> listOrderedMap0 = new ListOrderedMap<Integer, AbstractMap.SimpleEntry<String, String>>();
      // Undeclared exception!
      try { 
        listOrderedMap0.get(1985);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1985, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ListOrderedMap<Object, String> listOrderedMap0 = null;
      try {
        listOrderedMap0 = new ListOrderedMap<Object, String>((Map<Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Integer, Object>, String> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Object>, String>();
      ListOrderedMap<AbstractMap.SimpleEntry<Integer, Object>, String> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleEntry<Integer, Object>, String>) hashMap0);
      // Undeclared exception!
      try { 
        listOrderedMap0.get((-3363));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>> hashMap0 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      ListOrderedMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Object, AbstractMap.SimpleImmutableEntry<Integer, String>>) hashMap0);
      // Undeclared exception!
      try { 
        listOrderedMap0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, Object>> listOrderedMap0 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      Set<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>> set0 = (Set<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>>)listOrderedMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      ListOrderedMap<String, AbstractMap.SimpleEntry<Object, Object>> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<String, AbstractMap.SimpleEntry<Object, Object>>) hashMap0);
      Set<String> set0 = listOrderedMap0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      ListOrderedMap<Object, String> listOrderedMap0 = new ListOrderedMap<Object, String>(hashMap0);
      List<Object> list0 = listOrderedMap0.keyList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      ListOrderedMap<Integer, Object> listOrderedMap0 = new ListOrderedMap<Integer, Object>(hashMap0);
      // Undeclared exception!
      try { 
        listOrderedMap0.setValue((-1719), hashMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, HashMap<Integer, Object>> hashMap0 = new HashMap<String, HashMap<Integer, Object>>();
      ListOrderedMap<String, HashMap<Integer, Object>> listOrderedMap0 = new ListOrderedMap<String, HashMap<Integer, Object>>(hashMap0);
      listOrderedMap0.clear();
      assertTrue(listOrderedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<Integer, Integer>, String> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Integer, Integer>, String>();
      // Undeclared exception!
      try { 
        listOrderedMap0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ListOrderedMap<String, String> listOrderedMap0 = new ListOrderedMap<String, String>();
      ListOrderedMap.ListOrderedMapIterator<String, String> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<String, String>(listOrderedMap0);
      String string0 = listOrderedMap_ListOrderedMapIterator0.toString();
      assertEquals("Iterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ListOrderedMap<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>, AbstractMap.SimpleEntry<Integer, Object>> listOrderedMap0 = new ListOrderedMap<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>, AbstractMap.SimpleEntry<Integer, Object>>();
      ListOrderedMap.ListOrderedMapIterator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>, AbstractMap.SimpleEntry<Integer, Object>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>, AbstractMap.SimpleEntry<Integer, Object>>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.setValue((AbstractMap.SimpleEntry<Integer, Object>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ListOrderedMap<Map.Entry<Object, Object>, ListOrderedMap.ValuesView<String>> listOrderedMap0 = new ListOrderedMap<Map.Entry<Object, Object>, ListOrderedMap.ValuesView<String>>();
      ListOrderedMap.ListOrderedMapIterator<Map.Entry<Object, Object>, ListOrderedMap.ValuesView<String>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Map.Entry<Object, Object>, ListOrderedMap.ValuesView<String>>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ListOrderedMap<UnmodifiableList<Object>, Integer> listOrderedMap0 = new ListOrderedMap<UnmodifiableList<Object>, Integer>();
      ListOrderedMap.ListOrderedMapIterator<UnmodifiableList<Object>, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<UnmodifiableList<Object>, Integer>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ListOrderedMap<String, String> listOrderedMap0 = new ListOrderedMap<String, String>();
      ListOrderedMap.ListOrderedMapIterator<String, String> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<String, String>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, String> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, String>();
      ListOrderedMap<AbstractMap.SimpleEntry<Object, String>, String> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleEntry<Object, String>, String>) hashMap0);
      HashMap<Object, AbstractMap.SimpleEntry<Object, String>> hashMap1 = new HashMap<Object, AbstractMap.SimpleEntry<Object, String>>();
      ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, String>> listOrderedMap1 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, String>>(hashMap1);
      ListOrderedMap.ValuesView<AbstractMap.SimpleEntry<Object, String>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<AbstractMap.SimpleEntry<Object, String>>(listOrderedMap1);
      ListOrderedMap.EntrySetView<AbstractMap.SimpleEntry<Object, String>, String> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<AbstractMap.SimpleEntry<Object, String>, String>(listOrderedMap0, listOrderedMap_ValuesView0);
      boolean boolean0 = listOrderedMap_EntrySetView0.remove("-HiQ[T|NY)r}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ListOrderedMap<String, Object> listOrderedMap0 = new ListOrderedMap<String, Object>();
      ListOrderedMap<String, Integer> listOrderedMap1 = new ListOrderedMap<String, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListOrderedMap.EntrySetView<String, Integer> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<String, Integer>(listOrderedMap1, linkedList0);
      boolean boolean0 = listOrderedMap_EntrySetView0.contains(listOrderedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<Object, Integer>, Integer> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Object, Integer>, Integer>();
      ListOrderedMap<AbstractMap.SimpleEntry<Object, Integer>, Integer> listOrderedMap1 = new ListOrderedMap<AbstractMap.SimpleEntry<Object, Integer>, Integer>(listOrderedMap0);
      LinkedList<AbstractMap.SimpleEntry<Object, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, Integer>>();
      ListOrderedMap.EntrySetView<AbstractMap.SimpleEntry<Object, Integer>, Integer> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<AbstractMap.SimpleEntry<Object, Integer>, Integer>(listOrderedMap1, linkedList0);
      boolean boolean0 = listOrderedMap_EntrySetView0.equals("Map must not be null.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<String, Integer>> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<String, Integer>>();
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("7", (Integer) null);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleEntry0);
      listOrderedMap0.put(0, abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
      List<AbstractMap.SimpleEntry<String, Integer>> list0 = listOrderedMap0.valueList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ListOrderedMap<Integer, Object> listOrderedMap0 = new ListOrderedMap<Integer, Object>();
      Integer integer0 = new Integer(3031);
      // Undeclared exception!
      try { 
        listOrderedMap0.put(3031, integer0, (Object) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3031, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ListOrderedMap<String, Object> listOrderedMap0 = new ListOrderedMap<String, Object>();
      // Undeclared exception!
      try { 
        listOrderedMap0.put((-3207), "Pd?uk\"I", (Object) "Pd?uk\"I");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3207, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, String> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, String>();
      String string0 = listOrderedMap0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      listOrderedMap0.putAll(0, (Map<? extends Integer, ? extends Integer>) listOrderedMap0);
      assertEquals(0, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, String>, Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, String>, Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>>();
      // Undeclared exception!
      try { 
        listOrderedMap0.putAll(123, (Map<? extends AbstractMap.SimpleImmutableEntry<Object, String>, ? extends Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>>) listOrderedMap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 123, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ListOrderedMap<Integer, AbstractMap.SimpleEntry<Object, Object>> listOrderedMap0 = new ListOrderedMap<Integer, AbstractMap.SimpleEntry<Object, Object>>();
      HashMap<Integer, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        listOrderedMap0.putAll((-4822), (Map<? extends Integer, ? extends AbstractMap.SimpleEntry<Object, Object>>) hashMap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4822, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      listOrderedMap0.putAll((Map<? extends Integer, ? extends Integer>) listOrderedMap0);
      assertTrue(listOrderedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(hashMap1, hashMap1);
      ListOrderedMap<HashMap<Object, Object>, Object> listOrderedMap0 = new ListOrderedMap<HashMap<Object, Object>, Object>(hashMap0);
      listOrderedMap0.put(hashMap1, (Object) "WYcBSp.|][|,R>X\"?");
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ListOrderedMap<Integer, Map.Entry<Object, Object>> listOrderedMap0 = new ListOrderedMap<Integer, Map.Entry<Object, Object>>();
      Integer integer0 = listOrderedMap0.previousKey(listOrderedMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, String> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, String>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = listOrderedMap0.nextKey(listOrderedMap0);
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ListOrderedMap<Object, Object> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Object, Object>) hashMap0);
      // Undeclared exception!
      try { 
        listOrderedMap0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, String> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, String>();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Integer>, String> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleImmutableEntry<String, Integer>, String>) hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      listOrderedMap0.compute((AbstractMap.SimpleImmutableEntry<String, Integer>) null, biFunction0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = listOrderedMap0.lastKey();
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ListOrderedMap<Object, Integer> listOrderedMap0 = new ListOrderedMap<Object, Integer>();
      // Undeclared exception!
      try { 
        listOrderedMap0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>) hashMap0);
      ListOrderedMap<Integer, Integer> listOrderedMap1 = new ListOrderedMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      ListOrderedMap.ListOrderedMapEntry<Integer, Integer> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<Integer, Integer>(listOrderedMap1, integer0);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(listOrderedMap_ListOrderedMapEntry0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, integer0);
      // Undeclared exception!
      try { 
        listOrderedMap0.firstKey();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, String> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, String>();
      ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, String> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleEntry<Object, Object>, String>) hashMap0);
      ListOrderedMap.KeySetView<AbstractMap.SimpleEntry<Object, Object>> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<AbstractMap.SimpleEntry<Object, Object>>(listOrderedMap0);
      listOrderedMap_KeySetView0.clear();
      assertEquals(0, listOrderedMap_KeySetView0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<String, Object>, String> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<String, Object>, String>();
      ListOrderedMap.KeySetView<AbstractMap.SimpleEntry<String, Object>> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<AbstractMap.SimpleEntry<String, Object>>(listOrderedMap0);
      boolean boolean0 = listOrderedMap_KeySetView0.contains("Iterator[]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<String, Object>, Integer> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<String, Object>, Integer>();
      Integer integer0 = new Integer((-218));
      int int0 = listOrderedMap0.indexOf(integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      Collection<AbstractMap.SimpleImmutableEntry<String, Object>> collection0 = listOrderedMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      ListOrderedMap<Object, Integer> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Object, Integer>) hashMap0);
      List<Object> list0 = listOrderedMap0.asList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>>();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>>(hashMap0);
      OrderedMapIterator<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>> orderedMapIterator0 = listOrderedMap0.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, String> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, String>();
      ListOrderedMap<String, String> listOrderedMap1 = new ListOrderedMap<String, String>();
      ListOrderedMap.ListOrderedMapEntry<String, String> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<String, String>(listOrderedMap1, "");
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(listOrderedMap_ListOrderedMapEntry0);
      listOrderedMap0.put(abstractMap_SimpleEntry0, " x0\"Atn?Xb");
      ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, String> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleEntry<Object, Object>, String>) listOrderedMap0);
      assertEquals(1, listOrderedMap2.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ListOrderedMap<Integer, Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>> listOrderedMap0 = new ListOrderedMap<Integer, Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>>();
      ListOrderedMap.ValuesView<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>>(listOrderedMap0);
      listOrderedMap_ValuesView0.clear();
      assertEquals(0, listOrderedMap_ValuesView0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      ListOrderedMap.ValuesView<Object> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Object>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ValuesView0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ListOrderedMap<String, Object> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<String, Object>) hashMap0);
      ListOrderedMap.ValuesView<Object> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Object>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ValuesView0.get(1075);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1075, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      ListOrderedMap.ValuesView<Object> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Object>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ValuesView0.set(0, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ListOrderedMap<HashMap<String, Object>, Object> listOrderedMap0 = new ListOrderedMap<HashMap<String, Object>, Object>();
      ListOrderedMap.ValuesView<Object> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Object>(listOrderedMap0);
      boolean boolean0 = listOrderedMap_ValuesView0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ListOrderedMap<Integer, HashMap<Integer, Object>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<Integer, Object>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedMap.EntrySetView<Integer, HashMap<Integer, Object>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Integer, HashMap<Integer, Object>>(listOrderedMap0, linkedList0);
      boolean boolean0 = listOrderedMap_EntrySetView0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      ListOrderedMap<AbstractMap.SimpleEntry<Integer, Object>, Object> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Integer, Object>, Object>(hashMap0);
      ListOrderedMap<String, AbstractMap.SimpleEntry<Integer, Object>> listOrderedMap1 = new ListOrderedMap<String, AbstractMap.SimpleEntry<Integer, Object>>();
      ListOrderedMap.ValuesView<AbstractMap.SimpleEntry<Integer, Object>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<AbstractMap.SimpleEntry<Integer, Object>>(listOrderedMap1);
      ListOrderedMap.EntrySetView<AbstractMap.SimpleEntry<Integer, Object>, Object> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<AbstractMap.SimpleEntry<Integer, Object>, Object>(listOrderedMap0, listOrderedMap_ValuesView0);
      String string0 = listOrderedMap_EntrySetView0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, Object>> listOrderedMap0 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      ListOrderedMap<Integer, Object> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<Integer, Object>) hashMap0);
      List<Object> list0 = listOrderedMap1.valueList();
      ListOrderedMap.EntrySetView<Object, AbstractMap.SimpleEntry<Object, Object>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Object, AbstractMap.SimpleEntry<Object, Object>>(listOrderedMap0, list0);
      listOrderedMap_EntrySetView0.clear();
      assertTrue(listOrderedMap_EntrySetView0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      ListOrderedMap.ListOrderedMapIterator<Object, Object> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Object, Object>(listOrderedMap0);
      boolean boolean0 = listOrderedMap_ListOrderedMapIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ListOrderedMap<Integer, String> listOrderedMap0 = new ListOrderedMap<Integer, String>();
      ListOrderedMap.ListOrderedMapIterator<Integer, String> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Integer, String>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ListOrderedMap<Integer, Map.Entry<Object, Object>> listOrderedMap0 = new ListOrderedMap<Integer, Map.Entry<Object, Object>>();
      ListOrderedMap.ListOrderedMapIterator<Integer, Map.Entry<Object, Object>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Integer, Map.Entry<Object, Object>>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<Object, String>, UnmodifiableList<Object>> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Object, String>, UnmodifiableList<Object>>();
      ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleEntry<Object, String>, UnmodifiableList<Object>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleEntry<Object, String>, UnmodifiableList<Object>>(listOrderedMap0);
      boolean boolean0 = listOrderedMap_ListOrderedMapIterator0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<Integer, Object>, Integer> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Integer, Object>, Integer>();
      ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleEntry<Integer, Object>, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleEntry<Integer, Object>, Integer>(listOrderedMap0);
      listOrderedMap_ListOrderedMapIterator0.reset();
      assertFalse(listOrderedMap_ListOrderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ListOrderedMap<String, String> listOrderedMap0 = new ListOrderedMap<String, String>();
      ListOrderedMap.ListOrderedMapEntry<String, String> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<String, String>(listOrderedMap0, "");
      String string0 = listOrderedMap_ListOrderedMapEntry0.setValue("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, String>> listOrderedMap0 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedMap.ListOrderedIterator<Object, AbstractMap.SimpleEntry<Object, String>> listOrderedMap_ListOrderedIterator0 = new ListOrderedMap.ListOrderedIterator<Object, AbstractMap.SimpleEntry<Object, String>>(listOrderedMap0, linkedList0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ListOrderedMap<String, Integer> listOrderedMap0 = new ListOrderedMap<String, Integer>();
      ListOrderedMap<String, String> listOrderedMap1 = new ListOrderedMap<String, String>();
      ListOrderedMap.ValuesView<String> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<String>(listOrderedMap1);
      ListOrderedMap.ListOrderedIterator<String, Integer> listOrderedMap_ListOrderedIterator0 = new ListOrderedMap.ListOrderedIterator<String, Integer>(listOrderedMap0, listOrderedMap_ValuesView0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleEntry<Object, String>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleEntry<Object, String>>();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleEntry<Object, String>> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleEntry<Object, String>>(hashMap0);
      ListOrderedMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> listOrderedMap1 = new ListOrderedMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      ListOrderedMap.ValuesView<AbstractMap.SimpleImmutableEntry<Integer, Integer>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(listOrderedMap1);
      ListOrderedMap.EntrySetView<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleEntry<Object, String>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleEntry<Object, String>>(listOrderedMap0, listOrderedMap_ValuesView0);
      boolean boolean0 = listOrderedMap_EntrySetView0.containsAll(listOrderedMap_ValuesView0);
      assertTrue(boolean0);
  }
}
