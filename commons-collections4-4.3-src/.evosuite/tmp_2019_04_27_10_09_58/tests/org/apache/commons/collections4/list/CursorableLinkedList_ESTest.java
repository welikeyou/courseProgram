/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:39:45 GMT 2019
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.list.AbstractLinkedList;
import org.apache.commons.collections4.list.CursorableLinkedList;
import org.apache.commons.collections4.list.NodeCachingLinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CursorableLinkedList_ESTest extends CursorableLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      boolean boolean0 = abstractLinkedList_LinkedSubList0.add((String) null);
      assertTrue(boolean0);
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      
      boolean boolean1 = abstractLinkedList_LinkedSubList0.add("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      assertTrue(cursorableLinkedList0.contains(""));
      assertTrue(abstractLinkedList_LinkedSubList0.contains(""));
      
      int int0 = abstractLinkedList_LinkedSubList0.lastIndexOf(cursorableLinkedList0);
      assertEquals((-1), int0);
      assertEquals(2, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      assertTrue(cursorableLinkedList0.contains(""));
      assertTrue(abstractLinkedList_LinkedSubList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 0, 0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      boolean boolean0 = abstractLinkedList_LinkedSubList0.add((String) null);
      assertTrue(boolean0);
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      
      boolean boolean1 = abstractLinkedList_LinkedSubList0.add("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      assertTrue(cursorableLinkedList0.contains(""));
      assertTrue(abstractLinkedList_LinkedSubList0.contains(""));
      
      abstractLinkedList_LinkedSubList0.clear();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertFalse(cursorableLinkedList0.contains(""));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      cursorableLinkedList0.size = (-1768);
      assertEquals((-1768), cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      
      cursorableLinkedList0.removeAllNodes();
      assertEquals((-1768), cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      assertFalse(cursorableLinkedList0.contains((-1768)));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Locale.LanguageRange> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Locale.LanguageRange>(cursorableLinkedList0, 0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      CursorableLinkedList.SubCursor<Locale.LanguageRange> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Locale.LanguageRange>(abstractLinkedList_LinkedSubList0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList_SubCursor0);
      
      cursorableLinkedList_SubCursor0.currentRemovedByAnother = true;
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      
      cursorableLinkedList_SubCursor0.remove();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      
      ListIterator<Object> listIterator0 = cursorableLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Locale.LanguageRange> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Locale.LanguageRange>(cursorableLinkedList0, 0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      CursorableLinkedList.SubCursor<Locale.LanguageRange> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Locale.LanguageRange>(abstractLinkedList_LinkedSubList0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList_SubCursor0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList_SubCursor0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Locale.LanguageRange> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Locale.LanguageRange>(cursorableLinkedList0, 0, 0);
      assertEquals(0, linkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      CursorableLinkedList.SubCursor<Locale.LanguageRange> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Locale.LanguageRange>(abstractLinkedList_LinkedSubList0, 0);
      assertEquals(0, linkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList_SubCursor0);
      
      int int0 = cursorableLinkedList_SubCursor0.nextIndex();
      assertEquals(0, int0);
      assertEquals(0, linkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Locale.LanguageRange> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Locale.LanguageRange>(cursorableLinkedList0, 0, 0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      CursorableLinkedList.SubCursor<Locale.LanguageRange> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Locale.LanguageRange>(abstractLinkedList_LinkedSubList0, 0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList_SubCursor0);
      
      boolean boolean0 = cursorableLinkedList_SubCursor0.hasPrevious();
      assertFalse(boolean0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      
      CursorableLinkedList.SubCursor<Integer> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Integer>(abstractLinkedList_LinkedSubList0, 0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList_SubCursor0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      
      boolean boolean0 = cursorableLinkedList_SubCursor0.hasNext();
      assertFalse(boolean0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList.Cursor<Locale.LanguageRange> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Locale.LanguageRange>(cursorableLinkedList0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList_Cursor0);
      
      cursorableLinkedList_Cursor0.checkModCount();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertEquals(0, cursorableLinkedList1.size());
      assertNotNull(cursorableLinkedList1);
      
      cursorableLinkedList1.init();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertEquals(0, cursorableLinkedList1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>();
      assertNotNull(abstractLinkedList_Node0);
      
      cursorableLinkedList0.broadcastNodeRemoved(abstractLinkedList_Node0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      cursorableLinkedList0.broadcastNodeChanged((AbstractLinkedList.Node<Integer>) null);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor(0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList_Cursor0);
      assertFalse(cursorableLinkedList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      WeakReference<String> weakReference0 = new WeakReference<String>("");
      assertFalse(weakReference0.isEnqueued());
      assertNotNull(weakReference0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.updateNode((AbstractLinkedList.Node<Object>) null, weakReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList1 = new CursorableLinkedList<Locale.LanguageRange>(cursorableLinkedList0);
      assertTrue(cursorableLinkedList1.equals((Object)cursorableLinkedList0));
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertEquals(0, cursorableLinkedList1.size());
      assertNotNull(cursorableLinkedList1);
      
      cursorableLinkedList1.size = (-28);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertEquals((-28), cursorableLinkedList1.size());
      assertFalse(cursorableLinkedList1.isEmpty());
      
      // Undeclared exception!
      try { 
        cursorableLinkedList1.cursor();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-28).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.createSubListListIterator((AbstractLinkedList.LinkedSubList<String>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$SubCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 0, 0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 784);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (784) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      ListIterator<Integer> listIterator0 = cursorableLinkedList0.listIterator();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.broadcastNodeInserted((AbstractLinkedList.Node<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = new AbstractLinkedList.Node<String>((String) null);
      assertNotNull(abstractLinkedList_Node0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.addNode(abstractLinkedList_Node0, abstractLinkedList_Node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = null;
      try {
        cursorableLinkedList0 = new CursorableLinkedList<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CursorableLinkedList<Locale> cursorableLinkedList0 = new CursorableLinkedList<Locale>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.Node<Locale> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Locale>();
      assertNotNull(abstractLinkedList_Node0);
      
      cursorableLinkedList0.removeNode(abstractLinkedList_Node0);
      assertEquals((-1), cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      
      CursorableLinkedList<Object> cursorableLinkedList1 = null;
      try {
        cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-1).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      Iterator<Locale.LanguageRange> iterator0 = cursorableLinkedList0.iterator();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.cursor(91);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (91) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList_Cursor0);
      
      cursorableLinkedList_Cursor0.close();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      
      cursorableLinkedList_Cursor0.close();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      boolean boolean0 = abstractLinkedList_LinkedSubList0.add((String) null);
      assertTrue(boolean0);
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      
      int int0 = abstractLinkedList_LinkedSubList0.lastIndexOf(cursorableLinkedList0);
      assertEquals((-1), int0);
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      
      abstractLinkedList_LinkedSubList0.clear();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.add((String) null);
      cursorableLinkedList0.createSubListIterator(abstractLinkedList_LinkedSubList0);
      abstractLinkedList_LinkedSubList0.clear();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = new AbstractLinkedList.Node<String>();
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<String> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<String>(abstractLinkedList_LinkedSubList0, 0);
      cursorableLinkedList_SubCursor0.nodeInserted(abstractLinkedList_Node0);
      cursorableLinkedList_SubCursor0.add("sT");
      int int0 = cursorableLinkedList_SubCursor0.nextIndex();
      assertTrue(abstractLinkedList_LinkedSubList0.contains("sT"));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      CursorableLinkedList.Cursor<String> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<String>(cursorableLinkedList0, 0);
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = new AbstractLinkedList.Node<String>();
      cursorableLinkedList_Cursor0.nodeRemoved(abstractLinkedList_Node0);
      int int0 = cursorableLinkedList_Cursor0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      cursorableLinkedList_Cursor0.nodeRemoved((AbstractLinkedList.Node<Object>) null);
      cursorableLinkedList_Cursor0.remove();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>();
      cursorableLinkedList0.listIterator(0);
      Integer integer0 = new Integer(0);
      cursorableLinkedList0.updateNode(abstractLinkedList_Node0, integer0);
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      cursorableLinkedList0.replaceAll(unaryOperator0);
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      cursorableLinkedList_Cursor0.close();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      cursorableLinkedList_Cursor0.close();
      // Undeclared exception!
      try { 
        cursorableLinkedList_Cursor0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // Cursor closed
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      CursorableLinkedList.Cursor<String> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<String>(cursorableLinkedList0, 0);
      cursorableLinkedList0.unregisterCursor(cursorableLinkedList_Cursor0);
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CursorableLinkedList<InputStream> cursorableLinkedList0 = new CursorableLinkedList<InputStream>();
      cursorableLinkedList0.registerCursor((CursorableLinkedList.Cursor<InputStream>) null);
      CursorableLinkedList.Cursor<InputStream> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      assertNotNull(cursorableLinkedList_Cursor0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      nodeCachingLinkedList0.add((Integer) null);
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(nodeCachingLinkedList0);
      cursorableLinkedList0.removeAllNodes();
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      cursorableLinkedList0.removeAllNodes();
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<String> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<String>(abstractLinkedList_LinkedSubList0, 0);
      cursorableLinkedList_SubCursor0.add("Cursor closed");
      assertTrue(abstractLinkedList_LinkedSubList0.contains("Cursor closed"));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      CursorableLinkedList.Cursor<Locale.LanguageRange> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Locale.LanguageRange>(cursorableLinkedList0, 0);
      cursorableLinkedList_Cursor0.nodeChanged((AbstractLinkedList.Node<Locale.LanguageRange>) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      cursorableLinkedList_Cursor0.add(cursorableLinkedList0);
      assertFalse(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.listIterator(1922);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (1922) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      cursorableLinkedList0.listIterator();
      Integer integer0 = new Integer(0);
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = cursorableLinkedList0.createNode(integer0);
      cursorableLinkedList0.broadcastNodeInserted(abstractLinkedList_Node0);
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CursorableLinkedList<CursorableLinkedList.Cursor<String>> cursorableLinkedList0 = new CursorableLinkedList<CursorableLinkedList.Cursor<String>>();
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
      // Undeclared exception!
      try { 
        cursorableLinkedList1.removeNode((AbstractLinkedList.Node<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CursorableLinkedList<CursorableLinkedList.Cursor<String>> cursorableLinkedList0 = new CursorableLinkedList<CursorableLinkedList.Cursor<String>>();
      AbstractLinkedList.Node<CursorableLinkedList.Cursor<String>> abstractLinkedList_Node0 = new AbstractLinkedList.Node<CursorableLinkedList.Cursor<String>>();
      cursorableLinkedList0.addNode(abstractLinkedList_Node0, abstractLinkedList_Node0);
      assertEquals(1, cursorableLinkedList0.size());
  }
}
