/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 02:54:25 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractHashedMap_ESTest extends AbstractHashedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<String, InputStream>, HashMap<String, Integer>> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<String, InputStream>, HashMap<String, Integer>>(0, (-2300.5378F), 0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      abstractHashedMap0.checkCapacity();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<Object, Object>, Object> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<Object, Object>, Object>(0, 0.0F, 0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.KeySet<AbstractMap.SimpleEntry<Object, Object>> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<AbstractMap.SimpleEntry<Object, Object>>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap_KeySet0.size());
      assertNotNull(abstractHashedMap_KeySet0);
      
      abstractHashedMap0.keySet = abstractHashedMap_KeySet0;
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap_KeySet0.size());
      assertEquals(0, abstractHashedMap0.keySet.size());
      
      int int0 = abstractHashedMap0.keySet.size();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      AbstractHashedMap<Object, InputStream> abstractHashedMap0 = new AbstractHashedMap<Object, InputStream>(3458);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      abstractHashedMap0.ensureCapacity(0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleImmutableEntry<Object, String>, String>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.HashEntry<AbstractMap.SimpleImmutableEntry<Object, String>, String> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<AbstractMap.SimpleImmutableEntry<Object, String>, String>((AbstractHashedMap.HashEntry<AbstractMap.SimpleImmutableEntry<Object, String>, String>) null, 439, (Object) null, "");
      assertNotNull(abstractHashedMap_HashEntry0);
      
      abstractHashedMap0.destroyEntry(abstractHashedMap_HashEntry0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      AbstractHashedMap<String, Object> abstractHashedMap0 = new AbstractHashedMap<String, Object>(1522, 2296.39F, 61);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.KeySet<String> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<String>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap_KeySet0.size());
      assertNotNull(abstractHashedMap_KeySet0);
      
      Iterator<String> iterator0 = abstractHashedMap_KeySet0.iterator();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap_KeySet0.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<Object, Integer>, Object> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<Object, Integer>, Object>(2, 3325.831F);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.HashMapIterator<AbstractMap.SimpleEntry<Object, Integer>, Object> abstractHashedMap_HashMapIterator0 = new AbstractHashedMap.HashMapIterator<AbstractMap.SimpleEntry<Object, Integer>, Object>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertFalse(abstractHashedMap_HashMapIterator0.hasNext());
      assertNotNull(abstractHashedMap_HashMapIterator0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap_HashMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<Object, Integer>, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<Object, Integer>, FilterInputStream>(61);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.HashMapIterator<AbstractMap.SimpleEntry<Object, Integer>, FilterInputStream> abstractHashedMap_HashMapIterator0 = new AbstractHashedMap.HashMapIterator<AbstractMap.SimpleEntry<Object, Integer>, FilterInputStream>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertFalse(abstractHashedMap_HashMapIterator0.hasNext());
      assertNotNull(abstractHashedMap_HashMapIterator0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap_HashMapIterator0.nextEntry();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(32, 3855.3F, (-502));
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.HashMapIterator<Integer, Integer> abstractHashedMap_HashMapIterator0 = new AbstractHashedMap.HashMapIterator<Integer, Integer>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertFalse(abstractHashedMap_HashMapIterator0.hasNext());
      assertNotNull(abstractHashedMap_HashMapIterator0);
      
      boolean boolean0 = abstractHashedMap_HashMapIterator0.hasNext();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertFalse(abstractHashedMap_HashMapIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      AbstractHashedMap.HashEntry<Map.Entry<InputStream, Object>, String> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<Map.Entry<InputStream, Object>, String>((AbstractHashedMap.HashEntry<Map.Entry<InputStream, Object>, String>) null, 12, (Object) null, "qG@?GrsZ<,sA eu2[");
      assertNotNull(abstractHashedMap_HashEntry0);
      
      Map.Entry<InputStream, Object> map_Entry0 = abstractHashedMap_HashEntry0.getKey();
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, String> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, String>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap<FilterInputStream, String> abstractHashedMap1 = new AbstractHashedMap<FilterInputStream, String>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertNotNull(abstractHashedMap1);
      assertTrue(abstractHashedMap1.equals((Object)abstractHashedMap0));
      
      AbstractHashedMap.EntrySetIterator<FilterInputStream, String> abstractHashedMap_EntrySetIterator0 = new AbstractHashedMap.EntrySetIterator<FilterInputStream, String>(abstractHashedMap1);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertFalse(abstractHashedMap_EntrySetIterator0.hasNext());
      assertNotNull(abstractHashedMap_EntrySetIterator0);
      assertTrue(abstractHashedMap0.equals((Object)abstractHashedMap1));
      assertTrue(abstractHashedMap1.equals((Object)abstractHashedMap0));
      
      // Undeclared exception!
      try { 
        abstractHashedMap_EntrySetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      AbstractHashedMap<HashMap<Integer, String>, Object> abstractHashedMap0 = new AbstractHashedMap<HashMap<Integer, String>, Object>(0, 4832.92F);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.EntrySet<HashMap<Integer, String>, Object> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<HashMap<Integer, String>, Object>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap_EntrySet0.size());
      assertNotNull(abstractHashedMap_EntrySet0);
      
      Iterator<Map.Entry<HashMap<Integer, String>, Object>> iterator0 = (Iterator<Map.Entry<HashMap<Integer, String>, Object>>)abstractHashedMap_EntrySet0.iterator();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap_EntrySet0.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      abstractHashedMap0.init();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      AbstractHashedMap<Object, InputStream> abstractHashedMap0 = new AbstractHashedMap<Object, InputStream>(1838, 1838);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      InputStream inputStream0 = abstractHashedMap0.putIfAbsent((Object) null, byteArrayInputStream0);
      assertEquals(1, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(4, byteArrayInputStream0.available());
      assertNull(inputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = abstractHashedMap0.size();
      assertEquals(1, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      AbstractHashedMap<String, Map.Entry<InputStream, Object>> abstractHashedMap0 = new AbstractHashedMap<String, Map.Entry<InputStream, Object>>(3458, 0, 0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap<String, String> abstractHashedMap1 = new AbstractHashedMap<String, String>(630);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertNotNull(abstractHashedMap1);
      
      boolean boolean0 = abstractHashedMap0.isEqualKey(abstractHashedMap1, abstractHashedMap1);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(13);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      int int0 = abstractHashedMap0.hashIndex(0, 13);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>(12);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      int int0 = abstractHashedMap0.hashIndex(1381, 12);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(1324, 0.0F, 109);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      int int0 = abstractHashedMap0.hash((Object) null);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals((-8130816), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(2623);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap<Integer, Integer> abstractHashedMap1 = new AbstractHashedMap<Integer, Integer>();
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      
      AbstractHashedMap.HashEntry<String, String> abstractHashedMap_HashEntry0 = abstractHashedMap0.getEntry(abstractHashedMap1);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNull(abstractHashedMap_HashEntry0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(255, 1084.06F);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      Integer integer0 = abstractHashedMap0.get((Object) null);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer integer0 = new Integer(44);
      assertNotNull(integer0);
      assertEquals(44, (int)integer0);
      
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>(44, 940.48535F, 18);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.HashEntry<String, Integer> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<String, Integer>((AbstractHashedMap.HashEntry<String, Integer>) null, 125, integer0, integer0);
      assertNotNull(abstractHashedMap_HashEntry0);
      
      AbstractHashedMap.HashEntry<String, Integer> abstractHashedMap_HashEntry1 = abstractHashedMap0.createEntry(abstractHashedMap_HashEntry0, (byte)0, "&", integer0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap_HashEntry1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      AbstractHashedMap<String, HashMap<String, Integer>> abstractHashedMap0 = new AbstractHashedMap<String, HashMap<String, Integer>>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      Object object0 = abstractHashedMap0.convertKey((Object) null);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<Integer, String>, AbstractHashedMap<String, Integer>> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<Integer, String>, AbstractHashedMap<String, Integer>>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      int int0 = abstractHashedMap0.calculateThreshold(123, 123);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(15129, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      AbstractHashedMap<HashMap<Object, Object>, Object> abstractHashedMap0 = new AbstractHashedMap<HashMap<Object, Object>, Object>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      int int0 = abstractHashedMap0.calculateThreshold((-1647), 908.3328F);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals((-1496024), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleImmutableEntry<String, InputStream>, Object> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleImmutableEntry<String, InputStream>, Object>(12);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      int int0 = abstractHashedMap0.calculateNewCapacity(12);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      AbstractHashedMap<Integer, HashMap<Object, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, HashMap<Object, Integer>>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.updateEntry((AbstractHashedMap.HashEntry<Integer, HashMap<Object, Integer>>) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<String, String>, Map.Entry<InputStream, Object>> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<String, String>, Map.Entry<InputStream, Object>>(1943, 1943);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      abstractHashedMap0.size = (-404);
      assertEquals((-404), abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.toString();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      AbstractHashedMap<Object, HashMap<String, String>> abstractHashedMap0 = new AbstractHashedMap<Object, HashMap<String, String>>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.removeMapping((AbstractHashedMap.HashEntry<Object, HashMap<String, String>>) null, 12, (AbstractHashedMap.HashEntry<Object, HashMap<String, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      AbstractHashedMap<Integer, Map.Entry<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, Map.Entry<Integer, Integer>>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      Integer integer0 = new Integer(1465);
      assertNotNull(integer0);
      assertEquals(1465, (int)integer0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.remove((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      Integer integer0 = new Integer(123);
      assertNotNull(integer0);
      assertEquals(123, (int)integer0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.put(integer0, "x|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(0, 0, (-1620));
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      Integer integer0 = new Integer((-899));
      assertNotNull(integer0);
      assertEquals((-899), (int)integer0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("", integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.put(abstractMap_SimpleImmutableEntry0, pipedInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8147762
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(1, 1);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 14);
      assertNotNull(bufferedInputStream0);
      
      AbstractMap.SimpleImmutableEntry<InputStream, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<InputStream, Object>(bufferedInputStream0, (Object) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.isEqualValue((Object) null, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      AbstractHashedMap<HashMap<FilterInputStream, Map.Entry<InputStream, Object>>, Object> abstractHashedMap0 = new AbstractHashedMap<HashMap<FilterInputStream, Map.Entry<InputStream, Object>>, Object>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.get("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, HashMap<String, String>> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, HashMap<String, String>>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.ensureCapacity((-266));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uE108\u0000\u0005", byteArrayOutputStream0.toString());
      assertNotNull(objectOutputStream0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.doWriteObject(objectOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      AbstractHashedMap<String, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<String, FilterInputStream>(4, 4);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap<Object, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Object, FilterInputStream>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      
      // Undeclared exception!
      try { 
        abstractHashedMap1.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      AbstractHashedMap<String, Object> abstractHashedMap0 = new AbstractHashedMap<String, Object>(2, 1.0F);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.destroyEntry((AbstractHashedMap.HashEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      AbstractHashedMap<Object, String> abstractHashedMap0 = new AbstractHashedMap<Object, String>(0, 0, 1158);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      Iterator<Map.Entry<Object, String>> iterator0 = (Iterator<Map.Entry<Object, String>>)abstractHashedMap0.createEntrySetIterator();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(iterator0);
      
      AbstractHashedMap<String, Integer> abstractHashedMap1 = new AbstractHashedMap<String, Integer>(1158, 0.0F, 1574);
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      
      abstractHashedMap1.data = null;
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      
      // Undeclared exception!
      try { 
        abstractHashedMap1.containsValue(iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AbstractHashedMap<HashMap<InputStream, InputStream>, Map.Entry<InputStream, Object>> abstractHashedMap0 = new AbstractHashedMap<HashMap<InputStream, InputStream>, Map.Entry<InputStream, Object>>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap<Map.Entry<InputStream, Object>, AbstractMap.SimpleImmutableEntry<InputStream, FilterInputStream>> abstractHashedMap1 = new AbstractHashedMap<Map.Entry<InputStream, Object>, AbstractMap.SimpleImmutableEntry<InputStream, FilterInputStream>>();
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertNotNull(abstractHashedMap1);
      
      // Undeclared exception!
      try { 
        abstractHashedMap1.containsKey(abstractHashedMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleImmutableEntry<Object, String>, String>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<Object, Object>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<Object, Object>, Integer>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.checkCapacity();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      AbstractHashedMap<InputStream, Object> abstractHashedMap0 = new AbstractHashedMap<InputStream, Object>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.addMapping((-1), (-1), (InputStream) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      AbstractHashedMap<HashMap<String, FilterInputStream>, Integer> abstractHashedMap0 = new AbstractHashedMap<HashMap<String, FilterInputStream>, Integer>(44);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      HashMap<String, FilterInputStream> hashMap0 = new HashMap<String, FilterInputStream>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(559);
      assertNotNull(integer0);
      assertEquals(559, (int)integer0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.addMapping(559, 44, hashMap0, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 559
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.addEntry((AbstractHashedMap.HashEntry<Integer, Integer>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      AbstractHashedMap<String, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<String, FilterInputStream>(0, (-3728.9011F), 1189);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.addEntry((AbstractHashedMap.HashEntry<String, FilterInputStream>) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      AbstractHashedMap<Object, Object> abstractHashedMap0 = null;
      try {
        abstractHashedMap0 = new AbstractHashedMap<Object, Object>((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, Integer>, String> abstractHashedMap0 = null;
      try {
        abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, Integer>, String>((-2245), 36.58651F, 3727);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      AbstractHashedMap<Object, Object> abstractHashedMap0 = null;
      try {
        abstractHashedMap0 = new AbstractHashedMap<Object, Object>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(24);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)abstractHashedMap0.entrySet();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Set<Map.Entry<Object, Object>> set1 = (Set<Map.Entry<Object, Object>>)abstractHashedMap0.entrySet();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotNull(set1);
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      AbstractHashedMap<String, InputStream> abstractHashedMap0 = new AbstractHashedMap<String, InputStream>(0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3282);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BiFunction<InputStream, Object, InputStream> biFunction0 = (BiFunction<InputStream, Object, InputStream>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream1 = (PipedInputStream)abstractHashedMap0.merge("No next() entry in the iteration", pipedInputStream0, biFunction0);
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(1, abstractHashedMap0.size());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, pipedInputStream1.available());
      assertNotNull(pipedInputStream1);
      assertSame(pipedInputStream0, pipedInputStream1);
      assertSame(pipedInputStream1, pipedInputStream0);
      
      AbstractHashedMap<Object, InputStream> abstractHashedMap1 = new AbstractHashedMap<Object, InputStream>(abstractHashedMap0);
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(1, abstractHashedMap0.size());
      assertEquals(1, abstractHashedMap1.size());
      assertFalse(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      
      MapIterator<Object, InputStream> mapIterator0 = abstractHashedMap1.mapIterator();
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(1, abstractHashedMap0.size());
      assertEquals(1, abstractHashedMap1.size());
      assertFalse(abstractHashedMap1.isEmpty());
      assertTrue(mapIterator0.hasNext());
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      AbstractHashedMap<InputStream, String> abstractHashedMap0 = new AbstractHashedMap<InputStream, String>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      MapIterator<InputStream, String> mapIterator0 = abstractHashedMap0.mapIterator();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertFalse(mapIterator0.hasNext());
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      AbstractHashedMap<InputStream, AbstractHashedMap<String, String>> abstractHashedMap0 = new AbstractHashedMap<InputStream, AbstractHashedMap<String, String>>(0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      abstractHashedMap0.clear();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      AbstractHashedMap<Object, Integer> abstractHashedMap0 = new AbstractHashedMap<Object, Integer>(0, 0, (-1));
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      abstractHashedMap0.clear();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AbstractHashedMap<Object, InputStream> abstractHashedMap0 = new AbstractHashedMap<Object, InputStream>(3458);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      InputStream inputStream0 = abstractHashedMap0.remove((Object) abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<Integer, Object>, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<Integer, Object>, FilterInputStream>(1645);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap<Object, AbstractMap.SimpleImmutableEntry<InputStream, Object>> abstractHashedMap1 = new AbstractHashedMap<Object, AbstractMap.SimpleImmutableEntry<InputStream, Object>>(64, 64);
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      
      boolean boolean0 = abstractHashedMap1.containsKey(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(24);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)abstractHashedMap0.entrySet();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      AbstractHashedMap<String, String> abstractHashedMap1 = new AbstractHashedMap<String, String>(24);
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      
      abstractHashedMap1.addMapping(1, (-117), "", "FE(1w&qF,j$+*");
      assertEquals(1, abstractHashedMap1.size());
      assertFalse(abstractHashedMap1.isEmpty());
      
      boolean boolean0 = abstractHashedMap1.replace("", "", "org.apache.commons.collections4.iterators.AbstractEmptyIterator");
      assertEquals(1, abstractHashedMap1.size());
      assertFalse(abstractHashedMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      AbstractHashedMap<Object, AbstractMap.SimpleEntry<Object, String>> abstractHashedMap0 = new AbstractHashedMap<Object, AbstractMap.SimpleEntry<Object, String>>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      int int0 = abstractHashedMap0.size();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(889);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      abstractHashedMap0.addMapping(1, (-117), "", "FE(1w&qF,j$+*");
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(1, abstractHashedMap0.size());
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      abstractHashedMap0.replaceAll(biFunction0);
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(1, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      AbstractHashedMap<InputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<InputStream, Integer>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      String string0 = abstractHashedMap0.toString();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      AbstractHashedMap<Object, String> abstractHashedMap0 = new AbstractHashedMap<Object, String>(0, 1194.2075F, 0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      abstractHashedMap0.hashCode();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<Integer, Object>, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<Integer, Object>, FilterInputStream>(1645);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractMap.SimpleImmutableEntry<InputStream, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<InputStream, Object>((InputStream) null, abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      boolean boolean0 = abstractHashedMap0.equals(abstractMap_SimpleImmutableEntry0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<String, String>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<String, String>, Integer>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap<HashMap<Map.Entry<InputStream, Object>, Integer>, Map.Entry<Integer, String>> abstractHashedMap1 = new AbstractHashedMap<HashMap<Map.Entry<InputStream, Object>, Integer>, Map.Entry<Integer, String>>(507, 1406.0562F);
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      
      boolean boolean0 = abstractHashedMap1.equals(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      AbstractHashedMap<FilterInputStream, String> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, String>(44, 0.75F);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 1);
      assertNotNull(pushbackInputStream0);
      
      String string0 = abstractHashedMap0.putIfAbsent(pushbackInputStream0, "^u@R,BBc61EL6(hN");
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(1, abstractHashedMap0.size());
      assertNull(string0);
      
      AbstractHashedMap<String, Integer> abstractHashedMap1 = new AbstractHashedMap<String, Integer>(44, (-1), 18);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertNotNull(abstractHashedMap1);
      
      boolean boolean0 = abstractHashedMap1.equals(abstractHashedMap0);
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(1, abstractHashedMap0.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>(44, (-1), 18);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.EntrySetIterator<String, Integer> abstractHashedMap_EntrySetIterator0 = new AbstractHashedMap.EntrySetIterator<String, Integer>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertFalse(abstractHashedMap_EntrySetIterator0.hasNext());
      assertNotNull(abstractHashedMap_EntrySetIterator0);
      
      String string0 = abstractHashedMap_EntrySetIterator0.toString();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertFalse(abstractHashedMap_EntrySetIterator0.hasNext());
      assertNotNull(string0);
      assertEquals("Iterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      AbstractHashedMap<InputStream, Object> abstractHashedMap0 = new AbstractHashedMap<InputStream, Object>(880, 0.0F, 880);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.HashMapIterator<InputStream, Object> abstractHashedMap_HashMapIterator0 = new AbstractHashedMap.HashMapIterator<InputStream, Object>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertFalse(abstractHashedMap_HashMapIterator0.hasNext());
      assertNotNull(abstractHashedMap_HashMapIterator0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap_HashMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      
      AbstractHashedMap<FilterInputStream, String> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, String>(44, 0.75F);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      abstractHashedMap0.addMapping(44, 698, pushbackInputStream0, "^j");
      assertEquals(1, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      
      Iterator<FilterInputStream> iterator0 = abstractHashedMap0.createKeySetIterator();
      assertEquals(1, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      AbstractHashedMap<InputStream, InputStream> abstractHashedMap0 = new AbstractHashedMap<InputStream, InputStream>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      Set<InputStream> set0 = abstractHashedMap0.keySet();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      AbstractHashedMap<Object, AbstractHashedMap<InputStream, Integer>> abstractHashedMap0 = new AbstractHashedMap<Object, AbstractHashedMap<InputStream, Integer>>(682, 1005.33F, 3893);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.EntrySet<Object, String> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<Object, String>((AbstractHashedMap<Object, String>) null);
      assertNotNull(abstractHashedMap_EntrySet0);
      
      boolean boolean0 = abstractHashedMap_EntrySet0.remove(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      AbstractHashedMap<String, InputStream> abstractHashedMap0 = new AbstractHashedMap<String, InputStream>(3902, 3902);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.EntrySet<String, InputStream> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, InputStream>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap_EntrySet0.size());
      assertNotNull(abstractHashedMap_EntrySet0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 3902);
      assertNotNull(pushbackInputStream0);
      
      AbstractMap.SimpleEntry<FilterInputStream, FilterInputStream> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<FilterInputStream, FilterInputStream>(pushbackInputStream0, pushbackInputStream0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<FilterInputStream, FilterInputStream> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<FilterInputStream, FilterInputStream>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      boolean boolean0 = abstractHashedMap_EntrySet0.remove(abstractMap_SimpleEntry1);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap_EntrySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      AbstractHashedMap<Object, AbstractMap.SimpleEntry<Object, String>> abstractHashedMap0 = new AbstractHashedMap<Object, AbstractMap.SimpleEntry<Object, String>>(682);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap<Object, AbstractHashedMap<InputStream, Integer>> abstractHashedMap1 = new AbstractHashedMap<Object, AbstractHashedMap<InputStream, Integer>>(682, 1005.33F, 3893);
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      
      AbstractHashedMap.EntrySet<Object, AbstractHashedMap<InputStream, Integer>> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<Object, AbstractHashedMap<InputStream, Integer>>(abstractHashedMap1);
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap_EntrySet0.size());
      assertNotNull(abstractHashedMap_EntrySet0);
      
      boolean boolean0 = abstractHashedMap_EntrySet0.contains(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap_EntrySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<String, Object>, Object> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<String, Object>, Object>(163);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.HashMapIterator<AbstractMap.SimpleEntry<String, Object>, Object> abstractHashedMap_HashMapIterator0 = new AbstractHashedMap.HashMapIterator<AbstractMap.SimpleEntry<String, Object>, Object>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertFalse(abstractHashedMap_HashMapIterator0.hasNext());
      assertNotNull(abstractHashedMap_HashMapIterator0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap_HashMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<FilterInputStream, Object>, Map.Entry<FilterInputStream, FilterInputStream>> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<FilterInputStream, Object>, Map.Entry<FilterInputStream, FilterInputStream>>(2497, 929);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.HashMapIterator<AbstractHashedMap<FilterInputStream, Object>, Map.Entry<FilterInputStream, FilterInputStream>> abstractHashedMap_HashMapIterator0 = new AbstractHashedMap.HashMapIterator<AbstractHashedMap<FilterInputStream, Object>, Map.Entry<FilterInputStream, FilterInputStream>>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertFalse(abstractHashedMap_HashMapIterator0.hasNext());
      assertNotNull(abstractHashedMap_HashMapIterator0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap_HashMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      AbstractHashedMap<Object, AbstractMap.SimpleEntry<Object, String>> abstractHashedMap0 = new AbstractHashedMap<Object, AbstractMap.SimpleEntry<Object, String>>(682);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      File file0 = MockFile.createTempFile("6MC", "U,{['U");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals("C:\\Users\\Dell\\AppData\\Local\\Temp\\6MC0U,{['U", file0.toString());
      assertEquals("C:\\Users\\Dell\\AppData\\Local\\Temp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("6MC0U,{['U", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      assertFalse(file0.isDirectory());
      assertEquals(4L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("C:\\Users\\Dell\\AppData\\Local\\Temp\\6MC0U,{['U", file0.toString());
      assertEquals("C:\\Users\\Dell\\AppData\\Local\\Temp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("6MC0U,{['U", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(objectOutputStream0);
      
      abstractHashedMap0.doWriteObject(objectOutputStream0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertFalse(file0.isDirectory());
      assertEquals(4L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("C:\\Users\\Dell\\AppData\\Local\\Temp\\6MC0U,{['U", file0.toString());
      assertEquals("C:\\Users\\Dell\\AppData\\Local\\Temp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("6MC0U,{['U", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      AbstractHashedMap<String, InputStream> abstractHashedMap0 = new AbstractHashedMap<String, InputStream>(0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3282);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BiFunction<InputStream, Object, InputStream> biFunction0 = (BiFunction<InputStream, Object, InputStream>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream1 = (PipedInputStream)abstractHashedMap0.merge("No next() entry in the iteration", pipedInputStream0, biFunction0);
      assertEquals(1, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, pipedInputStream1.available());
      assertNotNull(pipedInputStream1);
      assertSame(pipedInputStream0, pipedInputStream1);
      assertSame(pipedInputStream1, pipedInputStream0);
      
      AbstractHashedMap<Object, InputStream> abstractHashedMap1 = new AbstractHashedMap<Object, InputStream>();
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      
      // Undeclared exception!
      try { 
        abstractHashedMap1.putAll(abstractHashedMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(2, (-532.6866F), 2);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      String string0 = abstractHashedMap0.put("!-| pa0Ag*+jsWo", "");
      assertEquals(1, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      assertNull(string0);
      
      abstractHashedMap0.addMapping(0, 2, "", "");
      assertEquals(2, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      
      AbstractHashedMap<Object, Object> abstractHashedMap1 = new AbstractHashedMap<Object, Object>(abstractHashedMap0);
      assertEquals(2, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      assertFalse(abstractHashedMap1.isEmpty());
      assertEquals(2, abstractHashedMap1.size());
      assertNotNull(abstractHashedMap1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<Integer, Integer>, Object> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<Integer, Integer>, Object>(1, 1, 0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      abstractHashedMap0.checkCapacity();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<Object, Object>, AbstractHashedMap<String, String>> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<Object, Object>, AbstractHashedMap<String, String>>(16, 16, 0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap<String, String> abstractHashedMap1 = new AbstractHashedMap<String, String>(24, 16, 0);
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      
      AbstractHashedMap.HashEntry<AbstractMap.SimpleEntry<Object, Object>, AbstractHashedMap<String, String>> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<AbstractMap.SimpleEntry<Object, Object>, AbstractHashedMap<String, String>>((AbstractHashedMap.HashEntry<AbstractMap.SimpleEntry<Object, Object>, AbstractHashedMap<String, String>>) null, 24, (Object) null, abstractHashedMap1);
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap_HashEntry0);
      
      abstractHashedMap0.removeEntry(abstractHashedMap_HashEntry0, 0, abstractHashedMap_HashEntry0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<Integer, Object>, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<Integer, Object>, FilterInputStream>(1645);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      AbstractMap.SimpleImmutableEntry<InputStream, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<InputStream, Object>((InputStream) null, abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractHashedMap<Map.Entry<InputStream, Object>, Integer> abstractHashedMap1 = new AbstractHashedMap<Map.Entry<InputStream, Object>, Integer>(1552, 1552);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertNotNull(abstractHashedMap1);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1645);
      assertNotNull(pushbackInputStream0);
      
      AbstractMap.SimpleImmutableEntry<FilterInputStream, FilterInputStream> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<FilterInputStream, FilterInputStream>(pushbackInputStream0, pushbackInputStream0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      boolean boolean0 = abstractHashedMap1.isEqualValue(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<String, InputStream>, Object> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<String, InputStream>, Object>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      boolean boolean0 = abstractHashedMap0.isEqualKey("^+C}z)sZ{^5UPTI&i-", (Object) null);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      AbstractHashedMap<String, AbstractMap.SimpleEntry<InputStream, Integer>> abstractHashedMap0 = new AbstractHashedMap<String, AbstractMap.SimpleEntry<InputStream, Integer>>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.isEqualKey((Object) null, "No next() entry in the iteration");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      AbstractHashedMap<Object, String> abstractHashedMap0 = new AbstractHashedMap<Object, String>(0, 0, 1158);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      Iterator<Map.Entry<Object, String>> iterator0 = (Iterator<Map.Entry<Object, String>>)abstractHashedMap0.createEntrySetIterator();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(iterator0);
      
      AbstractHashedMap<String, Integer> abstractHashedMap1 = new AbstractHashedMap<String, Integer>(1158, 0.0F, 1574);
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      
      boolean boolean0 = abstractHashedMap1.containsValue(iterator0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      AbstractHashedMap<String, Object> abstractHashedMap0 = new AbstractHashedMap<String, Object>(1967, 940.48535F);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      boolean boolean0 = abstractHashedMap0.containsValue((Object) null);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractMap.SimpleImmutableEntry<InputStream, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractMap.SimpleImmutableEntry<InputStream, Integer>>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      boolean boolean0 = abstractHashedMap0.isEmpty();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      AbstractHashedMap<Object, Object> abstractHashedMap0 = null;
      try {
        abstractHashedMap0 = new AbstractHashedMap<Object, Object>(25, (-1648.3976F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      AbstractHashedMap<InputStream, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<InputStream, FilterInputStream>(64, 64, 1645);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      abstractHashedMap0.put((InputStream) null, bufferedInputStream0);
      abstractHashedMap0.toString();
      assertFalse(abstractHashedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      AbstractHashedMap<InputStream, String> abstractHashedMap0 = new AbstractHashedMap<InputStream, String>(821, 821, 31);
      AbstractHashedMap.KeySet<InputStream> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<InputStream>(abstractHashedMap0);
      abstractHashedMap_KeySet0.clear();
      assertEquals(0, abstractHashedMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      AbstractHashedMap<Object, AbstractMap.SimpleImmutableEntry<InputStream, Object>> abstractHashedMap0 = new AbstractHashedMap<Object, AbstractMap.SimpleImmutableEntry<InputStream, Object>>(70, 70);
      AbstractHashedMap<String, Object> abstractHashedMap1 = new AbstractHashedMap<String, Object>(9, 1645);
      AbstractHashedMap.KeySet<String> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<String>(abstractHashedMap1);
      boolean boolean0 = abstractHashedMap_KeySet0.remove(abstractHashedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleImmutableEntry<FilterInputStream, Integer>, Object> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleImmutableEntry<FilterInputStream, Integer>, Object>(0);
      AbstractHashedMap.KeySet<AbstractMap.SimpleImmutableEntry<FilterInputStream, Integer>> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<AbstractMap.SimpleImmutableEntry<FilterInputStream, Integer>>(abstractHashedMap0);
      boolean boolean0 = abstractHashedMap_KeySet0.contains(abstractHashedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      AbstractHashedMap.HashEntry<AbstractMap.SimpleImmutableEntry<Object, String>, String> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<AbstractMap.SimpleImmutableEntry<Object, String>, String>((AbstractHashedMap.HashEntry<AbstractMap.SimpleImmutableEntry<Object, String>, String>) null, 439, (Object) null, "");
      String string0 = abstractHashedMap_HashEntry0.toString();
      assertEquals("null=", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      AbstractHashedMap<String, InputStream> abstractHashedMap0 = new AbstractHashedMap<String, InputStream>(0);
      AbstractHashedMap.EntrySet<String, InputStream> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, InputStream>(abstractHashedMap0);
      abstractHashedMap_EntrySet0.clear();
      assertEquals(0, abstractHashedMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      AbstractHashedMap<InputStream, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<InputStream, FilterInputStream>(0);
      AbstractHashedMap.EntrySet<InputStream, FilterInputStream> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<InputStream, FilterInputStream>(abstractHashedMap0);
      int int0 = abstractHashedMap_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, String> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, String>(0);
      AbstractHashedMap<InputStream, String> abstractHashedMap1 = new AbstractHashedMap<InputStream, String>(abstractHashedMap0);
      AbstractHashedMap.KeySetIterator<InputStream> abstractHashedMap_KeySetIterator0 = new AbstractHashedMap.KeySetIterator<InputStream>(abstractHashedMap1);
      // Undeclared exception!
      try { 
        abstractHashedMap_KeySetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<Object, String>, String> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<Object, String>, String>(1487, 3159, 1487);
      // Undeclared exception!
      try { 
        abstractHashedMap0.entryKey((AbstractHashedMap.HashEntry<AbstractMap.SimpleEntry<Object, String>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      AbstractHashedMap<String, AbstractMap.SimpleImmutableEntry<String, String>> abstractHashedMap0 = new AbstractHashedMap<String, AbstractMap.SimpleImmutableEntry<String, String>>(26);
      // Undeclared exception!
      try { 
        abstractHashedMap0.entryValue((AbstractHashedMap.HashEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      AbstractHashedMap<String, InputStream> abstractHashedMap0 = new AbstractHashedMap<String, InputStream>(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3282);
      BiFunction<InputStream, Object, InputStream> biFunction0 = (BiFunction<InputStream, Object, InputStream>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      abstractHashedMap0.merge("No next() entry in the iteration", pipedInputStream0, biFunction0);
      AbstractHashedMap<Object, InputStream> abstractHashedMap1 = new AbstractHashedMap<Object, InputStream>(abstractHashedMap0);
      abstractHashedMap1.putAll(abstractHashedMap0);
      assertEquals(1, abstractHashedMap0.size());
      assertEquals(1, abstractHashedMap1.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0, 318.5F);
      // Undeclared exception!
      try { 
        abstractHashedMap0.entryNext((AbstractHashedMap.HashEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      AbstractHashedMap<Object, Map.Entry<InputStream, Object>> abstractHashedMap0 = new AbstractHashedMap<Object, Map.Entry<InputStream, Object>>(30, 3282);
      // Undeclared exception!
      try { 
        abstractHashedMap0.clone();
        fail("Expecting exception: InternalError");
      
      } catch(InternalError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, InputStream> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, InputStream>(929);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      abstractHashedMap0.put(pushbackInputStream0, pushbackInputStream0);
      AbstractHashedMap<Object, Object> abstractHashedMap1 = new AbstractHashedMap<Object, Object>(abstractHashedMap0);
      abstractHashedMap1.remove((Object) pushbackInputStream0);
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>(0);
      AbstractHashedMap.ValuesIterator<FilterInputStream> abstractHashedMap_ValuesIterator0 = new AbstractHashedMap.ValuesIterator<FilterInputStream>(abstractHashedMap0);
      // Undeclared exception!
      try { 
        abstractHashedMap_ValuesIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      AbstractHashedMap<String, InputStream> abstractHashedMap0 = new AbstractHashedMap<String, InputStream>(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3282);
      BiFunction<InputStream, Object, InputStream> biFunction0 = (BiFunction<InputStream, Object, InputStream>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      abstractHashedMap0.merge("No next() entry in the iteration", pipedInputStream0, biFunction0);
      Iterator<InputStream> iterator0 = abstractHashedMap0.createValuesIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      AbstractHashedMap<Integer, Object> abstractHashedMap0 = new AbstractHashedMap<Integer, Object>(22, 22, (-708));
      AbstractHashedMap.HashMapIterator<Integer, Object> abstractHashedMap_HashMapIterator0 = new AbstractHashedMap.HashMapIterator<Integer, Object>(abstractHashedMap0);
      // Undeclared exception!
      try { 
        abstractHashedMap_HashMapIterator0.setValue(pipedInputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      AbstractHashedMap<Object, String> abstractHashedMap0 = new AbstractHashedMap<Object, String>(0, 1194.2075F, 0);
      AbstractHashedMap.Values<String> abstractHashedMap_Values0 = new AbstractHashedMap.Values<String>(abstractHashedMap0);
      boolean boolean0 = abstractHashedMap_Values0.contains(abstractHashedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      AbstractHashedMap<String, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<String, FilterInputStream>(235, 2727.0F, 235);
      AbstractHashedMap<Object, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Object, FilterInputStream>(abstractHashedMap0);
      AbstractHashedMap.Values<FilterInputStream> abstractHashedMap_Values0 = new AbstractHashedMap.Values<FilterInputStream>(abstractHashedMap1);
      abstractHashedMap_Values0.iterator();
      assertEquals(0, abstractHashedMap_Values0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      AbstractHashedMap<Integer, Object> abstractHashedMap0 = new AbstractHashedMap<Integer, Object>(2053, 0, (-577));
      AbstractHashedMap.Values<Object> abstractHashedMap_Values0 = new AbstractHashedMap.Values<Object>(abstractHashedMap0);
      abstractHashedMap_Values0.clear();
      assertEquals(0, abstractHashedMap_Values0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleEntry<Object, Object>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleEntry<Object, Object>, Integer>();
      AbstractHashedMap.KeySet<AbstractMap.SimpleEntry<Object, Object>> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<AbstractMap.SimpleEntry<Object, Object>>(abstractHashedMap0);
      HashMap<InputStream, String> hashMap0 = new HashMap<InputStream, String>();
      AbstractHashedMap<InputStream, Object> abstractHashedMap1 = new AbstractHashedMap<InputStream, Object>(hashMap0);
      Collection<Object> collection0 = abstractHashedMap1.values();
      assertNotNull(collection0);
      
      abstractHashedMap_KeySet0.removeAll(collection0);
      assertEquals(0, abstractHashedMap1.size());
  }
}
