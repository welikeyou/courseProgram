/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:07:41 GMT 2019
 */

package org.apache.commons.collections4.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.apache.commons.collections4.set.MapBackedSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MapBackedSet_ESTest extends MapBackedSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      String[] stringArray0 = new String[8];
      String[] stringArray1 = mapBackedSet0.toArray(stringArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      Object object0 = new Object();
      hashMap0.put(object0, object0);
      Object[] objectArray0 = mapBackedSet0.toArray();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      Object object0 = new Object();
      hashMap0.put(object0, object0);
      int int0 = mapBackedSet0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap0);
      hashMap0.put("org.apache.commons.collections4.set.MapBackedSet", mapBackedSet0);
      MapBackedSet<Object, String> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap0);
      boolean boolean0 = mapBackedSet1.removeAll(mapBackedSet0);
      assertTrue(mapBackedSet1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = hashMap0.put(integer0, integer0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>(hashMap1);
      MapBackedSet<Object, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap2);
      boolean boolean0 = mapBackedSet0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBackedSet<String, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap0, "");
      // Undeclared exception!
      try { 
        mapBackedSet0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      hashMap0.put(object0, object0);
      MapBackedSet<Object, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap0);
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        mapBackedSet0.toArray(stringArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBackedSet<String, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Integer>) hashMap0);
      // Undeclared exception!
      try { 
        mapBackedSet0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      // Undeclared exception!
      try { 
        mapBackedSet0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapBackedSet.mapBackedSet((Map<String, ? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The map must not be null
         //
         verifyException("org.apache.commons.collections4.set.MapBackedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(hashMap0);
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap1, (Object) hashMap0);
      // Undeclared exception!
      try { 
        mapBackedSet0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Object>) hashMap0);
      // Undeclared exception!
      try { 
        mapBackedSet0.addAll((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.MapBackedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      MapBackedSet<Integer, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Object>) hashMap0, (Object) hashMap0);
      boolean boolean0 = mapBackedSet0.contains(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = hashMap0.put(integer0, integer0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MapBackedSet<String, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Integer>) hashMap1, integer0);
      boolean boolean0 = mapBackedSet0.contains(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Object>) hashMap0, (Object) hashMap0);
      Iterator<Integer> iterator0 = mapBackedSet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap0, (Object) ":=c~*9W|_};PMVDc");
      int int0 = mapBackedSet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, (Object) null);
      MapBackedSet<Object, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap0);
      boolean boolean0 = mapBackedSet0.remove(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer(0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(hashMap0);
      MapBackedSet<Object, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap1, "");
      boolean boolean0 = mapBackedSet0.remove(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap0);
      Integer integer0 = new Integer(3932);
      hashMap0.put("org.apache.commons.collections4.set.MapBackedSet", integer0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      MapBackedSet<String, String> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap1);
      boolean boolean0 = mapBackedSet1.addAll(mapBackedSet0);
      assertFalse(mapBackedSet1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      MapBackedSet<Integer, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Object>) hashMap0, (Object) hashMap0);
      MapBackedSet<Integer, String> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Integer, ? super String>) hashMap0, ":=c~*9W|_};PMVDc");
      boolean boolean0 = mapBackedSet0.addAll(mapBackedSet1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      MapBackedSet<Object, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap0);
      boolean boolean0 = mapBackedSet0.add(hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      MapBackedSet<Integer, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super String>) hashMap0, ":=c~*9W|_};PMVDc");
      boolean boolean0 = mapBackedSet0.add(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap0);
      Integer integer0 = new Integer(0);
      hashMap0.put("[5$", integer0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      MapBackedSet<Object, Integer> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap1, integer0);
      boolean boolean0 = mapBackedSet1.containsAll(mapBackedSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap0);
      hashMap0.put("", "");
      MapBackedSet<String, String> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap0, "");
      boolean boolean0 = mapBackedSet0.retainAll(mapBackedSet1);
      assertFalse(mapBackedSet0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer(0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(hashMap0);
      hashMap0.put("", "");
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap1, (Object) integer0);
      MapBackedSet<String, String> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap0, "");
      boolean boolean0 = mapBackedSet1.retainAll(mapBackedSet0);
      assertEquals(0, mapBackedSet1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(hashMap0);
      MapBackedSet<Object, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap1, "");
      boolean boolean0 = mapBackedSet0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap0);
      assertTrue(mapBackedSet0.isEmpty());
      
      hashMap0.put("", "");
      boolean boolean0 = mapBackedSet0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapBackedSet.mapBackedSet((Map<Object, ? super String>) null, "[5$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The map must not be null
         //
         verifyException("org.apache.commons.collections4.set.MapBackedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBackedSet<String, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Integer>) hashMap0);
      Object[] objectArray0 = mapBackedSet0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer(0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(hashMap0);
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap1, (Object) integer0);
      mapBackedSet0.clear();
      assertEquals(0, mapBackedSet0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBackedSet<String, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Integer, ? super Object>) hashMap1, (Object) hashMap0);
      boolean boolean0 = mapBackedSet1.equals(mapBackedSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super String>) hashMap0);
      String[] stringArray0 = new String[0];
      String[] stringArray1 = mapBackedSet0.toArray(stringArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super String>) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap1);
      boolean boolean0 = mapBackedSet0.containsAll(mapBackedSet1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(hashMap0);
      MapBackedSet<Object, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap1, "");
      mapBackedSet0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super String>) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap1);
      boolean boolean0 = mapBackedSet1.removeAll(mapBackedSet0);
      assertFalse(boolean0);
  }
}
