/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:25:27 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Array;
import java.util.Enumeration;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.BiFunction;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.AbstractLinkedMap;
import org.apache.commons.collections4.map.LRUMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LRUMap_ESTest extends LRUMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 788;
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(788);
      abstractHashedMap0.put("a|8=O~cer<,i.P", "a|8=O~cer<,i.P");
      LRUMap<String, String> lRUMap0 = new LRUMap<String, String>(abstractHashedMap0);
      boolean boolean0 = true;
      LRUMap<Object, String> lRUMap1 = new LRUMap<Object, String>(lRUMap0, true);
      lRUMap0.get((Object) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      lRUMap1.remove(abstractHashedMap0);
      LRUMap<InputStream, Object> lRUMap2 = null;
      try {
        lRUMap2 = new LRUMap<InputStream, Object>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, Object>((-427), 2092.5F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 955;
      int int1 = 10;
      LRUMap<Comparable<Object>, Integer> lRUMap0 = new LRUMap<Comparable<Object>, Integer>(955, 10, 955, true);
      LRUMap<Integer, Object> lRUMap1 = new LRUMap<Integer, Object>(955, 955);
      lRUMap1.getEntry(lRUMap0);
      AbstractHashedMap.HashEntry<Integer, Object> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<Integer, Object>((AbstractHashedMap.HashEntry<Integer, Object>) null, 12, (Object) null, "");
      lRUMap1.clear();
      AbstractLinkedMap.LinkEntry<Integer, Object> abstractLinkedMap_LinkEntry0 = new AbstractLinkedMap.LinkEntry<Integer, Object>(abstractHashedMap_HashEntry0, 10, lRUMap1, "");
      // Undeclared exception!
      try { 
        lRUMap1.moveToMRU(abstractLinkedMap_LinkEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Entry.before is null. Please check that your keys are immutable, and that you have used synchronization properly. If so, then please report this to dev@commons.apache.org as a bug.
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LRUMap<Integer, Comparable<Object>> lRUMap0 = new LRUMap<Integer, Comparable<Object>>(1746, 16, 1746, false);
      AbstractLinkedMap.LinkEntry<Integer, Comparable<Object>> abstractLinkedMap_LinkEntry0 = lRUMap0.header;
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        lRUMap0.updateEntry(abstractLinkedMap_LinkEntry0, comparable0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't move header to MRU (please report this to dev@commons.apache.org)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      LRUMap<Object, Integer> lRUMap0 = new LRUMap<Object, Integer>(9, 9, 9);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      lRUMap0.getEntry(sequenceInputStream0);
      AbstractLinkedMap.LinkEntry<Object, Integer> abstractLinkedMap_LinkEntry0 = new AbstractLinkedMap.LinkEntry<Object, Integer>((AbstractHashedMap.HashEntry<Object, Integer>) null, 0, (Object) null, integer0);
      sequenceInputStream0.skip(9);
      lRUMap0.clear();
      // Undeclared exception!
      try { 
        lRUMap0.reuseMapping(abstractLinkedMap_LinkEntry0, 14, (-3329), sequenceInputStream0, integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Entry.next=null, data[removeIndex]=null previous=null key=java.io.SequenceInputStream@1daa4664 value=0 size=0 maxSize=9 Please check that your keys are immutable, and that you have used synchronization properly. If so, then please report this to dev@commons.apache.org as a bug.
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>(4118, 94);
      lRUMap0.putIfAbsent("", "");
      LRUMap<Object, Object> lRUMap1 = lRUMap0.clone();
      lRUMap1.ensureCapacity(4118);
      lRUMap1.values();
      lRUMap0.putAll(lRUMap1);
      LRUMap<Integer, DataInputStream> lRUMap2 = new LRUMap<Integer, DataInputStream>();
      lRUMap2.equals(lRUMap1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LRUMap<DataInputStream, InputStream> lRUMap3 = new LRUMap<DataInputStream, InputStream>(94);
      LRUMap<InputStream, InputStream> lRUMap4 = new LRUMap<InputStream, InputStream>(9, false);
      LRUMap<InputStream, InputStream> lRUMap5 = lRUMap4.clone();
      Integer integer0 = new Integer(1708);
      lRUMap5.get((Object) integer0);
      LRUMap<LRUMap<String, Object>, Integer> lRUMap6 = null;
      try {
        lRUMap6 = new LRUMap<LRUMap<String, Object>, Integer>(2867, 4118);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap initial size must not be greather than max size
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      int int1 = 9;
      LRUMap<Object, Integer> lRUMap0 = new LRUMap<Object, Integer>(9, 9, 9);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      AbstractLinkedMap.LinkEntry<Object, Integer> abstractLinkedMap_LinkEntry0 = lRUMap0.header;
      Integer integer1 = new Integer(9);
      // Undeclared exception!
      try { 
        lRUMap0.updateEntry(abstractLinkedMap_LinkEntry0, integer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't move header to MRU (please report this to dev@commons.apache.org)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>(4118, 100);
      lRUMap0.values();
      lRUMap0.putIfAbsent("", "");
      LRUMap<Object, Object> lRUMap1 = lRUMap0.clone();
      lRUMap1.ensureCapacity(4118);
      lRUMap1.values();
      LRUMap<Integer, DataInputStream> lRUMap2 = new LRUMap<Integer, DataInputStream>(4);
      lRUMap2.equals(lRUMap1);
      assertTrue(lRUMap1.equals((Object)lRUMap0));
      assertEquals(4, lRUMap2.maxSize());
      assertFalse(lRUMap2.isFull());
      
      LRUMap<DataInputStream, InputStream> lRUMap3 = new LRUMap<DataInputStream, InputStream>(100);
      boolean boolean0 = lRUMap3.removeLRU((AbstractLinkedMap.LinkEntry<DataInputStream, InputStream>) null);
      assertFalse(lRUMap3.isScanUntilRemovable());
      assertTrue(boolean0);
      
      LRUMap<Comparable<InputStream>, DataInputStream> lRUMap4 = new LRUMap<Comparable<InputStream>, DataInputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        lRUMap4.updateEntry((AbstractHashedMap.HashEntry<Comparable<InputStream>, DataInputStream>) null, dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LRUMap<String, DataInputStream> lRUMap0 = new LRUMap<String, DataInputStream>();
      LRUMap<Object, Object> lRUMap1 = new LRUMap<Object, Object>(125);
      lRUMap1.isScanUntilRemovable();
      LRUMap<Object, String> lRUMap2 = new LRUMap<Object, String>();
      lRUMap0.threshold = 125;
      lRUMap2.put(lRUMap0, "");
      lRUMap2.replace((Object) "p", "p");
      lRUMap2.get((Object) lRUMap0, false);
      LRUMap<String, InputStream> lRUMap3 = new LRUMap<String, InputStream>(3845, 125);
      lRUMap3.threshold = 3845;
      lRUMap0.isEmpty();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LRUMap<String, String> lRUMap4 = new LRUMap<String, String>(3845, false);
      LRUMap<DataInputStream, Object> lRUMap5 = new LRUMap<DataInputStream, Object>(3845, true);
      lRUMap5.clone();
      LRUMap<LRUMap<InputStream, Object>, DataInputStream> lRUMap6 = new LRUMap<LRUMap<InputStream, Object>, DataInputStream>(3845, false);
      lRUMap6.maxSize();
      LRUMap<String, Object> lRUMap7 = new LRUMap<String, Object>(125, 0, 125);
      // Undeclared exception!
      try { 
        lRUMap3.moveToMRU((AbstractLinkedMap.LinkEntry<String, InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LRUMap<LRUMap<Object, Integer>, LRUMap<String, Object>> lRUMap0 = new LRUMap<LRUMap<Object, Integer>, LRUMap<String, Object>>(1, 1, true);
      lRUMap0.mapIterator();
      LRUMap<Object, LRUMap<Integer, DataInputStream>> lRUMap1 = new LRUMap<Object, LRUMap<Integer, DataInputStream>>(12, false);
      LRUMap<Integer, String> lRUMap2 = new LRUMap<Integer, String>(12, 1);
      AbstractHashedMap.KeySet<Integer> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Integer>(lRUMap2);
      lRUMap2.keySet = abstractHashedMap_KeySet0;
      Integer integer0 = new Integer(1913);
      lRUMap2.mapIterator();
      lRUMap2.addMapping(12, (-1670), integer0, "Er+k");
      int int0 = 1073741824;
      LRUMap<DataInputStream, String> lRUMap3 = new LRUMap<DataInputStream, String>(1073741824, false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 11;
      Integer integer0 = new Integer(11);
      LRUMap<Object, Integer> lRUMap0 = new LRUMap<Object, Integer>(9, 9, 9);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      lRUMap0.getEntry(sequenceInputStream0);
      AbstractLinkedMap.LinkEntry<Object, Integer> abstractLinkedMap_LinkEntry0 = new AbstractLinkedMap.LinkEntry<Object, Integer>((AbstractHashedMap.HashEntry<Object, Integer>) null, 11, (Object) null, integer0);
      // Undeclared exception!
      try { 
        lRUMap0.reuseMapping(abstractLinkedMap_LinkEntry0, 20, (-3329), sequenceInputStream0, integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Entry.next=null, data[removeIndex]=null previous=null key=java.io.SequenceInputStream@6fd5e1bf value=11 size=0 maxSize=9 Please check that your keys are immutable, and that you have used synchronization properly. If so, then please report this to dev@commons.apache.org as a bug.
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      LRUMap<Object, Integer> lRUMap0 = new LRUMap<Object, Integer>(9, 9, 9);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      lRUMap0.getEntry(sequenceInputStream0);
      AbstractLinkedMap.LinkEntry<Object, Integer> abstractLinkedMap_LinkEntry0 = new AbstractLinkedMap.LinkEntry<Object, Integer>((AbstractHashedMap.HashEntry<Object, Integer>) null, 0, (Object) null, integer0);
      // Undeclared exception!
      try { 
        lRUMap0.reuseMapping(abstractLinkedMap_LinkEntry0, 14, (-3329), sequenceInputStream0, integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Entry.next=null, data[removeIndex]=null previous=null key=java.io.SequenceInputStream@74f90180 value=0 size=0 maxSize=9 Please check that your keys are immutable, and that you have used synchronization properly. If so, then please report this to dev@commons.apache.org as a bug.
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LRUMap<String, Object> lRUMap0 = new LRUMap<String, Object>();
      LRUMap<LRUMap<String, Object>, Object> lRUMap1 = new LRUMap<LRUMap<String, Object>, Object>();
      int int0 = 815;
      int int1 = 1;
      LRUMap<Object, Integer> lRUMap2 = new LRUMap<Object, Integer>(815, 1, 815);
      Integer integer0 = new Integer(311);
      Integer integer1 = new Integer(1639);
      lRUMap2.replace((Object) lRUMap0, integer0, integer1);
      // Undeclared exception!
      try { 
        lRUMap2.moveToMRU((AbstractLinkedMap.LinkEntry<Object, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LRUMap<Integer, Object> lRUMap0 = new LRUMap<Integer, Object>(1073741824);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1073741824;
      LRUMap<InputStream, InputStream> lRUMap0 = new LRUMap<InputStream, InputStream>(2171, 1073741824, 1073741824);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 2288;
      boolean boolean0 = false;
      LRUMap<Integer, Integer> lRUMap0 = new LRUMap<Integer, Integer>(2288, false);
      Integer integer0 = new Integer(2288);
      lRUMap0.replace(integer0, integer0);
      // Undeclared exception!
      try { 
        lRUMap0.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 4;
      LRUMap<String, Object> lRUMap0 = new LRUMap<String, Object>(4, true);
      int int1 = (-681);
      // Undeclared exception!
      try { 
        lRUMap0.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LRUMap<Object, InputStream> lRUMap0 = new LRUMap<Object, InputStream>(1913, 1913, 1913, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      lRUMap0.doWriteObject(objectOutputStream0);
      lRUMap0.isScanUntilRemovable();
      LRUMap<InputStream, Object> lRUMap1 = null;
      try {
        lRUMap1 = new LRUMap<InputStream, Object>(0, 1913, 0.0F, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LRUMap<Integer, Integer> lRUMap0 = new LRUMap<Integer, Integer>(2120, 2120);
      int int0 = 1301;
      lRUMap0.clear();
      AbstractHashedMap.HashEntry<Integer, Integer>[] abstractHashedMap_HashEntryArray0 = (AbstractHashedMap.HashEntry<Integer, Integer>[]) Array.newInstance(AbstractHashedMap.HashEntry.class, 1);
      int int1 = 1207;
      Integer integer0 = new Integer(1207);
      AbstractHashedMap.HashEntry<Integer, Integer> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<Integer, Integer>((AbstractHashedMap.HashEntry<Integer, Integer>) null, 2120, lRUMap0, integer0);
      abstractHashedMap_HashEntryArray0[0] = abstractHashedMap_HashEntry0;
      lRUMap0.data = abstractHashedMap_HashEntryArray0;
      Integer integer1 = new Integer(1301);
      // Undeclared exception!
      try { 
        lRUMap0.addMapping(1301, 2120, integer1, integer1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1301
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 32;
      LRUMap<Object, String> lRUMap0 = new LRUMap<Object, String>(32);
      lRUMap0.getEntry((Object) null);
      String string0 = "";
      AbstractLinkedMap.LinkEntry<Object, String> abstractLinkedMap_LinkEntry0 = new AbstractLinkedMap.LinkEntry<Object, String>((AbstractHashedMap.HashEntry<Object, String>) null, 0, lRUMap0, "");
      AbstractHashedMap.HashEntry<Object, String> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<Object, String>(abstractLinkedMap_LinkEntry0, 0, (Object) null, "");
      // Undeclared exception!
      try { 
        lRUMap0.updateEntry(abstractHashedMap_HashEntry0, (String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.AbstractHashedMap$HashEntry cannot be cast to org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 14;
      LRUMap<Object, String> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, String>(14, 3822, 1658.3F, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap initial size must not be greather than max size
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1073741824;
      LRUMap<Integer, Object> lRUMap0 = new LRUMap<Integer, Object>(1073741824, 1073741824);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = true;
      LRUMap<String, Object> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<String, Object>((-1), 1788, 0.75F, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LRUMap<String, Object> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<String, Object>((Map<? extends String, ?>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LRUMap<Integer, String> lRUMap0 = new LRUMap<Integer, String>(2726, 0, 1912.8F);
      assertFalse(lRUMap0.isFull());
      
      Integer integer0 = new Integer((-462));
      lRUMap0.addMapping(0, (-1), integer0, "");
      assertFalse(lRUMap0.isScanUntilRemovable());
      assertEquals(2726, lRUMap0.maxSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LRUMap<InputStream, InputStream> lRUMap0 = new LRUMap<InputStream, InputStream>();
      lRUMap0.remove("]");
      int int0 = (-1559);
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        lRUMap0.addMapping((-1559), (-1559), (InputStream) null, (InputStream) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1559
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1562;
      boolean boolean0 = false;
      LRUMap<AbstractLinkedMap.LinkEntry<Integer, DataInputStream>, InputStream> lRUMap0 = new LRUMap<AbstractLinkedMap.LinkEntry<Integer, DataInputStream>, InputStream>(1562, 1562, false);
      lRUMap0.checkCapacity();
      int int1 = 1;
      lRUMap0.mapIterator();
      lRUMap0.ensureCapacity(1);
      // Undeclared exception!
      try { 
        lRUMap0.doWriteObject((ObjectOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LRUMap<Integer, Object> lRUMap0 = new LRUMap<Integer, Object>(1346, 788, 1346, false);
      assertFalse(lRUMap0.isScanUntilRemovable());
      assertEquals(1346, lRUMap0.maxSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 123;
      LRUMap<String, DataInputStream> lRUMap0 = new LRUMap<String, DataInputStream>(123, true);
      LRUMap<String, DataInputStream> lRUMap1 = lRUMap0.clone();
      LRUMap<String, InputStream> lRUMap2 = null;
      try {
        lRUMap2 = new LRUMap<String, InputStream>(lRUMap1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 3395;
      LRUMap<Integer, Integer> lRUMap0 = new LRUMap<Integer, Integer>(3395, 3395, false);
      LRUMap<Integer, Integer> lRUMap1 = lRUMap0.clone();
      lRUMap1.isFull();
      LRUMap<DataInputStream, String> lRUMap2 = new LRUMap<DataInputStream, String>(3395);
      lRUMap2.isScanUntilRemovable();
      LRUMap<String, LRUMap<Object, Integer>> lRUMap3 = new LRUMap<String, LRUMap<Object, Integer>>();
      int int1 = 0;
      String string0 = "";
      LRUMap<Object, Integer> lRUMap4 = null;
      try {
        lRUMap4 = new LRUMap<Object, Integer>(lRUMap0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LRUMap<DataInputStream, LRUMap<InputStream, String>> lRUMap0 = new LRUMap<DataInputStream, LRUMap<InputStream, String>>(668, 668);
      LRUMap<String, InputStream> lRUMap1 = new LRUMap<String, InputStream>(16, 668);
      lRUMap1.mapIterator();
      lRUMap1.get((Object) lRUMap0, false);
      LRUMap<Integer, DataInputStream> lRUMap2 = new LRUMap<Integer, DataInputStream>(668, false);
      LRUMap<Object, LRUMap<String, Integer>> lRUMap3 = new LRUMap<Object, LRUMap<String, Integer>>();
      int int0 = (-2671);
      int int1 = (-3561);
      String string0 = "org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator";
      LRUMap<String, Integer> lRUMap4 = null;
      try {
        lRUMap4 = new LRUMap<String, Integer>((-2671), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LRUMap<Object, AbstractLinkedMap.LinkEntry<InputStream, InputStream>> lRUMap0 = new LRUMap<Object, AbstractLinkedMap.LinkEntry<InputStream, InputStream>>(1972);
      lRUMap0.threshold = 1972;
      int int0 = 100;
      LRUMap<LRUMap<String, Integer>, DataInputStream> lRUMap1 = new LRUMap<LRUMap<String, Integer>, DataInputStream>(100);
      lRUMap1.get((Object) null);
      LRUMap<String, LRUMap<Integer, Object>> lRUMap2 = new LRUMap<String, LRUMap<Integer, Object>>(2, 0, 264.0F);
      lRUMap2.removeLRU((AbstractLinkedMap.LinkEntry<String, LRUMap<Integer, Object>>) null);
      LRUMap<Integer, AbstractLinkedMap.LinkEntry<InputStream, String>> lRUMap3 = null;
      try {
        lRUMap3 = new LRUMap<Integer, AbstractLinkedMap.LinkEntry<InputStream, String>>(0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LRUMap<InputStream, InputStream> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<InputStream, InputStream>((Map<? extends InputStream, ? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LRUMap<String, InputStream> lRUMap0 = new LRUMap<String, InputStream>();
      lRUMap0.isScanUntilRemovable();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, (-1091));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LRUMap<InputStream, LRUMap<String, String>> lRUMap0 = new LRUMap<InputStream, LRUMap<String, String>>(867, 867, false);
      LRUMap<Object, LRUMap<String, Object>> lRUMap1 = new LRUMap<Object, LRUMap<String, Object>>(867, true);
      int int0 = lRUMap1.maxSize();
      assertEquals(867, int0);
      assertTrue(lRUMap1.isScanUntilRemovable());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LRUMap<Integer, InputStream> lRUMap0 = new LRUMap<Integer, InputStream>(739, 739, false);
      LRUMap<Integer, InputStream> lRUMap1 = lRUMap0.clone();
      boolean boolean0 = lRUMap1.removeLRU((AbstractLinkedMap.LinkEntry<Integer, InputStream>) null);
      assertEquals(739, lRUMap1.maxSize());
      assertFalse(lRUMap1.isScanUntilRemovable());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LRUMap<String, String> lRUMap0 = new LRUMap<String, String>();
      lRUMap0.putIfAbsent("", "");
      lRUMap0.values = null;
      LRUMap<Object, Object> lRUMap1 = new LRUMap<Object, Object>(lRUMap0, true);
      LRUMap<AbstractLinkedMap.LinkEntry<DataInputStream, InputStream>, InputStream> lRUMap2 = null;
      try {
        lRUMap2 = new LRUMap<AbstractLinkedMap.LinkEntry<DataInputStream, InputStream>, InputStream>(299, (-717));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 2842;
      boolean boolean0 = true;
      LRUMap<Integer, String> lRUMap0 = new LRUMap<Integer, String>(2842, true);
      LRUMap<Object, String> lRUMap1 = null;
      try {
        lRUMap1 = new LRUMap<Object, String>(lRUMap0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LRUMap<InputStream, Object> lRUMap0 = new LRUMap<InputStream, Object>(44, false);
      LRUMap<InputStream, Object> lRUMap1 = lRUMap0.clone();
      LRUMap<InputStream, Object> lRUMap2 = null;
      try {
        lRUMap2 = new LRUMap<InputStream, Object>(lRUMap1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LRUMap<String, DataInputStream> lRUMap0 = new LRUMap<String, DataInputStream>(16, 16);
      LRUMap<LRUMap<InputStream, String>, Integer> lRUMap1 = new LRUMap<LRUMap<InputStream, String>, Integer>(16);
      LRUMap<InputStream, String> lRUMap2 = new LRUMap<InputStream, String>(100, 100);
      Integer integer0 = new Integer(100);
      // Undeclared exception!
      try { 
        lRUMap1.addMapping(16, 16, lRUMap2, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, Object>(2438, 0, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = (-2024);
      LRUMap<Object, Integer> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, Integer>((-2024), (-2024), (-985.2F), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 12;
      float float0 = 0.0F;
      boolean boolean0 = false;
      LRUMap<Object, Integer> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, Integer>(12, 0.0F, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AbstractHashedMap<InputStream, DataInputStream> abstractHashedMap0 = new AbstractHashedMap<InputStream, DataInputStream>();
      LRUMap<InputStream, DataInputStream> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<InputStream, DataInputStream>(abstractHashedMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>();
      lRUMap0.init();
      int int0 = 0;
      LRUMap<AbstractLinkedMap.LinkEntry<Integer, Integer>, AbstractLinkedMap.LinkEntry<String, Integer>> lRUMap1 = null;
      try {
        lRUMap1 = new LRUMap<AbstractLinkedMap.LinkEntry<Integer, Integer>, AbstractLinkedMap.LinkEntry<String, Integer>>(0, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LRUMap<DataInputStream, String> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<DataInputStream, String>(0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      LRUMap<InputStream, DataInputStream> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<InputStream, DataInputStream>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      LRUMap<AbstractLinkedMap.LinkEntry<String, Object>, Integer> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<AbstractLinkedMap.LinkEntry<String, Object>, Integer>(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LRUMap<LRUMap<Integer, Object>, Integer> lRUMap0 = new LRUMap<LRUMap<Integer, Object>, Integer>(698, 698, true);
      MockFile mockFile0 = new MockFile("9W|XkC i0yItgkT");
      File file0 = MockFile.createTempFile(";HKp", ";HKp", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      lRUMap0.doWriteObject(objectOutputStream0);
      LRUMap<Object, Object> lRUMap1 = null;
      try {
        lRUMap1 = new LRUMap<Object, Object>(14, 698);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap initial size must not be greather than max size
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LRUMap<DataInputStream, String> lRUMap0 = new LRUMap<DataInputStream, String>();
      LRUMap<Object, Integer> lRUMap1 = new LRUMap<Object, Integer>(3696, false);
      assertEquals(3696, lRUMap1.maxSize());
      assertFalse(lRUMap1.isScanUntilRemovable());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AbstractHashedMap<Integer, DataInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, DataInputStream>(0);
      LRUMap<Integer, DataInputStream> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Integer, DataInputStream>(abstractHashedMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LRUMap<DataInputStream, AbstractLinkedMap.LinkEntry<Object, InputStream>> lRUMap0 = new LRUMap<DataInputStream, AbstractLinkedMap.LinkEntry<Object, InputStream>>(1587, 1, 1587);
      assertEquals(1587, lRUMap0.maxSize());
      assertFalse(lRUMap0.isScanUntilRemovable());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LRUMap<DataInputStream, InputStream> lRUMap0 = new LRUMap<DataInputStream, InputStream>();
      LRUMap<DataInputStream, InputStream> lRUMap1 = lRUMap0.clone();
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try { 
        lRUMap1.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 955;
      int int1 = 10;
      LRUMap<Comparable<Object>, Integer> lRUMap0 = new LRUMap<Comparable<Object>, Integer>(955, 10, 955, true);
      LRUMap<Integer, Object> lRUMap1 = new LRUMap<Integer, Object>(955, 955);
      lRUMap1.getEntry(lRUMap0);
      AbstractHashedMap.HashEntry<Integer, Object> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<Integer, Object>((AbstractHashedMap.HashEntry<Integer, Object>) null, 12, (Object) null, "");
      AbstractLinkedMap.LinkEntry<Integer, Object> abstractLinkedMap_LinkEntry0 = new AbstractLinkedMap.LinkEntry<Integer, Object>(abstractHashedMap_HashEntry0, 10, lRUMap1, "");
      // Undeclared exception!
      try { 
        lRUMap1.moveToMRU(abstractLinkedMap_LinkEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Entry.before is null. Please check that your keys are immutable, and that you have used synchronization properly. If so, then please report this to dev@commons.apache.org as a bug.
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LRUMap<AbstractLinkedMap.LinkEntry<Object, String>, InputStream> lRUMap0 = new LRUMap<AbstractLinkedMap.LinkEntry<Object, String>, InputStream>(16, 16, 16, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      AbstractLinkedMap.LinkEntry<AbstractLinkedMap.LinkEntry<Object, String>, InputStream> abstractLinkedMap_LinkEntry0 = new AbstractLinkedMap.LinkEntry<AbstractLinkedMap.LinkEntry<Object, String>, InputStream>((AbstractHashedMap.HashEntry<AbstractLinkedMap.LinkEntry<Object, String>, InputStream>) null, (-2096), lRUMap0, mockFileInputStream0);
      AbstractLinkedMap.LinkEntry<AbstractLinkedMap.LinkEntry<Object, String>, InputStream> abstractLinkedMap_LinkEntry1 = abstractLinkedMap_LinkEntry0.after;
      // Undeclared exception!
      try { 
        lRUMap0.reuseMapping((AbstractLinkedMap.LinkEntry<AbstractLinkedMap.LinkEntry<Object, String>, InputStream>) null, 14, (-2096), (AbstractLinkedMap.LinkEntry<Object, String>) null, mockFileInputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // NPE, entry=null entryIsHeader=false key=null value=org.evosuite.runtime.mock.java.io.MockFileInputStream@3f5a2cf4 size=0 maxSize=16 Please check that your keys are immutable, and that you have used synchronization properly. If so, then please report this to dev@commons.apache.org as a bug.
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 0;
      AbstractHashedMap<DataInputStream, DataInputStream> abstractHashedMap0 = new AbstractHashedMap<DataInputStream, DataInputStream>(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)125;
      boolean boolean0 = false;
      LRUMap<DataInputStream, DataInputStream> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<DataInputStream, DataInputStream>(abstractHashedMap0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LRUMap<Object, String> lRUMap0 = new LRUMap<Object, String>(1);
      lRUMap0.isFull();
      LRUMap<LRUMap<Object, InputStream>, DataInputStream> lRUMap1 = new LRUMap<LRUMap<Object, InputStream>, DataInputStream>(1, false);
      // Undeclared exception!
      try { 
        lRUMap1.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LRUMap<String, DataInputStream> lRUMap0 = new LRUMap<String, DataInputStream>();
      LRUMap<Object, Object> lRUMap1 = new LRUMap<Object, Object>(116);
      lRUMap0.isEmpty();
      LRUMap<Object, String> lRUMap2 = new LRUMap<Object, String>();
      lRUMap0.threshold = 116;
      lRUMap2.put(lRUMap0, "");
      lRUMap2.replace((Object) "p", "p");
      lRUMap2.get((Object) lRUMap0, true);
      int int0 = 3845;
      LRUMap<String, InputStream> lRUMap3 = new LRUMap<String, InputStream>(3845, 116);
      lRUMap3.threshold = 3845;
      lRUMap0.isEmpty();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LRUMap<String, String> lRUMap4 = new LRUMap<String, String>(3845, true);
      LRUMap<DataInputStream, Object> lRUMap5 = new LRUMap<DataInputStream, Object>(3845, true);
      lRUMap5.clone();
      LRUMap<LRUMap<InputStream, Object>, DataInputStream> lRUMap6 = new LRUMap<LRUMap<InputStream, Object>, DataInputStream>(3845, true);
      lRUMap6.maxSize();
      LRUMap<String, Object> lRUMap7 = new LRUMap<String, Object>(116, 0, 116);
      // Undeclared exception!
      try { 
        lRUMap3.moveToMRU((AbstractLinkedMap.LinkEntry<String, InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LRUMap<String, DataInputStream> lRUMap0 = new LRUMap<String, DataInputStream>();
      LRUMap<Object, Object> lRUMap1 = new LRUMap<Object, Object>(125);
      lRUMap1.isScanUntilRemovable();
      LRUMap<Object, String> lRUMap2 = new LRUMap<Object, String>();
      lRUMap0.threshold = 125;
      FileSystemHandling.shouldAllThrowIOExceptions();
      lRUMap2.put(lRUMap0, "");
      lRUMap2.replace((Object) "p", "p");
      lRUMap2.get((Object) lRUMap0, false);
      LRUMap<String, InputStream> lRUMap3 = new LRUMap<String, InputStream>(3845, 125);
      lRUMap3.threshold = 3845;
      lRUMap0.isEmpty();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LRUMap<String, String> lRUMap4 = new LRUMap<String, String>(3845, false);
      LRUMap<DataInputStream, Object> lRUMap5 = new LRUMap<DataInputStream, Object>(3845, true);
      lRUMap5.clone();
      LRUMap<LRUMap<InputStream, Object>, DataInputStream> lRUMap6 = new LRUMap<LRUMap<InputStream, Object>, DataInputStream>(3845, false);
      lRUMap6.maxSize();
      LRUMap<String, Object> lRUMap7 = new LRUMap<String, Object>(125, 0, 125);
      // Undeclared exception!
      try { 
        lRUMap3.moveToMRU((AbstractLinkedMap.LinkEntry<String, InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LRUMap<Object, Integer> lRUMap0 = new LRUMap<Object, Integer>(9, 9, 9);
      AbstractLinkedMap.LinkEntry<Object, Integer> abstractLinkedMap_LinkEntry0 = lRUMap0.header;
      Integer integer1 = new Integer(9);
      // Undeclared exception!
      try { 
        lRUMap0.updateEntry(abstractLinkedMap_LinkEntry0, integer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't move header to MRU (please report this to dev@commons.apache.org)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LRUMap<InputStream, InputStream> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<InputStream, InputStream>((Map<? extends InputStream, ? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LRUMap<Object, AbstractLinkedMap.LinkEntry<InputStream, InputStream>> lRUMap0 = new LRUMap<Object, AbstractLinkedMap.LinkEntry<InputStream, InputStream>>(1972);
      lRUMap0.threshold = 1972;
      int int0 = 100;
      LRUMap<LRUMap<String, Integer>, DataInputStream> lRUMap1 = new LRUMap<LRUMap<String, Integer>, DataInputStream>(100);
      LRUMap<String, LRUMap<Integer, Object>> lRUMap2 = new LRUMap<String, LRUMap<Integer, Object>>(2, 0, 1972);
      lRUMap2.removeLRU((AbstractLinkedMap.LinkEntry<String, LRUMap<Integer, Object>>) null);
      LRUMap<Integer, AbstractLinkedMap.LinkEntry<InputStream, String>> lRUMap3 = null;
      try {
        lRUMap3 = new LRUMap<Integer, AbstractLinkedMap.LinkEntry<InputStream, String>>(0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LRUMap<LRUMap<Integer, Object>, Integer> lRUMap0 = new LRUMap<LRUMap<Integer, Object>, Integer>(698, 698, true);
      MockFile mockFile0 = new MockFile("9W|XkC i0yItgkT");
      File file0 = MockFile.createTempFile("'HKp", "'HKp", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      lRUMap0.doWriteObject(objectOutputStream0);
      LRUMap<Object, Object> lRUMap1 = null;
      try {
        lRUMap1 = new LRUMap<Object, Object>(14, 698);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap initial size must not be greather than max size
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }
}
