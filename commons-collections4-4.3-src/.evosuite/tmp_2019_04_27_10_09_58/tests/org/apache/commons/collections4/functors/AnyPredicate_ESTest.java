/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:19:05 GMT 2019
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnyPredicate_ESTest extends AnyPredicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(object0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[0], comparatorPredicate0);
      predicateArray0[1] = (Predicate<Object>) andPredicate0;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("U*m/<p&", classArray0, classArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, predicateArray0[1]);
      predicateArray0[2] = (Predicate<Object>) transformedPredicate0;
      AnyPredicate<NotNullPredicate<String>> anyPredicate0 = new AnyPredicate<NotNullPredicate<String>>(predicateArray0);
      NotNullPredicate<String> notNullPredicate0 = (NotNullPredicate<String>) mock(NotNullPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        anyPredicate0.evaluate(notNullPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'U*m/<p&' on 'class org.apache.commons.collections4.functors.NotNullPredicate$MockitoMock$1858696418' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) onePredicate0;
      AnyPredicate<OrPredicate<Integer>> anyPredicate0 = new AnyPredicate<OrPredicate<Integer>>(predicateArray0);
      OrPredicate<Integer> orPredicate0 = new OrPredicate<Integer>(predicate0, (Predicate<? super Integer>) null);
      // Undeclared exception!
      anyPredicate0.evaluate(orPredicate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnyPredicate<AnyPredicate<String>> anyPredicate0 = new AnyPredicate<AnyPredicate<String>>((Predicate<? super AnyPredicate<String>>[]) null);
      AnyPredicate<String> anyPredicate1 = new AnyPredicate<String>((Predicate<? super String>[]) null);
      // Undeclared exception!
      try { 
        anyPredicate0.evaluate(anyPredicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Predicate<? super NotPredicate<AllPredicate>>[]) predicateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      linkedList0.add((InstanceofPredicate) null);
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Collection<? extends Predicate<? super ComparatorPredicate<IdentityPredicate>>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate collection must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[0] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      boolean boolean0 = anyPredicate0.evaluate("{>U~0}=88c");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Integer integer0 = new Integer(0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      AnyPredicate<AnyPredicate<Boolean>> anyPredicate0 = new AnyPredicate<AnyPredicate<Boolean>>(predicateArray0);
      AnyPredicate<Boolean> anyPredicate1 = new AnyPredicate<Boolean>(predicateArray0);
      boolean boolean0 = anyPredicate0.evaluate(anyPredicate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      Predicate<OnePredicate<NonePredicate>> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super OnePredicate<NonePredicate>>>) linkedList0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicateArray0[0]);
      predicateArray0[2] = (Predicate<Object>) notPredicate0;
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<EqualPredicate<OrPredicate>> predicate0 = AnyPredicate.anyPredicate((Predicate<? super EqualPredicate<OrPredicate>>[]) predicateArray0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 1);
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsExceptionPredicate<Integer> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Integer>(predicate0);
      predicateArray0[0] = (Predicate<Integer>) nullIsExceptionPredicate0;
      Predicate<Integer> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Integer>[]) predicateArray0);
      assertNotNull(predicate1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      linkedList0.add(instanceofPredicate0);
      Predicate<AnyPredicate<NullPredicate<Integer>>> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super AnyPredicate<NullPredicate<Integer>>>>) linkedList0);
      assertNotNull(predicate0);
  }
}
