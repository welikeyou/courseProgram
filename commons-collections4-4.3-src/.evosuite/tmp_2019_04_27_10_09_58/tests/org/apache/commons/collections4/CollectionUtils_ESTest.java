/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 02:38:04 GMT 2019
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.collections4.BoundedCollection;
import org.apache.commons.collections4.ClosureUtilsTest;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.list.FixedSizeList;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CollectionUtils_ESTest extends CollectionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      CollectionUtils.reverseArray(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = (Iterator<SQLSyntaxErrorException>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Transformer<Object, SQLTimeoutException> transformer0 = (Transformer<Object, SQLTimeoutException>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Collection<SQLTimeoutException> collection0 = CollectionUtils.collect(iterator0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLTimeoutException>) transformer0);
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends SQLTimeoutException>) collection0, (Collection<? extends SQLTimeoutException>) treeSet0, (Equator<? super SQLTimeoutException>) defaultEquator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      Integer integer0 = new Integer(0);
      circularFifoQueue0.add(integer0);
      boolean boolean0 = CollectionUtils.isProperSubCollection(circularFifoQueue0, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      TreeSet<SQLIntegrityConstraintViolationException> treeSet0 = new TreeSet<SQLIntegrityConstraintViolationException>(arrayDeque0);
      Collection<SQLIntegrityConstraintViolationException> collection0 = CollectionUtils.subtract((Iterable<? extends SQLIntegrityConstraintViolationException>) treeSet0, (Iterable<? extends SQLIntegrityConstraintViolationException>) arrayDeque0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>(arrayList0);
      Transformer<BatchUpdateException, SQLClientInfoException> transformer0 = (Transformer<BatchUpdateException, SQLClientInfoException>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Collection<SQLClientInfoException> collection0 = CollectionUtils.collect((Iterable<BatchUpdateException>) linkedList0, (Transformer<? super BatchUpdateException, ? extends SQLClientInfoException>) transformer0);
      ArrayList<SQLClientInfoException> arrayList1 = new ArrayList<SQLClientInfoException>();
      Collection<SQLClientInfoException> collection1 = CollectionUtils.disjunction((Iterable<? extends SQLClientInfoException>) collection0, (Iterable<? extends SQLClientInfoException>) arrayList1);
      assertNotSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CollectionUtils.checkIndexBounds(0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CircularFifoQueue<SQLIntegrityConstraintViolationException> circularFifoQueue0 = new CircularFifoQueue<SQLIntegrityConstraintViolationException>();
      Collection<SQLIntegrityConstraintViolationException> collection0 = CollectionUtils.synchronizedCollection((Collection<SQLIntegrityConstraintViolationException>) circularFifoQueue0);
      boolean boolean0 = CollectionUtils.isFull(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(predicate1);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      PriorityQueue<SQLIntegrityConstraintViolationException> priorityQueue0 = CollectionUtils.select((Iterable<? extends SQLIntegrityConstraintViolationException>) arrayDeque0, (Predicate<? super SQLIntegrityConstraintViolationException>) nullIsExceptionPredicate0, (PriorityQueue<SQLIntegrityConstraintViolationException>) null, (PriorityQueue<SQLIntegrityConstraintViolationException>) null);
      assertNull(priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Transformer<Object, SQLSyntaxErrorException> transformer0 = (Transformer<Object, SQLSyntaxErrorException>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Collection<SQLSyntaxErrorException> collection0 = CollectionUtils.collect(iterator0, (Transformer<? super Object, ? extends SQLSyntaxErrorException>) transformer0);
      Transformer<Object, String> transformer1 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Collection<String> collection1 = CollectionUtils.collect((Iterable<SQLSyntaxErrorException>) collection0, (Transformer<? super SQLSyntaxErrorException, ? extends String>) transformer1);
      Map<String, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<? extends String>) collection1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedHashSet<LinkedList<SQLTransientConnectionException>> linkedHashSet0 = new LinkedHashSet<LinkedList<SQLTransientConnectionException>>();
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      linkedHashSet0.add(linkedList0);
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure0 = new ClosureUtilsTest.MockClosure<Object>();
      LinkedList<SQLTransientConnectionException> linkedList1 = CollectionUtils.forAllButLastDo((Iterable<LinkedList<SQLTransientConnectionException>>) linkedHashSet0, closureUtilsTest_MockClosure0);
      assertTrue(linkedHashSet0.contains(linkedList1));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = (Iterator<SQLTimeoutException>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Transformer<SQLException, DataTruncation> transformer0 = (Transformer<SQLException, DataTruncation>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Object> priorityQueue0 = CollectionUtils.collect((Iterator<? extends SQLTimeoutException>) iterator0, (Transformer<? super SQLTimeoutException, ? extends DataTruncation>) transformer0, (PriorityQueue<Object>) null);
      assertNull(priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0, clientInfoStatus0, clientInfoStatus0, clientInfoStatus0);
      List<ClientInfoStatus> list0 = CollectionUtils.collate((Iterable<? extends ClientInfoStatus>) enumSet0, (Iterable<? extends ClientInfoStatus>) enumSet0, true);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      FixedSizeList<StringTokenizer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<StringTokenizer>) linkedList0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      linkedList0.add(stringTokenizer0);
      CircularFifoQueue<StringTokenizer> circularFifoQueue0 = new CircularFifoQueue<StringTokenizer>(fixedSizeList0);
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>(circularFifoQueue0);
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.util.StringTokenizer.class) , any(java.util.StringTokenizer.class));
      List<StringTokenizer> list0 = CollectionUtils.collate((Iterable<? extends StringTokenizer>) hashSet0, (Iterable<? extends StringTokenizer>) linkedList0, (Comparator<? super StringTokenizer>) comparator0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list0 = CollectionUtils.collate((Iterable<? extends String>) arrayList0, (Iterable<? extends String>) arrayList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      int int0 = CollectionUtils.cardinality((SQLException) null, (Iterable<? super SQLException>) hashSet0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      boolean boolean0 = CollectionUtils.addAll((Collection<SQLWarning>) hashSet0, sQLWarningArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      Iterator<DataTruncation> iterator0 = (Iterator<DataTruncation>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      boolean boolean0 = CollectionUtils.addAll((Collection<DataTruncation>) vector0, (Iterator<? extends DataTruncation>) iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("(Bsmt0OF~Vxn4~;3}", "(Bsmt0OF~Vxn4~;3}");
      hashSet0.add(sQLTimeoutException0);
      Collection<SQLTimeoutException> collection0 = CollectionUtils.removeAll((Collection<SQLTimeoutException>) hashSet0, (Collection<?>) hashSet0);
      boolean boolean0 = CollectionUtils.addAll(collection0, (Iterable<? extends SQLTimeoutException>) hashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      // Undeclared exception!
      try { 
        CollectionUtils.union((Iterable<?>) stack0, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClosureUtilsTest.MockTransformer<StringTokenizer> closureUtilsTest_MockTransformer0 = new ClosureUtilsTest.MockTransformer<StringTokenizer>();
      // Undeclared exception!
      try { 
        CollectionUtils.transformingCollection((Collection<StringTokenizer>) null, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) closureUtilsTest_MockTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.synchronizedCollection((Collection<InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.SynchronizedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "<H", (-1251));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLTransientException0);
      DefaultEquator<SQLIntegrityConstraintViolationException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLIntegrityConstraintViolationException> predicate0 = EqualPredicate.equalPredicate(sQLIntegrityConstraintViolationException0, (Equator<SQLIntegrityConstraintViolationException>) defaultEquator0);
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends SQLIntegrityConstraintViolationException>) null, (Iterable<? extends SQLIntegrityConstraintViolationException>) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends SQLFeatureNotSupportedException>) null, (Iterable<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<? extends Locale.FilteringMode>) enumSet0, (Predicate<? super Locale.FilteringMode>) equalPredicate0, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.reverseArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Collection<HashMap<SQLIntegrityConstraintViolationException, String>>) null, (Collection<?>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultEquator<SQLNonTransientConnectionException> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Iterable<SQLNonTransientConnectionException>) null, (Iterable<? extends SQLNonTransientConnectionException>) null, (Equator<? super SQLNonTransientConnectionException>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Collection<BatchUpdateException>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Iterable<SQLTransientException>) null, (Iterable<? extends SQLTransientException>) null, (Equator<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      SQLDataException sQLDataException0 = new SQLDataException("$^a@!pzfsh]q{ft", "QK=e1Mu%\"@{K{X");
      DataTruncation dataTruncation0 = new DataTruncation((-1818), true, true, 1, (-1818), sQLDataException0);
      hashSet0.add(dataTruncation0);
      NonePredicate<DataTruncation> nonePredicate0 = new NonePredicate<DataTruncation>(predicateArray0);
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<DataTruncation>) hashSet0, (Predicate<? super DataTruncation>) nonePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.permutations((Collection<SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collection must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PermutationIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>((Collection<? extends SQLTimeoutException>) treeSet0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      priorityQueue0.add(sQLTimeoutException0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      // Undeclared exception!
      try { 
        CollectionUtils.matchesAll((Iterable<SQLTimeoutException>) priorityQueue0, (Predicate<? super SQLTimeoutException>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashSet<ClosureUtilsTest.MockClosure<Object>> hashSet0 = new HashSet<ClosureUtilsTest.MockClosure<Object>>();
      // Undeclared exception!
      try { 
        CollectionUtils.isSubCollection((Collection<?>) null, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.isProperSubCollection(circularFifoQueue0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLTimeoutException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      // Undeclared exception!
      try { 
        CollectionUtils.intersection((Iterable<? extends SQLTransientException>) null, (Iterable<? extends SQLTransientException>) serviceLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.getCardinalityMap((Iterable<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      Iterator<BatchUpdateException> iterator0 = priorityQueue0.iterator();
      long[] longArray0 = new long[4];
      SQLException sQLException0 = new SQLException((String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("U-0*", "U-0*", (-330), longArray0, sQLException0);
      priorityQueue0.add(batchUpdateException0);
      // Undeclared exception!
      try { 
        CollectionUtils.get(iterator0, 529);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterator<ServiceLoader<SQLClientInfoException>>) null, 3571);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Iterator<SQLTransactionRollbackException> iterator0 = (Iterator<SQLTransactionRollbackException>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      // Undeclared exception!
      try { 
        CollectionUtils.get(iterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Collection<SQLIntegrityConstraintViolationException> collection0 = CollectionUtils.emptyCollection();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) collection0, 912);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 912
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Comparator<SQLIntegrityConstraintViolationException> comparator0 = (Comparator<SQLIntegrityConstraintViolationException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<SQLIntegrityConstraintViolationException> list0 = CollectionUtils.collate((Iterable<? extends SQLIntegrityConstraintViolationException>) serviceLoader0, (Iterable<? extends SQLIntegrityConstraintViolationException>) serviceLoader0, (Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, true);
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<SQLIntegrityConstraintViolationException>) list0, 1589);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1589, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(0, 0);
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<Object>) vector0, 3751);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 3751
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Iterator<ClosureUtilsTest.MockClosure<SQLException>> iterator0 = (Iterator<ClosureUtilsTest.MockClosure<SQLException>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure0 = new ClosureUtilsTest.MockClosure<Object>();
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure1 = CollectionUtils.forAllDo(iterator0, closureUtilsTest_MockClosure0);
      assertSame(closureUtilsTest_MockClosure1, closureUtilsTest_MockClosure0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = CollectionUtils.synchronizedCollection((Collection<SQLNonTransientConnectionException>) arrayList0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<SQLNonTransientException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) arrayDeque0);
      Stack<Object> stack0 = new Stack<Object>();
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(transformer0);
      stack0.add((Object) transformerPredicate0);
      Object object0 = new Object();
      stack0.add(object0);
      stack0.add((Object) arrayList0);
      int int0 = 1;
      stack0.remove(1);
      CollectionUtils.select((Iterable<? extends SQLNonTransientConnectionException>) collection0, (Predicate<? super SQLNonTransientConnectionException>) predicate0, stack0);
      Iterator<SQLTimeoutException> iterator0 = (Iterator<SQLTimeoutException>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      ClosureUtilsTest.MockClosure<SQLException> closureUtilsTest_MockClosure0 = new ClosureUtilsTest.MockClosure<SQLException>();
      CollectionUtils.forAllButLastDo(iterator0, closureUtilsTest_MockClosure0);
      Collection<SQLNonTransientException> collection1 = CollectionUtils.selectRejected((Iterable<? extends SQLNonTransientException>) arrayList0, (Predicate<? super SQLNonTransientException>) transformerPredicate0);
      CollectionUtils.predicatedCollection(collection1, (Predicate<? super SQLNonTransientException>) transformerPredicate0);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      Collection<SQLTransactionRollbackException> collection2 = CollectionUtils.select((Iterable<? extends SQLTransactionRollbackException>) linkedList0, (Predicate<? super SQLTransactionRollbackException>) transformerPredicate0);
      // Undeclared exception!
      try { 
        UnmodifiableBoundedCollection.unmodifiableBoundedCollection((Collection<? extends SQLTransactionRollbackException>) collection2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is not a bounded collection.
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableBoundedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.disjunction((Iterable<? extends SQLIntegrityConstraintViolationException>) null, (Iterable<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) null, sQLInvalidAuthorizationSpecExceptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.containsAll((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0, clientInfoStatus0, clientInfoStatus0, clientInfoStatus0);
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends ClientInfoStatus>) enumSet0, (Iterable<? extends ClientInfoStatus>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collections must not be null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.checkIndexBounds((-510));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -510
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("", "s^R-#S4Oy2I", (-347), sQLTransientConnectionException0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      Collection<SQLDataException> collection0 = CollectionUtils.unmodifiableCollection((Collection<? extends SQLDataException>) vector0);
      // Undeclared exception!
      try { 
        CollectionUtils.addIgnoreNull(collection0, sQLDataException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "d rw1&u#2(HJD");
      // Undeclared exception!
      try { 
        CollectionUtils.addIgnoreNull((Collection<SQLTransientConnectionException>) treeSet0, sQLTransientConnectionException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Collection<SQLIntegrityConstraintViolationException> collection0 = CollectionUtils.emptyCollection();
      Collection<SQLIntegrityConstraintViolationException> collection1 = CollectionUtils.synchronizedCollection(collection0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection1, sQLIntegrityConstraintViolationExceptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ArrayDeque<BatchUpdateException>[] arrayDequeArray0 = (ArrayDeque<BatchUpdateException>[]) Array.newInstance(ArrayDeque.class, 4);
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<ArrayDeque<BatchUpdateException>>) null, arrayDequeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"");
      priorityQueue0.add(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<SQLRecoverableException>) priorityQueue0, sQLRecoverableExceptionArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLRecoverableException cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FixedSizeList<String> fixedSizeList0 = FixedSizeList.fixedSizeList((List<String>) arrayList0);
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<String>) fixedSizeList0, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      Enumeration<SQLClientInfoException> enumeration0 = (Enumeration<SQLClientInfoException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      boolean boolean0 = CollectionUtils.addAll((Collection<SQLClientInfoException>) arrayList0, (Enumeration<? extends SQLClientInfoException>) enumeration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CircularFifoQueue<EnumSet<ClientInfoStatus>> circularFifoQueue0 = new CircularFifoQueue<EnumSet<ClientInfoStatus>>();
      BoundedCollection<EnumSet<ClientInfoStatus>> boundedCollection0 = UnmodifiableBoundedCollection.unmodifiableBoundedCollection((BoundedCollection<? extends EnumSet<ClientInfoStatus>>) circularFifoQueue0);
      Enumeration<EnumSet<ClientInfoStatus>> enumeration0 = (Enumeration<EnumSet<ClientInfoStatus>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<EnumSet<ClientInfoStatus>>) boundedCollection0, (Enumeration<? extends EnumSet<ClientInfoStatus>>) enumeration0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableBoundedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CircularFifoQueue<EnumSet<ClientInfoStatus>> circularFifoQueue0 = new CircularFifoQueue<EnumSet<ClientInfoStatus>>();
      Enumeration<EnumSet<ClientInfoStatus>> enumeration0 = (Enumeration<EnumSet<ClientInfoStatus>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<EnumSet<ClientInfoStatus>>) circularFifoQueue0, (Enumeration<? extends EnumSet<ClientInfoStatus>>) enumeration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Attempted to add null object to queue
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Collection<SQLDataException> collection0 = CollectionUtils.emptyIfNull((Collection<SQLDataException>) null);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends SQLNonTransientException>) collection0, (Iterable<? extends SQLNonTransientException>) null, (Comparator<? super SQLNonTransientException>) comparator0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collections must not be null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<?>) null, (Iterable<?>) null, (Comparator<? super Object>) comparator0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collections must not be null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<SQLInvalidAuthorizationSpecException>) null, (Iterable<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      boolean boolean0 = CollectionUtils.addAll((Collection<SQLTimeoutException>) hashSet0, (Iterable<? extends SQLTimeoutException>) hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>();
      ListIterator<SQLNonTransientException> listIterator0 = arrayList0.listIterator(0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Can extract singleton only when collection size == 1", "Can extract singleton only when collection size == 1", 1700, (Throwable) null);
      arrayList0.add((SQLNonTransientException) sQLFeatureNotSupportedException0);
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterator<? extends SQLException>) listIterator0, (Transformer<? super SQLException, ? extends String>) transformer0, vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = (Iterator<SQLSyntaxErrorException>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = CollectionUtils.collect((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLTransientException>) null, arrayList0);
      assertTrue(arrayList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = (Transformer<SQLException, SQLTransientConnectionException>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      PriorityQueue<SQLException> priorityQueue1 = CollectionUtils.collect((Iterable<? extends SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLTransientConnectionException>) transformer0, priorityQueue0);
      assertSame(priorityQueue1, priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Collection<SQLIntegrityConstraintViolationException> collection0 = CollectionUtils.emptyCollection();
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = (Transformer<SQLException, SQLTransientConnectionException>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = CollectionUtils.collect((Iterable<? extends SQLIntegrityConstraintViolationException>) collection0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLException>) transformer0, arrayList0);
      assertSame(arrayList1, arrayList0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Stack<Object> stack0 = new Stack<Object>();
      Vector<Object> vector0 = CollectionUtils.selectRejected((Iterable<? extends InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) predicate0, (Vector<Object>) stack0);
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Predicate<SQLTransientException> predicate0 = FalsePredicate.falsePredicate();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      CollectionUtils.select((Iterable<? extends SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) predicate0, arrayList0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("w+d!il", "org.apache.commons.collections4.functors.OnePredicate", 2519);
      DataTruncation dataTruncation0 = new DataTruncation(3681, false, false, 3323, 3681, sQLRecoverableException0);
      dataTruncation0.getNextWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      HashSet<Object> hashSet0 = new HashSet<Object>(arrayList0);
      CollectionUtils.cardinality(batchUpdateException0, (Iterable<? super BatchUpdateException>) hashSet0);
      DataTruncation dataTruncation1 = new DataTruncation(0, false, false, 3681, 0, dataTruncation0);
      CollectionUtils.get((Object) dataTruncation1, 0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = (Iterator<SQLIntegrityConstraintViolationException>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      // Undeclared exception!
      try { 
        CollectionUtils.get(iterator0, 2519);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2518
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>(865, 1196);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(">j@", "1^wrY*@22Fpd");
      vector0.add(sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) vector0, (Collection<?>) vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>(549, 1958);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("nSKL3*_", "aTF5e");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("nSKL3*_", sQLRecoverableException0);
      vector0.add(sQLInvalidAuthorizationSpecException0);
      Map<SQLInvalidAuthorizationSpecException, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<? extends SQLInvalidAuthorizationSpecException>) vector0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      linkedHashSet0.add((SQLDataException) null);
      SQLDataException sQLDataException0 = CollectionUtils.extractSingleton((Collection<SQLDataException>) linkedHashSet0);
      assertNull(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.extractSingleton((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      // Undeclared exception!
      try { 
        CollectionUtils.extractSingleton((Collection<SQLDataException>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can extract singleton only when collection size == 1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>(0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(enumSet0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedHashSet<Object> linkedHashSet1 = CollectionUtils.selectRejected((Iterable<? extends Locale.FilteringMode>) enumSet0, (Predicate<? super Locale.FilteringMode>) equalPredicate0, linkedHashSet0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      CollectionUtils.removeAll((Iterable<Object>) linkedHashSet1, (Iterable<?>) arrayList0, (Equator<? super Object>) defaultEquator0);
      assertEquals(5, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.retainAll((Iterable<Locale.FilteringMode>) enumSet0, (Iterable<? extends Locale.FilteringMode>) treeSet0, (Equator<? super Locale.FilteringMode>) defaultEquator0);
      assertFalse(collection0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      CollectionUtils.permutations((Collection<SQLFeatureNotSupportedException>) hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Collection<EnumSet<Locale.FilteringMode>> collection0 = CollectionUtils.emptyCollection();
      LinkedHashSet<EnumSet<Locale.FilteringMode>> linkedHashSet0 = new LinkedHashSet<EnumSet<Locale.FilteringMode>>(collection0);
      linkedHashSet0.add((EnumSet<Locale.FilteringMode>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      List<EnumSet<Locale.FilteringMode>> list0 = CollectionUtils.collate((Iterable<? extends EnumSet<Locale.FilteringMode>>) linkedHashSet0, (Iterable<? extends EnumSet<Locale.FilteringMode>>) linkedHashSet0, (Comparator<? super EnumSet<Locale.FilteringMode>>) comparator0, false);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLIntegrityConstraintViolationException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<SQLIntegrityConstraintViolationException> list0 = CollectionUtils.collate((Iterable<? extends SQLIntegrityConstraintViolationException>) stack0, (Iterable<? extends SQLIntegrityConstraintViolationException>) serviceLoader0, (Comparator<? super SQLIntegrityConstraintViolationException>) comparator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends DataTruncation>) hashSet0, (Iterable<? extends DataTruncation>) hashSet0, (Comparator<? super DataTruncation>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The comparator must not be null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends String>) null, (Iterable<? extends String>) null, (Comparator<? super String>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collections must not be null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CircularFifoQueue<DataTruncation> circularFifoQueue0 = new CircularFifoQueue<DataTruncation>();
      int int0 = CollectionUtils.maxSize(circularFifoQueue0);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.maxSize((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collection must not be null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      int int0 = CollectionUtils.maxSize(hashSet0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>();
      FixedSizeList<SQLRecoverableException> fixedSizeList0 = FixedSizeList.fixedSizeList((List<SQLRecoverableException>) vector0);
      boolean boolean0 = CollectionUtils.isFull(fixedSizeList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Collection<SQLIntegrityConstraintViolationException> collection0 = CollectionUtils.emptyCollection();
      boolean boolean0 = CollectionUtils.isFull(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      CollectionUtils.reverseArray(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      int[] intArray0 = new int[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Index cannot be negative: ", intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("QV7bf5$@u=T%a,F01", "\"|tRoCqdO#7oTC@&", batchUpdateException0);
      linkedHashSet0.add(sQLRecoverableException0);
      boolean boolean0 = CollectionUtils.isNotEmpty(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = CollectionUtils.isNotEmpty((Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "org.apache.commons.collections4.list.FixedSizeList");
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>(comparator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, sQLInvalidAuthorizationSpecException0);
      priorityQueue0.add(sQLTransientConnectionException0);
      boolean boolean0 = CollectionUtils.isEmpty(priorityQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>(comparator0);
      boolean boolean0 = CollectionUtils.isEmpty(priorityQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = CollectionUtils.isEmpty((Collection<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.list.FixedSizeList");
      stringTokenizer0.nextElement();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(stringTokenizer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.sizeIsEmpty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long[] longArray0 = new long[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Index cannot be negative: ", "Index cannot be negative: ", 0, longArray0, (Throwable) null);
      boolean boolean0 = CollectionUtils.sizeIsEmpty(batchUpdateException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Collection<LinkedList<SQLTransientException>> collection0 = CollectionUtils.emptyCollection();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(collection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = CollectionUtils.sizeIsEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.list.FixedSizeList");
      boolean boolean0 = CollectionUtils.sizeIsEmpty(stringTokenizer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      int int0 = CollectionUtils.size(sQLClientInfoException0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultEquator<DataTruncation> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.size(defaultEquator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.functors.DefaultEquator
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = CollectionUtils.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Collection<SQLIntegrityConstraintViolationException> collection0 = CollectionUtils.emptyCollection();
      int int0 = CollectionUtils.size(collection0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        CollectionUtils.get(objectArray0[6], 743);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure0 = new ClosureUtilsTest.MockClosure<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) closureUtilsTest_MockClosure0, 743);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.ClosureUtilsTest$MockClosure
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("w+d!il", "w+d!il", 2519);
      DataTruncation dataTruncation0 = new DataTruncation(3681, false, false, 3323, 3681, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) dataTruncation0, (-919));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -919
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ArrayDeque<EnumSet<ClientInfoStatus>> arrayDeque0 = new ArrayDeque<EnumSet<ClientInfoStatus>>(0);
      Collection<EnumSet<ClientInfoStatus>> collection0 = CollectionUtils.disjunction((Iterable<? extends EnumSet<ClientInfoStatus>>) arrayDeque0, (Iterable<? extends EnumSet<ClientInfoStatus>>) arrayDeque0);
      EnumSet<ClientInfoStatus>[] enumSetArray0 = (EnumSet<ClientInfoStatus>[]) Array.newInstance(EnumSet.class, 3);
      boolean boolean0 = CollectionUtils.addAll(collection0, enumSetArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Collection<SQLException> collection0 = CollectionUtils.emptyIfNull((Collection<SQLException>) null);
      Enumeration<SQLException> enumeration0 = (Enumeration<SQLException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, (Enumeration<? extends SQLException>) enumeration0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CircularFifoQueue<EnumSet<ClientInfoStatus>> circularFifoQueue0 = new CircularFifoQueue<EnumSet<ClientInfoStatus>>();
      Enumeration<EnumSet<ClientInfoStatus>> enumeration0 = (Enumeration<EnumSet<ClientInfoStatus>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      boolean boolean0 = CollectionUtils.addAll((Collection<EnumSet<ClientInfoStatus>>) circularFifoQueue0, (Enumeration<? extends EnumSet<ClientInfoStatus>>) enumeration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLTransientException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Transformer<Object, SQLTimeoutException> transformer0 = (Transformer<Object, SQLTimeoutException>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Collection<SQLTimeoutException> collection0 = CollectionUtils.collect((Iterable<SQLTransientException>) serviceLoader0, (Transformer<? super SQLTransientException, ? extends SQLTimeoutException>) transformer0);
      Iterator<SQLTimeoutException> iterator0 = (Iterator<SQLTimeoutException>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      boolean boolean0 = CollectionUtils.addAll(collection0, (Iterator<? extends SQLTimeoutException>) iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayDeque<SQLWarning> arrayDeque0 = new ArrayDeque<SQLWarning>();
      boolean boolean0 = CollectionUtils.addIgnoreNull((Collection<SQLWarning>) arrayDeque0, (SQLWarning) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("", "s^R-#S4Oy2I", (-347), sQLTransientConnectionException0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      boolean boolean0 = CollectionUtils.addIgnoreNull((Collection<SQLDataException>) vector0, sQLDataException0);
      assertTrue(vector0.contains(sQLDataException0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Transformer<SQLRecoverableException, SQLTransactionRollbackException> transformer0 = (Transformer<SQLRecoverableException, SQLTransactionRollbackException>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      LinkedHashSet<SQLException> linkedHashSet1 = CollectionUtils.collect((Iterator<? extends SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, ? extends SQLTransientException>) transformer0, linkedHashSet0);
      assertSame(linkedHashSet1, linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLTimeoutException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      HashSet<Object> hashSet1 = CollectionUtils.selectRejected((Iterable<? extends SQLTimeoutException>) serviceLoader0, (Predicate<? super SQLTimeoutException>) null, hashSet0);
      assertEquals(0, hashSet1.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      Transformer<Object, SQLWarning> transformer0 = (Transformer<Object, SQLWarning>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Q#{n`Dd");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLSyntaxErrorException0, (Equator<Object>) defaultEquator0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(predicate0, predicate0);
      TransformedPredicate<SQLWarning> transformedPredicate0 = new TransformedPredicate<SQLWarning>(transformer0, orPredicate0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      ArrayList<SQLException> arrayList1 = CollectionUtils.select((Iterable<? extends DataTruncation>) linkedHashSet0, (Predicate<? super DataTruncation>) transformedPredicate0, arrayList0, arrayList0);
      assertTrue(arrayList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      FixedSizeList<BatchUpdateException> fixedSizeList0 = FixedSizeList.fixedSizeList((List<BatchUpdateException>) stack0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ArrayDeque<Object> arrayDeque1 = CollectionUtils.select((Iterable<? extends BatchUpdateException>) fixedSizeList0, (Predicate<? super BatchUpdateException>) null, arrayDeque0, arrayDeque0);
      assertEquals(0, arrayDeque1.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>(0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.CollectionUtils$1", "The type to check instanceof must not be null");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "queue is empty", 0, sQLNonTransientException0);
      hashSet0.add(sQLFeatureNotSupportedException0);
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLNonTransientException0);
      Collection<SQLFeatureNotSupportedException> collection0 = CollectionUtils.select((Iterable<? extends SQLFeatureNotSupportedException>) hashSet0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertFalse(collection0.contains(sQLFeatureNotSupportedException0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      Predicate<Locale.FilteringMode> predicate0 = NotNullPredicate.notNullPredicate();
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.select((Iterable<? extends Locale.FilteringMode>) enumSet0, (Predicate<? super Locale.FilteringMode>) predicate0);
      assertTrue(collection0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      ArrayList<Locale.FilteringMode> arrayList1 = CollectionUtils.select((Iterable<? extends Locale.FilteringMode>) arrayList0, (Predicate<? super Locale.FilteringMode>) null, arrayList0);
      assertTrue(arrayList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Collection<SQLNonTransientException> collection0 = CollectionUtils.select((Iterable<? extends SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) null);
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, (Enumeration<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<SQLClientInfoException>) arrayList0, (Predicate<? super SQLClientInfoException>) nonePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Collection<SQLIntegrityConstraintViolationException> collection0 = CollectionUtils.emptyCollection();
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>(collection0);
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<SQLIntegrityConstraintViolationException>) vector0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("coll must not be null.");
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = CollectionUtils.exists((Iterable<String>) stack0, (Predicate<? super String>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      boolean boolean0 = CollectionUtils.exists((Iterable<SQLInvalidAuthorizationSpecException>) priorityQueue0, (Predicate<? super SQLInvalidAuthorizationSpecException>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      boolean boolean0 = CollectionUtils.exists((Iterable<SQLNonTransientConnectionException>) vector0, (Predicate<? super SQLNonTransientConnectionException>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate0);
      Collection<SQLSyntaxErrorException> collection0 = CollectionUtils.predicatedCollection((Collection<SQLSyntaxErrorException>) linkedList0, (Predicate<? super SQLSyntaxErrorException>) notPredicate0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = (Transformer<Object, SQLSyntaxErrorException>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      CollectionUtils.transform(collection0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) arrayDeque0, (Iterable<? extends Integer>) arrayDeque0, (Comparator<? super Integer>) comparator0);
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList(list0);
      ClosureUtilsTest.MockTransformer<Integer> closureUtilsTest_MockTransformer0 = new ClosureUtilsTest.MockTransformer<Integer>();
      CollectionUtils.transform((Collection<Integer>) fixedSizeList0, (Transformer<? super Integer, ? extends Integer>) closureUtilsTest_MockTransformer0);
      assertTrue(fixedSizeList0.isFull());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Transformer<SQLException, SQLWarning> transformer0 = (Transformer<SQLException, SQLWarning>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      CollectionUtils.transform((Collection<SQLWarning>) null, (Transformer<? super SQLWarning, ? extends SQLWarning>) transformer0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ArrayDeque<ServiceLoader<String>> arrayDeque0 = new ArrayDeque<ServiceLoader<String>>(876);
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<ServiceLoader<String>>) arrayDeque0, (Predicate<? super ServiceLoader<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "org.apache.commons.collections4.list.FixedSizeList");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLInvalidAuthorizationSpecException0, comparator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>(comparator1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, sQLInvalidAuthorizationSpecException0);
      priorityQueue0.add(sQLTransientConnectionException0);
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<SQLTransientConnectionException>) priorityQueue0, (Predicate<? super SQLTransientConnectionException>) orPredicate0);
      assertFalse(priorityQueue0.contains(sQLTransientConnectionException0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "org.apache.commons.collections4.list.FixedSizeList");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-784), (-784)).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLInvalidAuthorizationSpecException0, comparator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>(comparator1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, sQLInvalidAuthorizationSpecException0);
      priorityQueue0.add(sQLTransientConnectionException0);
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<SQLTransientConnectionException>) priorityQueue0, (Predicate<? super SQLTransientConnectionException>) orPredicate0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Collection<SQLIntegrityConstraintViolationException> collection0 = CollectionUtils.emptyIfNull((Collection<SQLIntegrityConstraintViolationException>) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("U~");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.ComparatorUtils", "-3KGhcB%IXJ", 10, (long[]) null, sQLIntegrityConstraintViolationException0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) batchUpdateException0, (Equator<SQLException>) defaultEquator0);
      Predicate<SQLIntegrityConstraintViolationException> predicate1 = AndPredicate.andPredicate((Predicate<? super SQLIntegrityConstraintViolationException>) predicate0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      boolean boolean0 = CollectionUtils.filter((Iterable<SQLIntegrityConstraintViolationException>) collection0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Collection<SQLIntegrityConstraintViolationException> collection0 = CollectionUtils.emptyIfNull((Collection<SQLIntegrityConstraintViolationException>) null);
      assertNotNull(collection0);
      
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>(collection0);
      boolean boolean0 = CollectionUtils.filter((Iterable<SQLIntegrityConstraintViolationException>) arrayDeque0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Predicate<BatchUpdateException> predicate0 = TruePredicate.truePredicate();
      boolean boolean0 = CollectionUtils.filter((Iterable<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<HashSet<SQLClientInfoException>> iterator0 = (Iterator<HashSet<SQLClientInfoException>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      HashSet<SQLClientInfoException> hashSet0 = CollectionUtils.forAllButLastDo(iterator0, (ClosureUtilsTest.MockClosure<Object>) null);
      assertNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClosureUtilsTest.MockClosure<SQLDataException> closureUtilsTest_MockClosure0 = new ClosureUtilsTest.MockClosure<SQLDataException>();
      SQLDataException sQLDataException0 = CollectionUtils.forAllButLastDo((Iterable<SQLDataException>) null, closureUtilsTest_MockClosure0);
      assertNull(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure0 = new ClosureUtilsTest.MockClosure<Object>();
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure1 = CollectionUtils.forAllDo((Iterator<Object>) null, closureUtilsTest_MockClosure0);
      Collection<SQLIntegrityConstraintViolationException> collection0 = CollectionUtils.emptyCollection();
      Collection<SQLIntegrityConstraintViolationException> collection1 = CollectionUtils.synchronizedCollection(collection0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) closureUtilsTest_MockClosure1;
      objectArray0[1] = (Object) closureUtilsTest_MockClosure1;
      objectArray0[2] = (Object) closureUtilsTest_MockClosure0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) collection0;
      objectArray0[5] = (Object) collection1;
      objectArray0[6] = (Object) closureUtilsTest_MockClosure0;
      CollectionUtils.reverseArray(objectArray0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLTransientException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Transformer<Object, SQLTimeoutException> transformer0 = (Transformer<Object, SQLTimeoutException>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Collection<SQLTimeoutException> collection2 = CollectionUtils.collect((Iterable<SQLTransientException>) serviceLoader0, (Transformer<? super SQLTransientException, ? extends SQLTimeoutException>) transformer0);
      Collection<SQLTimeoutException> collection3 = CollectionUtils.synchronizedCollection(collection2);
      Iterator<SQLTimeoutException> iterator0 = (Iterator<SQLTimeoutException>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      boolean boolean0 = CollectionUtils.addAll(collection3, (Iterator<? extends SQLTimeoutException>) iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Iterator<ArrayList<SQLDataException>> iterator0 = (Iterator<ArrayList<SQLDataException>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure0 = CollectionUtils.forAllDo(iterator0, (ClosureUtilsTest.MockClosure<Object>) null);
      assertNull(closureUtilsTest_MockClosure0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(comparator0);
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure0 = CollectionUtils.forAllDo((Iterable<Integer>) priorityQueue0, (ClosureUtilsTest.MockClosure<Object>) null);
      assertNull(closureUtilsTest_MockClosure0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      CollectionUtils.find((Iterable<ClientInfoStatus>) null, (Predicate<? super ClientInfoStatus>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CircularFifoQueue<String> circularFifoQueue0 = new CircularFifoQueue<String>();
      HashSet<String> hashSet0 = new HashSet<String>(circularFifoQueue0);
      String string0 = CollectionUtils.find((Iterable<String>) hashSet0, (Predicate<? super String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.cardinality((StringTokenizer) null, (Iterable<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll must not be null.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      int int0 = CollectionUtils.cardinality(sQLClientInfoException0, (Iterable<? super SQLClientInfoException>) sQLClientInfoException0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<? extends SQLSyntaxErrorException>) arrayDeque0, (Collection<? extends SQLSyntaxErrorException>) arrayDeque0, (Equator<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Equator must not be null.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) arrayDeque0, (Iterable<? extends Integer>) arrayDeque0, (Comparator<? super Integer>) comparator0);
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList(list0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) enumSet0, (Collection<?>) fixedSizeList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 10, hashMap0);
      hashSet0.add(sQLClientInfoException0);
      ArrayDeque<SQLException> arrayDeque0 = new ArrayDeque<SQLException>();
      boolean boolean0 = CollectionUtils.isProperSubCollection(arrayDeque0, hashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      boolean boolean0 = CollectionUtils.isProperSubCollection(circularFifoQueue0, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientException0);
      stack0.add((SQLTransientException) sQLTransientConnectionException0);
      boolean boolean0 = CollectionUtils.isSubCollection(stack0, stack0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayDeque<EnumSet<ClientInfoStatus>> arrayDeque0 = new ArrayDeque<EnumSet<ClientInfoStatus>>(0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0);
      arrayDeque0.add(enumSet0);
      boolean boolean0 = CollectionUtils.isSubCollection(arrayDeque0, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("", "s^R-#S4Oy2I", (-347), sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.CollectionUtils$1", "org.apache.commons.collections4.CollectionUtils$1", sQLDataException0);
      vector0.add(sQLNonTransientConnectionException0);
      vector0.add(sQLNonTransientConnectionException0);
      Collection<SQLNonTransientConnectionException> collection0 = CollectionUtils.intersection((Iterable<? extends SQLNonTransientConnectionException>) vector0, (Iterable<? extends SQLNonTransientConnectionException>) vector0);
      assertTrue(collection0.contains(sQLNonTransientConnectionException0));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "-9$Ba%P}=u,", sQLNonTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("-9$Ba%P}=u,", "", (-3311), (Map<String, ClientInfoStatus>) null, sQLTransientException0);
      stack0.add(sQLClientInfoException0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) stack0, (Collection<?>) stack0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>();
      PriorityQueue<SQLTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLTransientConnectionException>(priorityQueue0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 0);
      priorityQueue0.add(sQLTransientConnectionException0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) priorityQueue1, (Collection<?>) priorityQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLTimeoutException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Collection<SQLTransientException> collection0 = CollectionUtils.intersection((Iterable<? extends SQLTransientException>) serviceLoader0, (Iterable<? extends SQLTransientException>) serviceLoader0);
      ArrayDeque<SQLWarning> arrayDeque0 = new ArrayDeque<SQLWarning>(1855);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) collection0, (Collection<?>) arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      SQLException[] sQLExceptionArray0 = new SQLException[5];
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) priorityQueue0, sQLExceptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>(arrayList0);
      Transformer<BatchUpdateException, SQLClientInfoException> transformer0 = (Transformer<BatchUpdateException, SQLClientInfoException>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Collection<SQLClientInfoException> collection0 = CollectionUtils.collect((Iterable<BatchUpdateException>) linkedList0, (Transformer<? super BatchUpdateException, ? extends SQLClientInfoException>) transformer0);
      SQLException[] sQLExceptionArray0 = new SQLException[0];
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) collection0, sQLExceptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Collection<ClientInfoStatus> collection0 = CollectionUtils.selectRejected((Iterable<? extends ClientInfoStatus>) null, (Predicate<? super ClientInfoStatus>) instanceofPredicate0);
      boolean boolean0 = CollectionUtils.containsAll(collection0, collection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      boolean boolean0 = CollectionUtils.containsAll(arrayList0, arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 10, hashMap0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      Collection<Object> collection0 = CollectionUtils.subtract((Iterable<?>) sQLClientInfoException0, (Iterable<?>) sQLClientInfoException0, (Predicate<Object>) nullIsExceptionPredicate0);
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Object>) collection0, (Predicate<? super Object>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      ArrayList<InstanceofPredicate> arrayList1 = new ArrayList<InstanceofPredicate>();
      Predicate<String> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super String>>) arrayList1);
      Collection<String> collection0 = CollectionUtils.subtract((Iterable<? extends String>) arrayList0, (Iterable<? extends String>) arrayList0, predicate0);
      boolean boolean0 = CollectionUtils.containsAll(collection0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      arrayList0.add(sQLClientInfoException0);
      Collection<SQLClientInfoException> collection0 = CollectionUtils.disjunction((Iterable<? extends SQLClientInfoException>) arrayList0, (Iterable<? extends SQLClientInfoException>) arrayList0);
      assertFalse(collection0.contains(sQLClientInfoException0));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLIntegrityConstraintViolationException> priorityQueue0 = new PriorityQueue<SQLIntegrityConstraintViolationException>(2601, comparator0);
      Collection<SQLIntegrityConstraintViolationException> collection0 = CollectionUtils.emptyIfNull((Collection<SQLIntegrityConstraintViolationException>) priorityQueue0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<SQLClientInfoException, ClosureUtilsTest.MockClosure<BatchUpdateException>> hashMap0 = new HashMap<SQLClientInfoException, ClosureUtilsTest.MockClosure<BatchUpdateException>>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Map<SQLClientInfoException, ClosureUtilsTest.MockClosure<BatchUpdateException>>) hashMap0, 2601);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2601
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FixedSizeList<String> fixedSizeList0 = FixedSizeList.fixedSizeList((List<String>) arrayList0);
      List<String> list0 = CollectionUtils.collate((Iterable<? extends String>) fixedSizeList0, (Iterable<? extends String>) arrayList0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends String>) arrayList0, (Iterable<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collections must not be null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Map<SQLDataException, Integer>) null, 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      Stack<BatchUpdateException> stack1 = new Stack<BatchUpdateException>();
      Collection<BatchUpdateException> collection0 = CollectionUtils.removeAll((Collection<BatchUpdateException>) stack1, (Collection<?>) stack0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<ServiceLoader<SQLNonTransientException>>) null, (Predicate<? super ServiceLoader<SQLNonTransientException>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = (Iterator<SQLIntegrityConstraintViolationException>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(iterator0).hasNext();
      doReturn(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException0).when(iterator0).next();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = CollectionUtils.get(iterator0, 2519);
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ServiceLoader<SQLTransientConnectionException> serviceLoader0 = ServiceLoader.load(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<SQLTransientConnectionException> list0 = CollectionUtils.collate((Iterable<? extends SQLTransientConnectionException>) serviceLoader0, (Iterable<? extends SQLTransientConnectionException>) serviceLoader0, (Comparator<? super SQLTransientConnectionException>) comparator0);
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = (Transformer<SQLException, SQLTransientConnectionException>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Collection<SQLTransientConnectionException> collection0 = CollectionUtils.transformingCollection((Collection<SQLTransientConnectionException>) list0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      stack0.add(sQLClientInfoException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<SQLClientInfoException> collection0 = CollectionUtils.retainAll((Iterable<SQLClientInfoException>) stack0, (Iterable<? extends SQLClientInfoException>) stack0, (Equator<? super SQLClientInfoException>) defaultEquator0);
      assertTrue(collection0.contains(sQLClientInfoException0));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      Integer integer0 = new Integer(0);
      circularFifoQueue0.add(integer0);
      Collection<Integer> collection0 = CollectionUtils.union((Iterable<? extends Integer>) linkedList0, (Iterable<? extends Integer>) circularFifoQueue0);
      assertTrue(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(18, false, false, 18, 2265);
      arrayDeque0.add(dataTruncation0);
      DefaultEquator<DataTruncation> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends DataTruncation>) arrayDeque0, (Collection<? extends DataTruncation>) arrayDeque0, (Equator<? super DataTruncation>) defaultEquator0);
      assertTrue(boolean0);
  }
}
