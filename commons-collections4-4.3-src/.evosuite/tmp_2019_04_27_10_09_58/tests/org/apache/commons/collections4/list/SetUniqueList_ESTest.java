/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:30:30 GMT 2019
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import org.apache.commons.collections4.list.SetUniqueList;
import org.apache.commons.collections4.set.UnmodifiableSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SetUniqueList_ESTest extends SetUniqueList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      linkedList0.add("");
      setUniqueList0.set(1, "");
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).next();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      SetUniqueList.SetListListIterator<Integer> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Integer>(listIterator0, hashSet0);
      Object object0 = setUniqueList_SetListListIterator0.next();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUniqueList.SetListListIterator<Integer> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Integer>(listIterator0, linkedHashSet0);
      setUniqueList_SetListListIterator0.remove();
      assertFalse(setUniqueList_SetListListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<HashSet<String>> linkedList0 = new LinkedList<HashSet<String>>();
      HashSet<HashSet<String>> hashSet0 = new HashSet<HashSet<String>>();
      SetUniqueList<HashSet<String>> setUniqueList0 = new SetUniqueList<HashSet<String>>(linkedList0, hashSet0);
      ListIterator<HashSet<String>> listIterator0 = setUniqueList0.listIterator();
      SetUniqueList.SetListListIterator<HashSet<String>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<HashSet<String>>(listIterator0, hashSet0);
      // Undeclared exception!
      try { 
        setUniqueList_SetListListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      setUniqueList0.set(0, "");
      assertEquals(1, linkedList0.size());
      assertTrue(setUniqueList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<HashSet<String>> linkedList0 = new LinkedList<HashSet<String>>();
      SetUniqueList<HashSet<String>> setUniqueList0 = SetUniqueList.setUniqueList((List<HashSet<String>>) linkedList0);
      setUniqueList0.add(0, (HashSet<String>) linkedHashSet0);
      HashSet<String> hashSet0 = setUniqueList0.remove(0);
      assertEquals(0, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SetUniqueList<String> setUniqueList0 = new SetUniqueList<String>(linkedList0, linkedHashSet0);
      ListIterator<String> listIterator0 = setUniqueList0.listIterator(2);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<HashSet<Integer>> linkedList0 = new LinkedList<HashSet<Integer>>();
      SetUniqueList<HashSet<Integer>> setUniqueList0 = SetUniqueList.setUniqueList((List<HashSet<Integer>>) linkedList0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedList0.add((HashSet<Integer>) linkedHashSet0);
      ListIterator<HashSet<Integer>> listIterator0 = setUniqueList0.listIterator(0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("g@)n:q:*nodvvIsl5-");
      LinkedList<String> linkedList0 = new LinkedList<String>(linkedHashSet0);
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      setUniqueList0.listIterator();
      assertTrue(setUniqueList0.contains("g@)n:q:*nodvvIsl5-"));
      assertTrue(linkedList0.contains("g@)n:q:*nodvvIsl5-"));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      SetUniqueList.SetListListIterator<String> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<String>(listIterator0, linkedHashSet1);
      setUniqueList_SetListListIterator0.add("org.apache.commons.collections4.list.AbstractListDecorator");
      boolean boolean0 = setUniqueList0.addAll((Collection<?>) linkedHashSet1);
      assertEquals(1, linkedHashSet1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUniqueList<Integer> setUniqueList0 = new SetUniqueList<Integer>(linkedList0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.subList(3261, 3261);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3261
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.subList(0, (-185));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-185)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        setUniqueList0.set(0, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(linkedList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.retainAll(setUniqueList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      linkedList0.add("");
      linkedList0.add("");
      // Undeclared exception!
      try { 
        setUniqueList0.removeAll(linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(linkedList0, set0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList2 = SetUniqueList.setUniqueList((List<String>) linkedList1);
      linkedList1.add("");
      // Undeclared exception!
      try { 
        setUniqueList1.removeAll(setUniqueList2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(linkedHashSet0);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      linkedHashSet0.add(setUniqueList0);
      linkedList0.add((Object) linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.removeAll(linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(linkedList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.remove((Object) setUniqueList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.createSetBasedOnList((Set<Object>) null, setUniqueList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      linkedList0.add((Object) setUniqueList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList1 = SetUniqueList.setUniqueList((List<String>) linkedList1);
      // Undeclared exception!
      try { 
        setUniqueList1.containsAll(setUniqueList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<UnmodifiableSet<String>> linkedList0 = new LinkedList<UnmodifiableSet<String>>();
      HashSet<UnmodifiableSet<String>> hashSet0 = new HashSet<UnmodifiableSet<String>>();
      SetUniqueList<UnmodifiableSet<String>> setUniqueList0 = new SetUniqueList<UnmodifiableSet<String>>(linkedList0, hashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<LinkedHashSet<String>> linkedList0 = new LinkedList<LinkedHashSet<String>>();
      SetUniqueList<LinkedHashSet<String>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<String>>) linkedList0);
      Set<LinkedHashSet<String>> set0 = setUniqueList0.asSet();
      SetUniqueList<LinkedHashSet<String>> setUniqueList1 = new SetUniqueList<LinkedHashSet<String>>(linkedList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(linkedList0);
      linkedList0.offerLast(linkedHashSet0);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll((Collection<? extends LinkedHashSet<Object>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<LinkedHashSet<String>> linkedList0 = new LinkedList<LinkedHashSet<String>>();
      SetUniqueList<LinkedHashSet<String>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<String>>) linkedList0);
      Set<LinkedHashSet<String>> set0 = setUniqueList0.asSet();
      linkedList0.add((LinkedHashSet<String>) null);
      SetUniqueList<LinkedHashSet<String>> setUniqueList1 = new SetUniqueList<LinkedHashSet<String>>(setUniqueList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.addAll(0, (Collection<? extends LinkedHashSet<String>>) setUniqueList1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll(5065, (Collection<?>) hashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5065, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList0);
      Set<LinkedHashSet<Object>> set0 = setUniqueList0.asSet();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList1 = new SetUniqueList<LinkedHashSet<Object>>(setUniqueList0, set0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        setUniqueList1.add(linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(linkedList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.add((-1), (Object) set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      setUniqueList1.add(0, (Object) linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.add(0, (Object) setUniqueList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.push((Object) null);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      boolean boolean0 = setUniqueList0.contains((Object) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>(linkedHashSet0);
      SetUniqueList<String> setUniqueList0 = new SetUniqueList<String>(linkedList0, linkedHashSet0);
      boolean boolean0 = setUniqueList0.remove((Object) linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      linkedHashSet0.add(linkedList0);
      LinkedList<HashSet<Object>> linkedList1 = new LinkedList<HashSet<Object>>();
      SetUniqueList<HashSet<Object>> setUniqueList1 = SetUniqueList.setUniqueList((List<HashSet<Object>>) linkedList1);
      boolean boolean0 = setUniqueList0.remove((Object) setUniqueList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      boolean boolean0 = setUniqueList0.addAll(0, (Collection<? extends String>) setUniqueList0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<HashSet<Integer>> linkedList0 = new LinkedList<HashSet<Integer>>();
      SetUniqueList<HashSet<Integer>> setUniqueList0 = SetUniqueList.setUniqueList((List<HashSet<Integer>>) linkedList0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = linkedList0.add((HashSet<Integer>) linkedHashSet0);
      boolean boolean1 = setUniqueList0.addAll(0, (Collection<? extends HashSet<Integer>>) linkedList0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<HashSet<String>> linkedList0 = new LinkedList<HashSet<String>>();
      SetUniqueList<HashSet<String>> setUniqueList0 = SetUniqueList.setUniqueList((List<HashSet<String>>) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(linkedList1, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList1.add(2279, (Object) setUniqueList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2279, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<HashSet<String>> linkedList0 = new LinkedList<HashSet<String>>();
      HashSet<HashSet<String>> hashSet0 = new HashSet<HashSet<String>>();
      hashSet0.add((HashSet<String>) null);
      SetUniqueList<HashSet<String>> setUniqueList0 = new SetUniqueList<HashSet<String>>(linkedList0, hashSet0);
      setUniqueList0.add(3261, (HashSet<String>) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<HashSet<String>> linkedList0 = new LinkedList<HashSet<String>>();
      SetUniqueList<HashSet<String>> setUniqueList0 = SetUniqueList.setUniqueList((List<HashSet<String>>) linkedList0);
      boolean boolean0 = setUniqueList0.addAll((Collection<? extends HashSet<String>>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Iterator<Object> iterator0 = setUniqueList0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>(linkedHashSet0);
      SetUniqueList<String> setUniqueList0 = new SetUniqueList<String>(linkedList0, linkedHashSet0);
      setUniqueList0.clear();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      HashSet<String> hashSet0 = new HashSet<String>();
      SetUniqueList.SetListListIterator<String> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<String>(listIterator0, hashSet0);
      hashSet0.add("4QC/m0FZ's7Ev&");
      setUniqueList_SetListListIterator0.add("4QC/m0FZ's7Ev&");
      assertTrue(hashSet0.contains("4QC/m0FZ's7Ev&"));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      boolean boolean0 = setUniqueList0.containsAll(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SetUniqueList.SetListListIterator<String> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<String>(listIterator0, linkedHashSet0);
      setUniqueList_SetListListIterator0.add("org.apache.commons.collections4.list.AbstractListDecorator");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      boolean boolean0 = setUniqueList0.containsAll(linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      boolean boolean0 = setUniqueList0.retainAll(setUniqueList0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = setUniqueList0.contains(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<LinkedHashSet<Integer>> linkedList0 = new LinkedList<LinkedHashSet<Integer>>();
      HashSet<LinkedHashSet<Integer>> hashSet0 = new HashSet<LinkedHashSet<Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      hashSet0.add(linkedHashSet0);
      Integer integer0 = new Integer((-1222));
      linkedHashSet0.add(integer0);
      SetUniqueList<LinkedHashSet<Integer>> setUniqueList0 = new SetUniqueList<LinkedHashSet<Integer>>(linkedList0, hashSet0);
      boolean boolean0 = setUniqueList0.retainAll(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<LinkedHashSet<Integer>> linkedList0 = new LinkedList<LinkedHashSet<Integer>>();
      HashSet<LinkedHashSet<Integer>> hashSet0 = new HashSet<LinkedHashSet<Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      hashSet0.add(linkedHashSet0);
      SetUniqueList<LinkedHashSet<Integer>> setUniqueList0 = new SetUniqueList<LinkedHashSet<Integer>>(linkedList0, hashSet0);
      boolean boolean0 = setUniqueList0.retainAll(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      boolean boolean0 = setUniqueList0.removeAll(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList1 = SetUniqueList.setUniqueList((List<String>) linkedList1);
      linkedList1.add("");
      boolean boolean0 = setUniqueList0.removeAll(setUniqueList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("(o");
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      linkedList0.add("4");
      String string0 = setUniqueList0.set(0, "4");
      assertFalse(linkedList0.contains("(o"));
      assertEquals("(o", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      setUniqueList0.set(0, "");
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.set(0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      boolean boolean0 = setUniqueList0.add("EjTblat|PXRg/6R{o");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<LinkedHashSet<Integer>> linkedList0 = new LinkedList<LinkedHashSet<Integer>>();
      HashSet<LinkedHashSet<Integer>> hashSet0 = new HashSet<LinkedHashSet<Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      hashSet0.add(linkedHashSet0);
      SetUniqueList<LinkedHashSet<Integer>> setUniqueList0 = new SetUniqueList<LinkedHashSet<Integer>>(linkedList0, hashSet0);
      boolean boolean0 = setUniqueList0.add(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = null;
      try {
        setUniqueList0 = new SetUniqueList<Integer>(linkedList0, (Set<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Set must not be null
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListIterator<HashSet<Object>> listIterator0 = (ListIterator<HashSet<Object>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(listIterator0).previous();
      SetUniqueList.SetListListIterator<HashSet<Object>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<HashSet<Object>>(listIterator0, (Set<HashSet<Object>>) null);
      HashSet<Object> hashSet0 = setUniqueList_SetListListIterator0.previous();
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = new Integer((-1431655746));
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      SetUniqueList.SetListListIterator<Integer> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Integer>(listIterator0, (Set<Integer>) null);
      // Undeclared exception!
      try { 
        setUniqueList_SetListListIterator0.set(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ListIterator does not support set
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList$SetListListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      List<String> list0 = setUniqueList0.subList(0, 0);
      linkedList0.add("");
      // Undeclared exception!
      try { 
        setUniqueList0.addAll(2203, (Collection<? extends String>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      Set<Object> set1 = setUniqueList0.createSetBasedOnList(set0, setUniqueList0);
      assertTrue(set1.equals((Object)set0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = new SetUniqueList<LinkedHashSet<Object>>(linkedList0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.remove((-2144441884));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2144441884, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.collections4.iterators.AbstractIteratorDecorator").when(listIterator0).next();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SetUniqueList.SetListListIterator<String> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<String>(listIterator0, linkedHashSet0);
      SetUniqueList.SetListIterator<String> setUniqueList_SetListIterator0 = new SetUniqueList.SetListIterator<String>(setUniqueList_SetListListIterator0, linkedHashSet0);
      String string0 = setUniqueList_SetListIterator0.next();
      assertEquals("org.apache.commons.collections4.iterators.AbstractIteratorDecorator", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SetUniqueList.SetListListIterator<String> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<String>(listIterator0, linkedHashSet0);
      SetUniqueList.SetListIterator<String> setUniqueList_SetListIterator0 = new SetUniqueList.SetListIterator<String>(setUniqueList_SetListListIterator0, linkedHashSet0);
      setUniqueList_SetListIterator0.remove();
  }
}
