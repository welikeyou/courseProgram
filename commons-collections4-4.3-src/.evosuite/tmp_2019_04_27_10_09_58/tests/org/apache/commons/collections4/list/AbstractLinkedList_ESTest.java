/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 02:53:32 GMT 2019
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Consumer;
import org.apache.commons.collections4.list.AbstractLinkedList;
import org.apache.commons.collections4.list.CursorableLinkedList;
import org.apache.commons.collections4.list.NodeCachingLinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractLinkedList_ESTest extends AbstractLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(2585);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(nodeCachingLinkedList0, 0, 0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      abstractLinkedList_LinkedSubList0.expectedModCount = 20;
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubList0.add((String) null);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      boolean boolean0 = nodeCachingLinkedList0.add("(this Collection)");
      assertTrue(nodeCachingLinkedList0.contains("(this Collection)"));
      assertTrue(boolean0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(nodeCachingLinkedList0, 1, 1);
      assertTrue(nodeCachingLinkedList0.contains("(this Collection)"));
      assertFalse(abstractLinkedList_LinkedSubList0.contains("(this Collection)"));
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(nodeCachingLinkedList0, 0, 0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = abstractLinkedList_LinkedSubList0.add(integer0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertTrue(nodeCachingLinkedList0.contains(integer0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertTrue(abstractLinkedList_LinkedSubList0.contains(integer0));
      assertTrue(boolean0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      
      boolean boolean1 = abstractLinkedList_LinkedSubList0.add(integer0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertTrue(nodeCachingLinkedList0.contains(integer0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertTrue(abstractLinkedList_LinkedSubList0.contains(integer0));
      assertTrue(boolean1);
      assertEquals(2, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      Integer integer0 = new Integer(148);
      assertEquals(148, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = nodeCachingLinkedList0.add((Object) null);
      assertFalse(nodeCachingLinkedList0.contains(148));
      assertTrue(boolean0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      
      boolean boolean1 = nodeCachingLinkedList0.add((Object) integer0);
      assertTrue(nodeCachingLinkedList0.contains(148));
      assertTrue(boolean1);
      assertEquals(2, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      nodeCachingLinkedList0.hashCode();
      assertTrue(nodeCachingLinkedList0.contains(148));
      assertEquals(2, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList1.size());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertNotNull(cursorableLinkedList1);
      
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>((-150));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      boolean boolean0 = nodeCachingLinkedList0.add("");
      assertTrue(nodeCachingLinkedList0.contains(""));
      assertTrue(boolean0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      
      boolean boolean1 = nodeCachingLinkedList0.equals(cursorableLinkedList1);
      assertFalse(cursorableLinkedList1.contains((-150)));
      assertTrue(nodeCachingLinkedList0.contains(""));
      assertFalse(boolean1);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList1.size());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(nodeCachingLinkedList0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      abstractLinkedList_LinkedSubList0.rangeCheck(0, 2051);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(2585);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(nodeCachingLinkedList0, 0, 0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      boolean boolean0 = abstractLinkedList_LinkedSubList0.add((String) null);
      assertTrue(boolean0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      
      AbstractLinkedList.LinkedSubListIterator<String> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<String>(abstractLinkedList_LinkedSubList0, 0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertEquals((-1), abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertTrue(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertNotNull(abstractLinkedList_LinkedSubListIterator0);
      
      Object object0 = abstractLinkedList_LinkedSubListIterator0.next();
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertTrue(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertEquals(1, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale locale0 = new Locale("P4a8Fy/5qa!", "P4a8Fy/5qa!");
      assertEquals("p4a8fy/5qa!_P4A8FY/5QA!", locale0.toString());
      assertEquals("P4A8FY/5QA!", locale0.getCountry());
      assertEquals("p4a8fy/5qa!", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains("P4a8Fy/5qa!"));
      assertEquals("p4a8fy/5qa!_P4A8FY/5QA!", locale0.toString());
      assertEquals("P4A8FY/5QA!", locale0.getCountry());
      assertEquals("p4a8fy/5qa!", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>(set0);
      assertFalse(set0.contains("P4a8Fy/5qa!"));
      assertFalse(cursorableLinkedList0.contains("P4a8Fy/5qa!"));
      assertEquals("p4a8fy/5qa!_P4A8FY/5QA!", locale0.toString());
      assertEquals("P4A8FY/5QA!", locale0.getCountry());
      assertEquals("p4a8fy/5qa!", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(cursorableLinkedList0);
      assertFalse(set0.contains("P4a8Fy/5qa!"));
      assertFalse(cursorableLinkedList0.contains("P4a8Fy/5qa!"));
      assertFalse(nodeCachingLinkedList0.contains("P4a8Fy/5qa!"));
      assertEquals("p4a8fy/5qa!_P4A8FY/5QA!", locale0.toString());
      assertEquals("P4A8FY/5QA!", locale0.getCountry());
      assertEquals("p4a8fy/5qa!", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = new AbstractLinkedList.Node<String>();
      assertNotNull(abstractLinkedList_Node0);
      
      AbstractLinkedList.Node<String> abstractLinkedList_Node1 = new AbstractLinkedList.Node<String>(abstractLinkedList_Node0, abstractLinkedList_Node0, "");
      assertNotNull(abstractLinkedList_Node1);
      
      nodeCachingLinkedList0.updateNode(abstractLinkedList_Node1, "<oLy'g");
      assertFalse(set0.contains(""));
      assertFalse(cursorableLinkedList0.contains(""));
      assertFalse(nodeCachingLinkedList0.contains(""));
      assertEquals("p4a8fy/5qa!_P4A8FY/5QA!", locale0.toString());
      assertEquals("P4A8FY/5QA!", locale0.getCountry());
      assertEquals("p4a8fy/5qa!", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      List<Locale.LanguageRange> list0 = cursorableLinkedList0.subList(0, 0);
      assertEquals(0, linkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(550);
      assertFalse(nodeCachingLinkedList0.contains(550));
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>();
      assertNotNull(abstractLinkedList_Node0);
      
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node1 = new AbstractLinkedList.Node<Integer>(abstractLinkedList_Node0, abstractLinkedList_Node0, (Integer) null);
      assertNotNull(abstractLinkedList_Node1);
      
      nodeCachingLinkedList0.removeNode(abstractLinkedList_Node1);
      assertFalse(nodeCachingLinkedList0.contains(550));
      assertEquals((-1), nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(762);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = new AbstractLinkedList.Node<String>();
      assertNotNull(abstractLinkedList_Node0);
      
      nodeCachingLinkedList0.addNodeBefore(abstractLinkedList_Node0, (String) null);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = nodeCachingLinkedList0.createHeaderNode();
      assertEquals(0, linkedList0.size());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_Node0);
      
      nodeCachingLinkedList0.addNodeAfter(abstractLinkedList_Node0, abstractLinkedList_Node0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(2549);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = new AbstractLinkedList.Node<String>();
      assertNotNull(abstractLinkedList_Node0);
      
      nodeCachingLinkedList0.addNode(abstractLinkedList_Node0, abstractLinkedList_Node0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(nodeCachingLinkedList0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>(cursorableLinkedList0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertEquals(0, nodeCachingLinkedList1.size());
      assertTrue(nodeCachingLinkedList1.isEmpty());
      assertNotNull(nodeCachingLinkedList1);
      
      nodeCachingLinkedList1.add(0, (Object) "E#GnCn-_0uA:#");
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(cursorableLinkedList0.contains(0));
      assertTrue(nodeCachingLinkedList1.contains("E#GnCn-_0uA:#"));
      assertFalse(nodeCachingLinkedList1.contains(0));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertEquals(1, nodeCachingLinkedList1.size());
      assertFalse(nodeCachingLinkedList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>("");
      assertNotNull(abstractLinkedList_Node0);
      
      abstractLinkedList_Node0.setValue((Object) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(2585);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(nodeCachingLinkedList0, 0, 0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      AbstractLinkedList.LinkedSubListIterator<String> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<String>(abstractLinkedList_LinkedSubList0, 0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertEquals((-1), abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertNotNull(abstractLinkedList_LinkedSubListIterator0);
      
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NodeCachingLinkedList<InputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<InputStream>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedSubList<InputStream> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<InputStream>(nodeCachingLinkedList0, 0, 0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      AbstractLinkedList.LinkedSubListIterator<InputStream> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<InputStream>(abstractLinkedList_LinkedSubList0, 0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertEquals((-1), abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertNotNull(abstractLinkedList_LinkedSubListIterator0);
      
      int int0 = abstractLinkedList_LinkedSubListIterator0.nextIndex();
      assertEquals(0, int0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertEquals((-1), abstractLinkedList_LinkedSubListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(nodeCachingLinkedList0, 0, 0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      int int0 = abstractLinkedList_LinkedSubList0.size();
      assertFalse(nodeCachingLinkedList0.contains(int0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(int0));
      assertEquals(0, int0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubList0.rangeCheck(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' out of bounds for size '0'
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      Iterator<Object> iterator0 = abstractLinkedList_LinkedSubList0.iterator();
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NodeCachingLinkedList<Locale.LanguageRange> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale.LanguageRange>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Locale.LanguageRange> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Locale.LanguageRange>(nodeCachingLinkedList0, 0, 0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      abstractLinkedList_LinkedSubList0.checkModCount();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      boolean boolean0 = abstractLinkedList_LinkedSubList0.addAll(0, (Collection<? extends String>) cursorableLinkedList0);
      assertFalse(boolean0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(nodeCachingLinkedList0, 0, 0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      abstractLinkedList_LinkedSubList0.add(0, integer0);
      assertTrue(nodeCachingLinkedList0.contains(0));
      assertTrue(abstractLinkedList_LinkedSubList0.contains(0));
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedListIterator<LinkedList<Object>> abstractLinkedList_LinkedListIterator0 = new AbstractLinkedList.LinkedListIterator<LinkedList<Object>>(cursorableLinkedList0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertEquals(0, abstractLinkedList_LinkedListIterator0.nextIndex());
      assertEquals((-1), abstractLinkedList_LinkedListIterator0.previousIndex());
      assertFalse(abstractLinkedList_LinkedListIterator0.hasPrevious());
      assertFalse(abstractLinkedList_LinkedListIterator0.hasNext());
      assertNotNull(abstractLinkedList_LinkedListIterator0);
      
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale locale0 = new Locale("QGU!I_=\"E~{GNX-(t", "QGU!I_=\"E~{GNX-(t");
      assertEquals("qgu!i_=\"e~{gnx-(t_QGU!I_=\"E~{GNX-(T", locale0.toString());
      assertEquals("QGU!I_=\"E~{GNX-(T", locale0.getCountry());
      assertEquals("qgu!i_=\"e~{gnx-(t", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("QGU!I_=\"E~{GNX-(t"));
      assertEquals("qgu!i_=\"e~{gnx-(t_QGU!I_=\"E~{GNX-(T", locale0.toString());
      assertEquals("QGU!I_=\"E~{GNX-(T", locale0.getCountry());
      assertEquals("qgu!i_=\"e~{gnx-(t", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>(set0);
      assertFalse(set0.contains("QGU!I_=\"E~{GNX-(t"));
      assertFalse(cursorableLinkedList0.contains("QGU!I_=\"E~{GNX-(t"));
      assertEquals("qgu!i_=\"e~{gnx-(t_QGU!I_=\"E~{GNX-(T", locale0.toString());
      assertEquals("QGU!I_=\"E~{GNX-(T", locale0.getCountry());
      assertEquals("qgu!i_=\"e~{gnx-(t", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 0, 0);
      assertFalse(set0.contains("QGU!I_=\"E~{GNX-(t"));
      assertFalse(cursorableLinkedList0.contains("QGU!I_=\"E~{GNX-(t"));
      assertFalse(abstractLinkedList_LinkedSubList0.contains("QGU!I_=\"E~{GNX-(t"));
      assertEquals("qgu!i_=\"e~{gnx-(t_QGU!I_=\"E~{GNX-(T", locale0.toString());
      assertEquals("QGU!I_=\"E~{GNX-(T", locale0.getCountry());
      assertEquals("qgu!i_=\"e~{gnx-(t", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      AbstractLinkedList.LinkedSubListIterator<String> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<String>(abstractLinkedList_LinkedSubList0, 0);
      assertFalse(set0.contains("QGU!I_=\"E~{GNX-(t"));
      assertFalse(cursorableLinkedList0.contains("QGU!I_=\"E~{GNX-(t"));
      assertFalse(abstractLinkedList_LinkedSubList0.contains("QGU!I_=\"E~{GNX-(t"));
      assertEquals("qgu!i_=\"e~{gnx-(t_QGU!I_=\"E~{GNX-(T", locale0.toString());
      assertEquals("QGU!I_=\"E~{GNX-(T", locale0.getCountry());
      assertEquals("qgu!i_=\"e~{gnx-(t", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertEquals((-1), abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertNotNull(abstractLinkedList_LinkedSubListIterator0);
      
      int int0 = abstractLinkedList_LinkedSubListIterator0.previousIndex();
      assertFalse(set0.contains("QGU!I_=\"E~{GNX-(t"));
      assertFalse(cursorableLinkedList0.contains("QGU!I_=\"E~{GNX-(t"));
      assertFalse(abstractLinkedList_LinkedSubList0.contains("QGU!I_=\"E~{GNX-(t"));
      assertEquals((-1), int0);
      assertEquals("qgu!i_=\"e~{gnx-(t_QGU!I_=\"E~{GNX-(T", locale0.toString());
      assertEquals("QGU!I_=\"E~{GNX-(T", locale0.getCountry());
      assertEquals("qgu!i_=\"e~{gnx-(t", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertEquals((-1), abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Object>(cursorableLinkedList0, 0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList_Cursor0);
      
      boolean boolean0 = cursorableLinkedList_Cursor0.hasPrevious();
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(boolean0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList.Cursor<String> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<String>(cursorableLinkedList0, 0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList_Cursor0);
      
      boolean boolean0 = cursorableLinkedList_Cursor0.hasNext();
      assertFalse(boolean0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertEquals(0, cursorableLinkedList1.size());
      assertNotNull(cursorableLinkedList1);
      
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList1, 0, 0);
      assertFalse(cursorableLinkedList1.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertEquals(0, cursorableLinkedList1.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      AbstractLinkedList.LinkedSubListIterator<Object> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<Object>(abstractLinkedList_LinkedSubList0, 0);
      assertFalse(cursorableLinkedList1.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertEquals(0, cursorableLinkedList1.size());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertEquals((-1), abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertNotNull(abstractLinkedList_LinkedSubListIterator0);
      
      try { 
        abstractLinkedList_LinkedSubListIterator0.getLastNodeReturned();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedListIterator<LinkedList<Object>> abstractLinkedList_LinkedListIterator0 = new AbstractLinkedList.LinkedListIterator<LinkedList<Object>>(cursorableLinkedList0, 0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, abstractLinkedList_LinkedListIterator0.nextIndex());
      assertEquals((-1), abstractLinkedList_LinkedListIterator0.previousIndex());
      assertFalse(abstractLinkedList_LinkedListIterator0.hasNext());
      assertFalse(abstractLinkedList_LinkedListIterator0.hasPrevious());
      assertNotNull(abstractLinkedList_LinkedListIterator0);
      
      abstractLinkedList_LinkedListIterator0.checkModCount();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, abstractLinkedList_LinkedListIterator0.nextIndex());
      assertEquals((-1), abstractLinkedList_LinkedListIterator0.previousIndex());
      assertFalse(abstractLinkedList_LinkedListIterator0.hasNext());
      assertFalse(abstractLinkedList_LinkedListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = new Locale("QGU!I_=\"E~{GNX-(t", "QGU!I_=\"E~{GNX-(t");
      assertEquals("qgu!i_=\"e~{gnx-(t_QGU!I_=\"E~{GNX-(T", locale0.toString());
      assertEquals("QGU!I_=\"E~{GNX-(T", locale0.getCountry());
      assertEquals("qgu!i_=\"e~{gnx-(t", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("QGU!I_=\"E~{GNX-(t"));
      assertEquals("qgu!i_=\"e~{gnx-(t_QGU!I_=\"E~{GNX-(T", locale0.toString());
      assertEquals("QGU!I_=\"E~{GNX-(T", locale0.getCountry());
      assertEquals("qgu!i_=\"e~{gnx-(t", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>(set0);
      assertFalse(set0.contains("QGU!I_=\"E~{GNX-(t"));
      assertFalse(cursorableLinkedList0.contains("QGU!I_=\"E~{GNX-(t"));
      assertEquals("qgu!i_=\"e~{gnx-(t_QGU!I_=\"E~{GNX-(T", locale0.toString());
      assertEquals("QGU!I_=\"E~{GNX-(T", locale0.getCountry());
      assertEquals("qgu!i_=\"e~{gnx-(t", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 0, 0);
      assertFalse(set0.contains("QGU!I_=\"E~{GNX-(t"));
      assertFalse(cursorableLinkedList0.contains("QGU!I_=\"E~{GNX-(t"));
      assertFalse(abstractLinkedList_LinkedSubList0.contains("QGU!I_=\"E~{GNX-(t"));
      assertEquals("qgu!i_=\"e~{gnx-(t_QGU!I_=\"E~{GNX-(T", locale0.toString());
      assertEquals("QGU!I_=\"E~{GNX-(T", locale0.getCountry());
      assertEquals("qgu!i_=\"e~{gnx-(t", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      AbstractLinkedList.LinkedSubListIterator<String> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<String>(abstractLinkedList_LinkedSubList0, 0);
      assertFalse(set0.contains("QGU!I_=\"E~{GNX-(t"));
      assertFalse(cursorableLinkedList0.contains("QGU!I_=\"E~{GNX-(t"));
      assertFalse(abstractLinkedList_LinkedSubList0.contains("QGU!I_=\"E~{GNX-(t"));
      assertEquals("qgu!i_=\"e~{gnx-(t_QGU!I_=\"E~{GNX-(T", locale0.toString());
      assertEquals("QGU!I_=\"E~{GNX-(T", locale0.getCountry());
      assertEquals("qgu!i_=\"e~{gnx-(t", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertEquals((-1), abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertNotNull(abstractLinkedList_LinkedSubListIterator0);
      
      abstractLinkedList_LinkedSubListIterator0.add("QGU!I_=\"E~{GNX-(t");
      assertFalse(set0.contains("QGU!I_=\"E~{GNX-(t"));
      assertTrue(cursorableLinkedList0.contains("QGU!I_=\"E~{GNX-(t"));
      assertTrue(abstractLinkedList_LinkedSubList0.contains("QGU!I_=\"E~{GNX-(t"));
      assertEquals("qgu!i_=\"e~{gnx-(t_QGU!I_=\"E~{GNX-(T", locale0.toString());
      assertEquals("QGU!I_=\"E~{GNX-(T", locale0.getCountry());
      assertEquals("qgu!i_=\"e~{gnx-(t", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertTrue(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertEquals(1, abstractLinkedList_LinkedSubListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      nodeCachingLinkedList0.removeAllNodes();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NodeCachingLinkedList<Locale.LanguageRange> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale.LanguageRange>(0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      nodeCachingLinkedList0.init();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = cursorableLinkedList0.add("");
      assertTrue(cursorableLinkedList0.contains(""));
      assertTrue(boolean0);
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      
      cursorableLinkedList0.sort(comparator0);
      assertTrue(cursorableLinkedList0.contains(""));
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList<String> cursorableLinkedList1 = new CursorableLinkedList<String>();
      assertEquals(0, cursorableLinkedList1.size());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertNotNull(cursorableLinkedList1);
      
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      AbstractLinkedList.LinkedSubListIterator<Object> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<Object>(abstractLinkedList_LinkedSubList0, 0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertEquals((-1), abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertNotNull(abstractLinkedList_LinkedSubListIterator0);
      
      abstractLinkedList_LinkedSubListIterator0.add(cursorableLinkedList1);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(1, cursorableLinkedList0.size());
      assertEquals(0, cursorableLinkedList1.size());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertTrue(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertEquals(1, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      
      CursorableLinkedList cursorableLinkedList2 = (CursorableLinkedList)abstractLinkedList_LinkedSubList0.get(0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(1, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList2.isEmpty());
      assertEquals(0, cursorableLinkedList2.size());
      assertNotNull(cursorableLinkedList2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(31);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      boolean boolean0 = nodeCachingLinkedList0.add("jG/RKV\"3FNa`TF");
      assertTrue(nodeCachingLinkedList0.contains("jG/RKV\"3FNa`TF"));
      assertTrue(boolean0);
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals(1, nodeCachingLinkedList0.size());
      
      int int0 = nodeCachingLinkedList0.size();
      assertTrue(nodeCachingLinkedList0.contains("jG/RKV\"3FNa`TF"));
      assertEquals(1, int0);
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(31);
      assertFalse(nodeCachingLinkedList0.contains(31));
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      NodeCachingLinkedList<String> nodeCachingLinkedList1 = new NodeCachingLinkedList<String>(31);
      assertEquals(0, nodeCachingLinkedList1.size());
      assertTrue(nodeCachingLinkedList1.isEmpty());
      assertNotNull(nodeCachingLinkedList1);
      
      boolean boolean0 = nodeCachingLinkedList0.addFirst(nodeCachingLinkedList1);
      assertFalse(nodeCachingLinkedList0.contains(31));
      assertTrue(boolean0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList1.size());
      assertTrue(nodeCachingLinkedList1.isEmpty());
      
      NodeCachingLinkedList nodeCachingLinkedList2 = (NodeCachingLinkedList)nodeCachingLinkedList0.set(0, object0);
      assertFalse(nodeCachingLinkedList0.contains(31));
      assertTrue(nodeCachingLinkedList0.contains(object0));
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertTrue(nodeCachingLinkedList2.isEmpty());
      assertEquals(0, nodeCachingLinkedList2.size());
      assertNotNull(nodeCachingLinkedList2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CursorableLinkedList<InputStream> cursorableLinkedList0 = new CursorableLinkedList<InputStream>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      boolean boolean0 = cursorableLinkedList0.add((InputStream) null);
      assertTrue(boolean0);
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(1, cursorableLinkedList0.size());
      
      NodeCachingLinkedList<InputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<InputStream>(cursorableLinkedList0);
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(1, cursorableLinkedList0.size());
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      InputStream inputStream0 = nodeCachingLinkedList0.removeLast();
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(1, cursorableLinkedList0.size());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NodeCachingLinkedList<Locale> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      boolean boolean0 = nodeCachingLinkedList0.add(locale0);
      assertTrue(nodeCachingLinkedList0.contains(locale0));
      assertTrue(boolean0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = (Locale)nodeCachingLinkedList0.removeFirst();
      assertFalse(nodeCachingLinkedList0.contains(locale1));
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertNotNull(locale1);
      assertSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(31);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      boolean boolean0 = nodeCachingLinkedList0.add("C");
      assertTrue(nodeCachingLinkedList0.contains("C"));
      assertTrue(boolean0);
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals(1, nodeCachingLinkedList0.size());
      
      ListIterator<String> listIterator0 = nodeCachingLinkedList0.listIterator();
      assertTrue(nodeCachingLinkedList0.contains("C"));
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(nodeCachingLinkedList0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      Iterator<Integer> iterator0 = cursorableLinkedList0.iterator();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(set0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      boolean boolean0 = nodeCachingLinkedList0.isEqualValue((Object) null, (Object) null);
      assertTrue(boolean0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      Integer integer0 = new Integer((-2541));
      assertEquals((-2541), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = nodeCachingLinkedList0.isEqualValue(integer0, locale0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(boolean0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NodeCachingLinkedList<InputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<InputStream>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      CursorableLinkedList<InputStream> cursorableLinkedList0 = new CursorableLinkedList<InputStream>(nodeCachingLinkedList0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      boolean boolean0 = cursorableLinkedList0.isEmpty();
      assertTrue(boolean0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = cursorableLinkedList0.getNode(0, true);
      assertFalse(cursorableLinkedList0.contains(0));
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      boolean boolean0 = nodeCachingLinkedList0.add("g<x?T*o*k");
      assertTrue(nodeCachingLinkedList0.contains("g<x?T*o*k"));
      assertTrue(boolean0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      
      String string0 = nodeCachingLinkedList0.getLast();
      assertTrue(nodeCachingLinkedList0.contains(string0));
      assertEquals("g<x?T*o*k", string0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(2524);
      assertFalse(nodeCachingLinkedList0.contains(2524));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      boolean boolean0 = nodeCachingLinkedList0.add((Object) null);
      assertFalse(nodeCachingLinkedList0.contains(2524));
      assertTrue(boolean0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      
      Object object0 = nodeCachingLinkedList0.getFirst();
      assertFalse(nodeCachingLinkedList0.contains(2524));
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      ListIterator<Object> listIterator0 = cursorableLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      Iterator<String> iterator0 = cursorableLinkedList0.createSubListIterator(abstractLinkedList_LinkedSubList0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = cursorableLinkedList0.createNode(locale0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.updateNode((AbstractLinkedList.Node<Object>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.toArray((InputStream[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.subList(2109, (-744));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2109) > toIndex(-744)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NodeCachingLinkedList<Locale> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      boolean boolean0 = nodeCachingLinkedList0.add((Locale) null);
      assertTrue(boolean0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(cursorableLinkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.removeNode((AbstractLinkedList.Node<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      boolean boolean0 = cursorableLinkedList0.add("");
      assertTrue(cursorableLinkedList0.contains(""));
      assertTrue(boolean0);
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(1, cursorableLinkedList0.size());
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>(set0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.listIterator((-1471));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (-1471) less than zero.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      cursorableLinkedList0.size = (-16);
      assertEquals((-16), cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.listIterator();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-16).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(2400);
      assertFalse(nodeCachingLinkedList0.contains(2400));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      try { 
        nodeCachingLinkedList0.getNode(343, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (343) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NodeCachingLinkedList<Locale> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.doWriteObject((ObjectOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(31);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.createSubListListIterator((AbstractLinkedList.LinkedSubList<String>) null, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(nodeCachingLinkedList0, 0, 0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.list.NodeCachingLinkedList cannot be cast to org.apache.commons.collections4.list.CursorableLinkedList
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$SubCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.createSubListIterator((AbstractLinkedList.LinkedSubList<Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$SubCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>((-150));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>("1^+GnPN");
      assertNotNull(abstractLinkedList_Node0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.addNodeBefore(abstractLinkedList_Node0, abstractLinkedList_Node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<String>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<String>>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      AbstractLinkedList.Node<LinkedList<String>> abstractLinkedList_Node0 = new AbstractLinkedList.Node<LinkedList<String>>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(abstractLinkedList_Node0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.addNodeAfter(abstractLinkedList_Node0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(2242);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.addNode((AbstractLinkedList.Node<String>) null, (AbstractLinkedList.Node<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.addAll((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      cursorableLinkedList0.size = (-1510);
      assertEquals((-1510), cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.addAll((Collection<? extends Locale.LanguageRange>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (-1510) less than zero.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NodeCachingLinkedList<Locale.LanguageRange> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale.LanguageRange>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.addAll((-1), (Collection<? extends Locale.LanguageRange>) nodeCachingLinkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (-1) less than zero.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      boolean boolean0 = nodeCachingLinkedList0.addAll(0, (Collection<? extends Integer>) nodeCachingLinkedList0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertTrue(boolean0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = cursorableLinkedList0.toArray(stringArray0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(2585);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(nodeCachingLinkedList0, 0, 0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      boolean boolean0 = abstractLinkedList_LinkedSubList0.add((String) null);
      assertTrue(boolean0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      
      String[] stringArray0 = new String[2];
      String[] stringArray1 = nodeCachingLinkedList0.toArray(stringArray0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(744);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      boolean boolean0 = cursorableLinkedList0.contains(nodeCachingLinkedList0);
      assertFalse(boolean0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = cursorableLinkedList0.addLast(integer0);
      assertTrue(cursorableLinkedList0.contains(0));
      assertTrue(boolean0);
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(2909);
      assertFalse(nodeCachingLinkedList0.contains(2909));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      int int0 = nodeCachingLinkedList0.size();
      assertFalse(nodeCachingLinkedList0.contains(2909));
      assertEquals(0, int0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      AbstractLinkedList.Node<LinkedList<Locale.LanguageRange>> abstractLinkedList_Node0 = new AbstractLinkedList.Node<LinkedList<Locale.LanguageRange>>();
      assertNotNull(abstractLinkedList_Node0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      AbstractLinkedList.Node<LinkedList<Locale.LanguageRange>> abstractLinkedList_Node1 = new AbstractLinkedList.Node<LinkedList<Locale.LanguageRange>>(abstractLinkedList_Node0, abstractLinkedList_Node0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(abstractLinkedList_Node1);
      
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      boolean boolean0 = cursorableLinkedList0.addAll((Collection<?>) abstractLinkedList_Node1.value);
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      nodeCachingLinkedList0.forEach(consumer0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NodeCachingLinkedList<Locale.LanguageRange> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale.LanguageRange>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      ListIterator<Locale.LanguageRange> listIterator0 = nodeCachingLinkedList0.listIterator();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>(nodeCachingLinkedList0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList1.size());
      assertTrue(nodeCachingLinkedList1.isEmpty());
      assertNotNull(nodeCachingLinkedList1);
      
      ListIterator<Object> listIterator0 = nodeCachingLinkedList1.listIterator(0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(nodeCachingLinkedList1.contains(0));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList1.size());
      assertTrue(nodeCachingLinkedList1.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(2585);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(nodeCachingLinkedList0, 0, 0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      boolean boolean0 = nodeCachingLinkedList0.add("");
      assertTrue(nodeCachingLinkedList0.contains(""));
      assertTrue(boolean0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubList0.add((String) null);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(nodeCachingLinkedList0, (byte)0, 0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubList0.get((-15));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-15' out of bounds for size '0'
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = null;
      try {
        abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 31, 31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 31
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList.Cursor<String> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList_Cursor0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList_Cursor0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Already at start of list.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      AbstractLinkedList.LinkedSubListIterator<Object> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<Object>(abstractLinkedList_LinkedSubList0, 0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertEquals((-1), abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertNotNull(abstractLinkedList_LinkedSubListIterator0);
      
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No element at index 0.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList<String> cursorableLinkedList1 = new CursorableLinkedList<String>();
      assertTrue(cursorableLinkedList1.isEmpty());
      assertEquals(0, cursorableLinkedList1.size());
      assertNotNull(cursorableLinkedList1);
      
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      AbstractLinkedList.LinkedSubListIterator<Object> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<Object>(abstractLinkedList_LinkedSubList0, 0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertEquals((-1), abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertNotNull(abstractLinkedList_LinkedSubListIterator0);
      
      boolean boolean0 = cursorableLinkedList0.add((Object) abstractLinkedList_LinkedSubList0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertTrue(boolean0);
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubListIterator0.add(cursorableLinkedList1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      boolean boolean0 = nodeCachingLinkedList0.add("(this Collection)");
      assertTrue(nodeCachingLinkedList0.contains("(this Collection)"));
      assertTrue(boolean0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("rg.apache.commons.collctions4.list.AstractLinkedList$LinkedSubListIterator");
      assertNotNull(mockPrintStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      assertNotNull(objectOutputStream0);
      
      nodeCachingLinkedList0.doWriteObject(objectOutputStream0);
      assertFalse(nodeCachingLinkedList0.contains("rg.apache.commons.collctions4.list.AstractLinkedList$LinkedSubListIterator"));
      assertTrue(nodeCachingLinkedList0.contains("(this Collection)"));
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList<String> cursorableLinkedList1 = new CursorableLinkedList<String>();
      assertTrue(cursorableLinkedList1.isEmpty());
      assertEquals(0, cursorableLinkedList1.size());
      assertNotNull(cursorableLinkedList1);
      
      boolean boolean0 = cursorableLinkedList0.add((Object) cursorableLinkedList1);
      assertTrue(boolean0);
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertEquals(0, cursorableLinkedList1.size());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((Locale.LanguageRange) null);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList2 = new CursorableLinkedList<Locale.LanguageRange>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, cursorableLinkedList2.size());
      assertFalse(cursorableLinkedList2.isEmpty());
      assertNotNull(cursorableLinkedList2);
      
      boolean boolean2 = cursorableLinkedList2.containsAll(cursorableLinkedList0);
      assertFalse(boolean2);
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertEquals(1, cursorableLinkedList2.size());
      assertFalse(cursorableLinkedList2.isEmpty());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      Integer integer0 = new Integer(1607);
      assertEquals(1607, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = nodeCachingLinkedList0.add(integer0);
      assertTrue(nodeCachingLinkedList0.contains(integer0));
      assertTrue(boolean0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      
      boolean boolean1 = nodeCachingLinkedList0.add(integer0);
      assertTrue(nodeCachingLinkedList0.contains(integer0));
      assertTrue(boolean1);
      assertEquals(2, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      String string0 = nodeCachingLinkedList0.toString();
      assertTrue(nodeCachingLinkedList0.contains(integer0));
      assertEquals("[1607, 1607]", string0);
      assertEquals(2, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CursorableLinkedList<InputStream> cursorableLinkedList0 = new CursorableLinkedList<InputStream>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      String string0 = cursorableLinkedList0.toString();
      assertEquals("[]", string0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      boolean boolean0 = linkedList0.add((Object) locale0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      NodeCachingLinkedList<Locale> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale>(31);
      assertFalse(nodeCachingLinkedList0.contains(locale0));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      Locale locale1 = new Locale("O/!N}QI!^CH.:U");
      assertEquals("o/!n}qi!^ch.:u", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("o/!n}qi!^ch.:u", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      boolean boolean1 = nodeCachingLinkedList0.add(locale1);
      assertFalse(nodeCachingLinkedList0.contains(locale0));
      assertTrue(nodeCachingLinkedList0.contains(locale1));
      assertTrue(boolean1);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals("o/!n}qi!^ch.:u", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("o/!n}qi!^ch.:u", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(locale1, locale0);
      
      boolean boolean2 = nodeCachingLinkedList0.equals(linkedList0);
      assertFalse(linkedList0.contains("O/!N}QI!^CH.:U"));
      assertFalse(nodeCachingLinkedList0.contains(locale0));
      assertTrue(nodeCachingLinkedList0.contains(locale1));
      assertFalse(boolean2);
      assertEquals(1, linkedList0.size());
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      boolean boolean0 = linkedList0.add((Object) locale0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      NodeCachingLinkedList<Locale> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale>(31);
      assertFalse(nodeCachingLinkedList0.contains(locale0));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      boolean boolean1 = nodeCachingLinkedList0.add(locale0);
      assertTrue(nodeCachingLinkedList0.contains(locale0));
      assertTrue(boolean1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = nodeCachingLinkedList0.equals(linkedList0);
      assertFalse(linkedList0.contains(31));
      assertTrue(nodeCachingLinkedList0.contains(locale0));
      assertTrue(boolean2);
      assertEquals(1, linkedList0.size());
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 741);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(pushbackInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, pushbackInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(sequenceInputStream0);
      
      boolean boolean0 = cursorableLinkedList0.equals(sequenceInputStream0);
      assertFalse(cursorableLinkedList0.contains(741));
      assertFalse(boolean0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertFalse(fileDescriptor0.valid());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList<String> cursorableLinkedList1 = new CursorableLinkedList<String>();
      assertEquals(0, cursorableLinkedList1.size());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertNotNull(cursorableLinkedList1);
      
      boolean boolean0 = cursorableLinkedList0.add((Object) cursorableLinkedList1);
      assertTrue(boolean0);
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(1, cursorableLinkedList0.size());
      assertEquals(0, cursorableLinkedList1.size());
      assertTrue(cursorableLinkedList1.isEmpty());
      
      boolean boolean1 = cursorableLinkedList1.equals(cursorableLinkedList0);
      assertFalse(boolean1);
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(1, cursorableLinkedList0.size());
      assertEquals(0, cursorableLinkedList1.size());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(linkedList0);
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(cursorableLinkedList0);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(31);
      nodeCachingLinkedList0.add("jG/RKV\"3FNa`TF");
      nodeCachingLinkedList0.removeLast();
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(91);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.removeFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(91);
      nodeCachingLinkedList0.add((String) null);
      nodeCachingLinkedList0.removeFirst();
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NodeCachingLinkedList<Locale.LanguageRange> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.getLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NodeCachingLinkedList<Locale> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale>();
      Locale locale0 = Locale.JAPAN;
      AbstractLinkedList.Node<Locale> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Locale>(locale0);
      nodeCachingLinkedList0.header = abstractLinkedList_Node0;
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.getLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(nodeCachingLinkedList0);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.getFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(31);
      nodeCachingLinkedList0.add("jG/RKV\"3FNa`TF");
      nodeCachingLinkedList0.getFirst();
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NodeCachingLinkedList<Locale> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale>();
      nodeCachingLinkedList0.add((Locale) null);
      boolean boolean0 = nodeCachingLinkedList0.retainAll(nodeCachingLinkedList0);
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(744);
      nodeCachingLinkedList0.add("Zx5<fGP?R#%\"Qc");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = nodeCachingLinkedList0.removeAll(linkedList0);
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CursorableLinkedList<LinkedList<Locale.LanguageRange>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Locale.LanguageRange>>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      cursorableLinkedList0.add(linkedList0);
      boolean boolean0 = cursorableLinkedList0.remove((Object) "");
      assertFalse(cursorableLinkedList0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1));
      linkedList0.addFirst(integer0);
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(linkedList0);
      int int0 = nodeCachingLinkedList0.lastIndexOf(linkedList0);
      assertTrue(nodeCachingLinkedList0.contains((-1)));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = new AbstractLinkedList.Node<String>("Sqp-lxt3=AHMj\"xu\"u");
      AbstractLinkedList.Node<String> abstractLinkedList_Node1 = new AbstractLinkedList.Node<String>(abstractLinkedList_Node0, abstractLinkedList_Node0, "Sqp-lxt3=AHMj\"xu\"u");
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      int int0 = cursorableLinkedList0.lastIndexOf(abstractLinkedList_Node1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      NodeCachingLinkedList<Locale> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale>(31);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>(nodeCachingLinkedList0);
      nodeCachingLinkedList0.add(locale0);
      linkedList0.add(locale0);
      boolean boolean0 = nodeCachingLinkedList0.containsAll(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      NodeCachingLinkedList<String> nodeCachingLinkedList1 = new NodeCachingLinkedList<String>(2549);
      nodeCachingLinkedList1.addFirst("Cursor closed");
      int int0 = nodeCachingLinkedList1.indexOf(nodeCachingLinkedList0);
      assertEquals(1, nodeCachingLinkedList1.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>();
      nodeCachingLinkedList0.add("(this Collection)");
      boolean boolean0 = nodeCachingLinkedList0.isEmpty();
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      AbstractLinkedList.LinkedSubListIterator<Object> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<Object>(abstractLinkedList_LinkedSubList0, 0);
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Already at start of list.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(2585);
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(nodeCachingLinkedList0, 0, 0);
      AbstractLinkedList.LinkedSubListIterator<String> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<String>(abstractLinkedList_LinkedSubList0, 0);
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubListIterator0.set((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      ListIterator<Object> listIterator0 = abstractLinkedList_LinkedSubList0.listIterator(0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubList0.remove(741);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '741' out of bounds for size '0'
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubList0.set(0, sequenceInputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' out of bounds for size '0'
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(2585);
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(nodeCachingLinkedList0, 0, 0);
      List<String> list0 = abstractLinkedList_LinkedSubList0.subList(0, 0);
      assertEquals(0, list0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(1);
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(nodeCachingLinkedList0, 0, 0);
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      boolean boolean0 = abstractLinkedList_LinkedSubList0.addAll((Collection<? extends String>) cursorableLinkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList<String> cursorableLinkedList1 = new CursorableLinkedList<String>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      AbstractLinkedList.LinkedSubListIterator<Object> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<Object>(abstractLinkedList_LinkedSubList0, 0);
      abstractLinkedList_LinkedSubListIterator0.add(cursorableLinkedList1);
      Object object0 = abstractLinkedList_LinkedSubListIterator0.previous();
      cursorableLinkedList1.indexOf(object0);
      assertEquals(1, cursorableLinkedList0.size());
      assertTrue(abstractLinkedList_LinkedSubListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(2585);
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.add((String) null);
      assertEquals(1, nodeCachingLinkedList0.size());
      
      abstractLinkedList_LinkedSubList0.clear();
      assertEquals(0, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>(set0);
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
      // Undeclared exception!
      try { 
        cursorableLinkedList1.add(2232, (Object) cursorableLinkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (2232) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.subList((-3129), (-15));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -3129
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.get(926);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (926) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(31);
      nodeCachingLinkedList0.clear();
      assertEquals(0, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(2585);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.add((String) null);
      nodeCachingLinkedList0.set(0, "");
      assertTrue(nodeCachingLinkedList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(31);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.set(0, object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) is the size of the list.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) is the size of the list.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(2549);
      nodeCachingLinkedList0.addFirst("Cursor closed");
      nodeCachingLinkedList0.toArray();
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      Object[] objectArray0 = nodeCachingLinkedList0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      NodeCachingLinkedList<String> nodeCachingLinkedList1 = new NodeCachingLinkedList<String>(0);
      Integer integer0 = new Integer(1607);
      nodeCachingLinkedList0.add(integer0);
      assertFalse(nodeCachingLinkedList0.isEmpty());
      
      boolean boolean0 = nodeCachingLinkedList0.retainAll(nodeCachingLinkedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      Object object0 = abstractLinkedList_Node0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>(set0);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>(cursorableLinkedList0);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node1 = new AbstractLinkedList.Node<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node2 = new AbstractLinkedList.Node<Object>(abstractLinkedList_Node0, abstractLinkedList_Node1, abstractLinkedList_Node1);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node3 = abstractLinkedList_Node2.getPreviousNode();
      assertNotNull(abstractLinkedList_Node3);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = new AbstractLinkedList.Node<String>("Sqp-lxt3=AHMj\"xu\"u");
      AbstractLinkedList.Node<String> abstractLinkedList_Node1 = new AbstractLinkedList.Node<String>(abstractLinkedList_Node0, abstractLinkedList_Node0, "Sqp-lxt3=AHMj\"xu\"u");
      abstractLinkedList_Node0.setNextNode(abstractLinkedList_Node1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer integer0 = new Integer(1607);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>(integer0);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node1 = abstractLinkedList_Node0.getNextNode();
      assertNull(abstractLinkedList_Node1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = new AbstractLinkedList.Node<String>("??");
      AbstractLinkedList.Node<String> abstractLinkedList_Node1 = new AbstractLinkedList.Node<String>();
      abstractLinkedList_Node0.setPreviousNode(abstractLinkedList_Node1);
  }
}
