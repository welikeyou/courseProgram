/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:09:09 GMT 2019
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.trie.KeyAnalyzer;
import org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KeyAnalyzer_ESTest extends KeyAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isValidBitIndex(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isNullBitKey(1394);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isEqualBitKey((-3));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isOutOfBoundsIndex(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      int int0 = stringKeyAnalyzer0.lengthInBits("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      int int0 = stringKeyAnalyzer0.lengthInBits("@S.})");
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      boolean boolean0 = stringKeyAnalyzer0.isPrefix("hF3_xz3OIY8=X", 0, 0, "org.apache.commons.collections4.trie.KeyAnalyzer");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      boolean boolean0 = stringKeyAnalyzer0.isPrefix("e`-YVvsKiXz#=", 0, 16, "csvhyi'p1,ZKJc>f!q?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      boolean boolean0 = stringKeyAnalyzer0.isBitSet("org.apache.commons.collections4.trie.KeyAnalyzer", 3914, (-1350));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      int int0 = stringKeyAnalyzer0.bitsPerElement();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      int int0 = stringKeyAnalyzer0.bitIndex("SieoP2.2`N2", 16, 0, "[6B", 16, 16);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      int int0 = stringKeyAnalyzer0.bitIndex("Cannot determine prefix outside of Character boundaries", 0, 0, "dJ>'w-'M=f vz``", 0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.isPrefix("Al0AlMf1-mZw6", 16, 0, "Al0AlMf1-mZw6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.isPrefix((String) null, 0, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.isPrefix("3(t-&U,PlV}{", (-1), 32768, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot determine prefix outside of Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.isBitSet("", (-501), 144);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.bitIndex("", (-2448), 0, "", 0, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.bitIndex((String) null, 16, 32768, (String) null, 32768, 880);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.bitIndex("", (-2), (-2), "c\"q{gXpBL)cq.2|D9", (-673), (-671));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      int int0 = stringKeyAnalyzer0.compare("3(t-&U,PlV}{", "org.apache.commons.collections4.trie.KeyAnalyzer");
      assertEquals((-60), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      int int0 = stringKeyAnalyzer0.compare((String) null, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      int int0 = stringKeyAnalyzer0.compare((String) null, "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isValidBitIndex(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isValidBitIndex((-2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isNullBitKey((-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isNullBitKey((-2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isEqualBitKey((-2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isEqualBitKey(16);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isOutOfBoundsIndex((-3));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isOutOfBoundsIndex((-673));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      int int0 = stringKeyAnalyzer0.compare("The ofs+ts and lengths must be at haracter bounnaries", (String) null);
      assertEquals(1, int0);
  }
}
