/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:54:18 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.apache.commons.collections4.iterators.IteratorChain;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IteratorChain_ESTest extends IteratorChain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Iterator<Iterator<String>>[] iteratorArray0 = (Iterator<Iterator<String>>[]) Array.newInstance(Iterator.class, 7);
      IteratorChain<Iterator<String>> iteratorChain0 = new IteratorChain<Iterator<String>>();
      iteratorArray0[0] = (Iterator<Iterator<String>>) iteratorChain0;
      IteratorChain<Iterator<String>> iteratorChain1 = new IteratorChain<Iterator<String>>(iteratorChain0, iteratorChain0);
      iteratorArray0[1] = (Iterator<Iterator<String>>) iteratorChain1;
      IteratorChain<Iterator<String>> iteratorChain2 = new IteratorChain<Iterator<String>>(iteratorArray0[0]);
      iteratorChain2.hasNext();
      iteratorArray0[2] = (Iterator<Iterator<String>>) iteratorChain2;
      LinkedList<Iterator<String>> linkedList0 = new LinkedList<Iterator<String>>();
      ListIterator<Iterator<String>> listIterator0 = linkedList0.listIterator((-553));
      // Undeclared exception!
      try { 
        iteratorChain2.addIterator(listIterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -553, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IteratorChain<String> iteratorChain0 = new IteratorChain<String>();
      // Undeclared exception!
      try { 
        iteratorChain0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IteratorChain<String> iteratorChain0 = new IteratorChain<String>();
      IteratorChain<Object> iteratorChain1 = new IteratorChain<Object>(iteratorChain0, iteratorChain0);
      // Undeclared exception!
      try { 
        iteratorChain1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "PPm'x-IOk");
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      linkedList0.offerLast("PPm'x-IOk");
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(listIterator0, listIterator0);
      iteratorChain0.hasNext();
      iteratorChain0.hasNext();
      iteratorChain0.remove();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      IteratorChain<String> iteratorChain0 = new IteratorChain<String>();
      IteratorChain<String> iteratorChain1 = new IteratorChain<String>(iteratorChain0);
      iteratorArray0[0] = (Iterator<String>) iteratorChain1;
      IteratorChain<Object> iteratorChain2 = new IteratorChain<Object>(iteratorArray0);
      iteratorChain2.size();
      iteratorChain2.updateCurrentIterator();
      iteratorChain1.isLocked();
      iteratorChain2.updateCurrentIterator();
      // Undeclared exception!
      try { 
        iteratorChain2.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Iterator<Integer> iterator0 = null;
      IteratorChain<Integer> iteratorChain0 = null;
      try {
        iteratorChain0 = new IteratorChain<Integer>((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IteratorChain<Iterator<String>> iteratorChain0 = new IteratorChain<Iterator<String>>();
      // Undeclared exception!
      try { 
        iteratorChain0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IteratorChain<String> iteratorChain0 = new IteratorChain<String>();
      IteratorChain<Object> iteratorChain1 = new IteratorChain<Object>();
      iteratorChain1.hasNext();
      IteratorChain<Integer> iteratorChain2 = new IteratorChain<Integer>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      iteratorChain2.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        iteratorChain2.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Iterator<String> iterator0 = null;
      IteratorChain<String> iteratorChain0 = null;
      try {
        iteratorChain0 = new IteratorChain<String>((Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>();
      iteratorChain0.isLocked();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>();
      IteratorChain<Integer> iteratorChain1 = new IteratorChain<Integer>();
      iteratorChain0.addIterator(iteratorChain1);
      iteratorChain0.size();
      iteratorChain0.hasNext();
      // Undeclared exception!
      try { 
        iteratorChain1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>();
      iteratorChain0.hasNext();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) iteratorChain0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      predicate3.negate();
      linkedList0.removeIf(predicate3);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      // Undeclared exception!
      try { 
        iteratorChain0.addIterator(listIterator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // IteratorChain cannot be changed after the first use of a method from the Iterator interface
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IteratorChain<String> iteratorChain0 = new IteratorChain<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      iteratorChain0.hasNext();
      IteratorChain<String> iteratorChain1 = new IteratorChain<String>(iteratorChain0);
      // Undeclared exception!
      try { 
        iteratorChain0.addIterator(iteratorChain1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // IteratorChain cannot be changed after the first use of a method from the Iterator interface
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      IteratorChain<String> iteratorChain0 = null;
      try {
        iteratorChain0 = new IteratorChain<String>(iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IteratorChain<Integer> iteratorChain0 = new IteratorChain<Integer>();
      iteratorChain0.updateCurrentIterator();
      // Undeclared exception!
      try { 
        iteratorChain0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 4);
      IteratorChain<Integer> iteratorChain0 = new IteratorChain<Integer>();
      iteratorArray0[0] = (Iterator<Integer>) iteratorChain0;
      IteratorChain<Integer> iteratorChain1 = new IteratorChain<Integer>(iteratorChain0, iteratorChain0);
      iteratorArray0[1] = (Iterator<Integer>) iteratorChain1;
      IteratorChain<Integer> iteratorChain2 = new IteratorChain<Integer>(iteratorArray0[1]);
      iteratorArray0[2] = (Iterator<Integer>) iteratorChain2;
      IteratorChain<Integer> iteratorChain3 = new IteratorChain<Integer>(iteratorChain1);
      iteratorChain3.addIterator(iteratorChain1);
      iteratorArray0[3] = (Iterator<Integer>) iteratorChain3;
      IteratorChain<Integer> iteratorChain4 = new IteratorChain<Integer>(iteratorArray0);
      IteratorChain<String> iteratorChain5 = new IteratorChain<String>((Iterator<? extends String>[]) null);
      // Undeclared exception!
      try { 
        iteratorChain5.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IteratorChain<String> iteratorChain0 = new IteratorChain<String>();
      IteratorChain<String> iteratorChain1 = new IteratorChain<String>(iteratorChain0, iteratorChain0);
      iteratorChain1.hasNext();
      iteratorChain0.size();
      iteratorChain0.isLocked();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      linkedList0.removeLastOccurrence((Object) null);
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(listIterator0, listIterator0);
      iteratorChain0.addIterator(listIterator0);
      iteratorChain0.size();
      iteratorChain0.remove();
      iteratorChain0.remove();
      // Undeclared exception!
      try { 
        iteratorChain0.updateCurrentIterator();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IteratorChain<Integer> iteratorChain0 = new IteratorChain<Integer>();
      IteratorChain<Integer> iteratorChain1 = new IteratorChain<Integer>(iteratorChain0);
      Iterator<String> iterator0 = null;
      IteratorChain<String> iteratorChain2 = null;
      try {
        iteratorChain2 = new IteratorChain<String>((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      linkedList0.add((Object) listIterator0);
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(listIterator0, listIterator0);
      linkedList0.removeLast();
      iteratorChain0.addIterator(listIterator0);
      iteratorChain0.next();
      IteratorChain<Object> iteratorChain1 = null;
      try {
        iteratorChain1 = new IteratorChain<Object>(iteratorChain0, listIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>();
      Iterator<Integer> iterator0 = null;
      iteratorChain0.size();
      // Undeclared exception!
      try { 
        iteratorChain0.addIterator((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "(");
      ListIterator<Object> listIterator0 = linkedList0.listIterator(1);
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(listIterator0, listIterator0);
      IteratorChain<String> iteratorChain1 = new IteratorChain<String>();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      IteratorChain<String> iteratorChain2 = new IteratorChain<String>(iteratorChain1);
      iteratorArray0[0] = (Iterator<String>) iteratorChain2;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      iteratorChain0.forEachRemaining(consumer0);
      IteratorChain<String> iteratorChain3 = new IteratorChain<String>(iteratorArray0);
      iteratorChain1.addIterator(iteratorChain3);
      iteratorChain1.size();
      IteratorChain<Iterator<String>> iteratorChain4 = new IteratorChain<Iterator<String>>();
      IteratorChain<Iterator<String>> iteratorChain5 = new IteratorChain<Iterator<String>>(iteratorChain4, iteratorChain4);
      iteratorChain5.hasNext();
      iteratorChain0.next();
      iteratorChain0.isLocked();
      IteratorChain<Integer> iteratorChain6 = null;
      try {
        iteratorChain6 = new IteratorChain<Integer>();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }
}
