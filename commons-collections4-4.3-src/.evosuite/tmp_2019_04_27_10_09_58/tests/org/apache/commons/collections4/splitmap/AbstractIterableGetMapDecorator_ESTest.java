/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:33:33 GMT 2019
 */

package org.apache.commons.collections4.splitmap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIterableGetMapDecorator_ESTest extends AbstractIterableGetMapDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>();
      abstractIterableGetMapDecorator0.map = (Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>) hashMap0;
      Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> map0 = abstractIterableGetMapDecorator0.decorated();
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      abstractIterableGetMapDecorator1.map = (Map<String, Object>) hashMap1;
      abstractIterableGetMapDecorator1.remove("");
      abstractIterableGetMapDecorator1.equals(map0);
      HashMap<String, AbstractMap.SimpleEntry<Object, String>> hashMap2 = new HashMap<String, AbstractMap.SimpleEntry<Object, String>>();
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<Object, String>> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<Object, String>>(hashMap2);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(hashMap2, "|Iy>sQu:([Mwt:L=a");
      hashMap2.put("", abstractMap_SimpleEntry0);
      abstractIterableGetMapDecorator2.mapIterator();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator2.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.keySet();
      Integer integer0 = new Integer(2349);
      hashMap0.put(integer0, integer0);
      AbstractIterableGetMapDecorator<Integer, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, Integer>(hashMap0);
      abstractIterableGetMapDecorator0.remove(integer0);
      abstractIterableGetMapDecorator0.containsValue(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Object, Object>(hashMap1);
      assertEquals(0, abstractIterableGetMapDecorator1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>();
      abstractIterableGetMapDecorator0.map = (Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>) hashMap0;
      Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> map0 = abstractIterableGetMapDecorator0.decorated();
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      abstractIterableGetMapDecorator1.map = (Map<String, Object>) hashMap1;
      abstractIterableGetMapDecorator1.remove("");
      abstractIterableGetMapDecorator1.equals(map0);
      HashMap<String, AbstractMap.SimpleEntry<Object, String>> hashMap2 = new HashMap<String, AbstractMap.SimpleEntry<Object, String>>();
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<Object, String>> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<Object, String>>(hashMap2);
      MapIterator<String, AbstractMap.SimpleEntry<Object, String>> mapIterator0 = abstractIterableGetMapDecorator2.mapIterator();
      abstractIterableGetMapDecorator2.hashCode();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractIterableGetMapDecorator0, "T");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      hashMap2.put("p(oC~gKLv<ZN!~s)", abstractMap_SimpleEntry0);
      HashMap<AbstractMap.SimpleEntry<Object, Integer>, String> hashMap3 = new HashMap<AbstractMap.SimpleEntry<Object, Integer>, String>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, Integer>, String> abstractIterableGetMapDecorator3 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, Integer>, String>(hashMap3);
      abstractIterableGetMapDecorator3.hashCode();
      HashMap<AbstractMap.SimpleEntry<Integer, String>, String> hashMap4 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, String>();
      Integer integer0 = new Integer(2147483645);
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "yPKh");
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleImmutableEntry1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap4.merge(abstractMap_SimpleEntry1, "T", biFunction0);
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, String>, String> abstractIterableGetMapDecorator4 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, String>, String>(hashMap4);
      HashMap<String, Integer> hashMap5 = new HashMap<String, Integer>();
      AbstractIterableGetMapDecorator<String, Integer> abstractIterableGetMapDecorator5 = new AbstractIterableGetMapDecorator<String, Integer>(hashMap5);
      AbstractIterableGetMapDecorator<Integer, Object> abstractIterableGetMapDecorator6 = new AbstractIterableGetMapDecorator<Integer, Object>();
      abstractIterableGetMapDecorator5.equals(abstractIterableGetMapDecorator6);
      abstractIterableGetMapDecorator4.toString();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> hashMap6 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> abstractIterableGetMapDecorator7 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>(hashMap6);
      abstractIterableGetMapDecorator7.equals(mapIterator0);
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator8 = new AbstractIterableGetMapDecorator<Object, Object>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator8.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      AbstractIterableGetMapDecorator<Object, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, String>(hashMap0);
      hashMap0.put(abstractIterableGetMapDecorator0, "");
      MapIterator<Object, String> mapIterator0 = abstractIterableGetMapDecorator0.mapIterator();
      abstractIterableGetMapDecorator0.mapIterator();
      abstractIterableGetMapDecorator0.containsKey(hashMap0);
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>(hashMap1);
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, "");
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.merge(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0, biFunction0);
      abstractIterableGetMapDecorator1.remove(mapIterator0);
      abstractIterableGetMapDecorator1.decorated();
      hashMap0.put(abstractIterableGetMapDecorator1, (String) null);
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Integer>, Object> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Integer>, Object>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator2.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      AbstractIterableGetMapDecorator<Object, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, Integer>(hashMap0);
      abstractIterableGetMapDecorator0.map = (Map<Object, Integer>) hashMap0;
      Integer integer0 = new Integer((-1871));
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      AbstractIterableGetMapDecorator<String, String> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, String>(hashMap1);
      hashMap1.getOrDefault((Object) null, "=P8f8mP('");
      abstractIterableGetMapDecorator1.get((Object) null);
      hashMap0.put((Object) null, integer0);
      hashMap0.put(abstractIterableGetMapDecorator0.map, integer0);
      abstractIterableGetMapDecorator0.equals("\"-rqY]XD PZk_wh.R");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>(hashMap2);
      AbstractIterableGetMapDecorator<Object, String> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<Object, String>(hashMap3);
      hashMap3.put(hashMap2, "am!}&ITQ-WQ1a7Ph0`");
      abstractIterableGetMapDecorator2.values();
      abstractIterableGetMapDecorator2.hashCode();
      HashMap<AbstractMap.SimpleEntry<Object, Integer>, Object> hashMap4 = new HashMap<AbstractMap.SimpleEntry<Object, Integer>, Object>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, Integer>, Object> abstractIterableGetMapDecorator3 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, Integer>, Object>(hashMap4);
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator3.remove(abstractIterableGetMapDecorator0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(hashMap0, "");
      hashMap0.put(abstractMap_SimpleEntry0, "");
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, String>, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, String>, Object>(hashMap0);
      abstractIterableGetMapDecorator0.map = (Map<AbstractMap.SimpleEntry<Object, String>, Object>) hashMap0;
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.get(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleEntry<String, Integer>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<String, Integer>>();
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<String, Integer>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<String, Integer>>(hashMap0);
      abstractIterableGetMapDecorator0.mapIterator();
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("", integer0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      hashMap0.put("", abstractMap_SimpleEntry0);
      hashMap0.clone();
      abstractIterableGetMapDecorator0.mapIterator();
      abstractIterableGetMapDecorator0.isEmpty();
      AbstractIterableGetMapDecorator<Object, String> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Object, String>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, Object>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.containsValue(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<Object, Object>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<Object, Object>>(hashMap0);
      abstractIterableGetMapDecorator0.mapIterator();
      abstractIterableGetMapDecorator0.mapIterator();
      abstractIterableGetMapDecorator0.hashCode();
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap1 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap1);
      abstractIterableGetMapDecorator1.decorated();
      HashMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> hashMap2 = new HashMap<String, AbstractMap.SimpleImmutableEntry<String, Object>>();
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleImmutableEntry<String, Object>>(hashMap2);
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractIterableGetMapDecorator3 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleImmutableEntry<String, Object>>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator3.get(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-3361));
      hashMap0.put(integer0, "2v");
      AbstractIterableGetMapDecorator<Integer, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, Object>(hashMap0);
      abstractIterableGetMapDecorator0.mapIterator();
      abstractIterableGetMapDecorator0.get(hashMap0);
      abstractIterableGetMapDecorator0.equals(hashMap0);
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Object, Object>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.values();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Object, Object>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Object, Object>>(hashMap0);
      abstractIterableGetMapDecorator0.isEmpty();
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Integer, Integer>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Integer, Integer>>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, String>, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, String>, Object>();
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(integer0, "");
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, Object>(hashMap1);
      Object object0 = new Object();
      abstractIterableGetMapDecorator1.remove(object0);
      hashMap0.put(abstractMap_SimpleEntry0, (Object) null);
      abstractIterableGetMapDecorator0.map = (Map<AbstractMap.SimpleEntry<Object, String>, Object>) hashMap0;
      Set<Map.Entry<AbstractMap.SimpleEntry<Object, String>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<Object, String>, Object>>)abstractIterableGetMapDecorator0.entrySet();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      AbstractIterableGetMapDecorator<String, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, Integer>(hashMap0);
      abstractIterableGetMapDecorator0.containsValue((Object) null);
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Object, Object>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, integer0);
      AbstractIterableGetMapDecorator<Integer, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, Object>(hashMap0);
      Integer integer1 = new Integer(1);
      hashMap0.put(integer1, integer1);
      abstractIterableGetMapDecorator0.map = (Map<Integer, Object>) hashMap0;
      abstractIterableGetMapDecorator0.decorated();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, String>, String> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, String>, String>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.equals(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(hashMap0);
      abstractIterableGetMapDecorator0.map = (Map<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>) hashMap0;
      abstractIterableGetMapDecorator0.containsValue(hashMap0);
      HashMap<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap1);
      abstractIterableGetMapDecorator1.size();
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      AbstractIterableGetMapDecorator<Integer, Object> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<Integer, Object>(hashMap2);
      String string0 = abstractIterableGetMapDecorator2.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Object, Integer>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractIterableGetMapDecorator<String, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, String>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleImmutableEntry<String, Integer>>(hashMap0);
      abstractIterableGetMapDecorator0.mapIterator();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      AbstractIterableGetMapDecorator<String, Integer> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, Integer>(hashMap1);
      Collection<Integer> collection0 = abstractIterableGetMapDecorator1.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      hashMap0.put(object0, "2F+=oT|");
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, Object>(hashMap0);
      abstractIterableGetMapDecorator0.get(hashMap0);
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>();
      AbstractIterableGetMapDecorator<Object, Integer> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<Object, Integer>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator2.get(abstractIterableGetMapDecorator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) null, "8z}~0c+J^@q7K");
      Integer integer0 = new Integer((-1967));
      String string0 = null;
      hashMap0.put(integer0, (String) null);
      AbstractIterableGetMapDecorator<Integer, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, String>(hashMap0);
      abstractIterableGetMapDecorator0.remove(integer0);
      abstractIterableGetMapDecorator0.keySet();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.clone();
      hashMap1.put("EJ! ,]-a{#]uh=", "EJ! ,]-a{#]uh=");
      AbstractIterableGetMapDecorator<String, String> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, String>(hashMap1);
      abstractIterableGetMapDecorator1.map = (Map<String, String>) hashMap1;
      Object object0 = new Object();
      abstractIterableGetMapDecorator1.mapIterator();
      abstractIterableGetMapDecorator1.containsValue(object0);
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, String>, String> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, String>, String>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator2.equals(abstractIterableGetMapDecorator1.map);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      AbstractIterableGetMapDecorator<String, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, Integer>(hashMap0);
      boolean boolean0 = abstractIterableGetMapDecorator0.containsValue(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, Object>(hashMap0);
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, Object>();
      abstractIterableGetMapDecorator1.decorated();
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator2 = null;
      try {
        abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<String, Object>((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<String, Object>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<String, Object>>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, Object>(hashMap0);
      Object object0 = new Object();
      AbstractIterableGetMapDecorator<Integer, String> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Integer, String>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.get(abstractIterableGetMapDecorator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AbstractIterableGetMapDecorator<Integer, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, String>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put("!'.p;\"Mvr!B>![CD:W3", integer0);
      AbstractIterableGetMapDecorator<String, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, Integer>(hashMap0);
      abstractIterableGetMapDecorator0.size();
      HashMap<Integer, AbstractMap.SimpleEntry<Object, Integer>> hashMap1 = new HashMap<Integer, AbstractMap.SimpleEntry<Object, Integer>>();
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Object, Integer>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Object, Integer>>(hashMap1);
      Object object0 = new Object();
      abstractIterableGetMapDecorator1.containsKey(object0);
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, String>, Integer> abstractIterableGetMapDecorator2 = null;
      try {
        abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, String>, Integer>((Map<AbstractMap.SimpleEntry<Object, String>, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, Object>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Integer, Object>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Integer, Object>>();
      HashMap<AbstractMap.SimpleEntry<Object, Integer>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Integer>, Integer>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, Integer>, Integer>(hashMap0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = abstractIterableGetMapDecorator1.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleImmutableEntry<String, Object>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleImmutableEntry<String, Object>>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, String>, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, String>, Object>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator0 = null;
      try {
        abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, Object>((Map<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put("ybgrAW}U6", "R(/q&");
      AbstractIterableGetMapDecorator<Object, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, String>(hashMap0);
      abstractIterableGetMapDecorator0.keySet();
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Object, Object>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<String, String>, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.remove(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Object, Integer>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Object, Integer>>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, Object>(hashMap0);
      Set<Object> set0 = abstractIterableGetMapDecorator0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleEntry<Object, Object>>();
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Object, Object>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Object, Object>>(hashMap0);
      boolean boolean0 = abstractIterableGetMapDecorator0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AbstractIterableGetMapDecorator<Integer, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, String>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      AbstractIterableGetMapDecorator<Integer, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, Object>(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      abstractIterableGetMapDecorator0.map = (Map<Integer, Object>) hashMap1;
      Integer integer0 = new Integer(1);
      hashMap1.put(integer0, hashMap0);
      abstractIterableGetMapDecorator0.containsValue(hashMap0);
      Integer integer1 = new Integer((-1274));
      abstractIterableGetMapDecorator0.isEmpty();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<String, String>, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AbstractIterableGetMapDecorator<Object, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, Integer>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.remove(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AbstractIterableGetMapDecorator<String, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, String>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, Object>>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, Object>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, Object>>(hashMap0);
      Map<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, Object>> map0 = abstractIterableGetMapDecorator0.decorated();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>();
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      abstractIterableGetMapDecorator0.map = (Map<String, Object>) hashMap1;
      abstractIterableGetMapDecorator0.remove("");
      HashMap<String, AbstractMap.SimpleEntry<Object, String>> hashMap2 = new HashMap<String, AbstractMap.SimpleEntry<Object, String>>();
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<Object, String>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<Object, String>>(hashMap2);
      MapIterator<String, AbstractMap.SimpleEntry<Object, String>> mapIterator0 = abstractIterableGetMapDecorator1.mapIterator();
      abstractIterableGetMapDecorator1.hashCode();
      HashMap<AbstractMap.SimpleEntry<Object, Integer>, String> hashMap3 = new HashMap<AbstractMap.SimpleEntry<Object, Integer>, String>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, Integer>, String> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, Integer>, String>(hashMap3);
      abstractIterableGetMapDecorator2.hashCode();
      HashMap<AbstractMap.SimpleEntry<Integer, String>, String> hashMap4 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, String>, String> abstractIterableGetMapDecorator3 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, String>, String>(hashMap4);
      HashMap<String, Integer> hashMap5 = new HashMap<String, Integer>();
      AbstractIterableGetMapDecorator<String, Integer> abstractIterableGetMapDecorator4 = new AbstractIterableGetMapDecorator<String, Integer>(hashMap5);
      abstractIterableGetMapDecorator4.map = (Map<String, Integer>) hashMap5;
      AbstractIterableGetMapDecorator<Integer, Object> abstractIterableGetMapDecorator5 = new AbstractIterableGetMapDecorator<Integer, Object>();
      abstractIterableGetMapDecorator4.equals(abstractIterableGetMapDecorator5);
      abstractIterableGetMapDecorator3.toString();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> hashMap6 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> abstractIterableGetMapDecorator6 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>(hashMap6);
      abstractIterableGetMapDecorator6.equals(mapIterator0);
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator7 = new AbstractIterableGetMapDecorator<Object, Object>();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Object>, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Object>, Integer>();
      HashMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractIterableGetMapDecorator0, abstractIterableGetMapDecorator0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      AbstractIterableGetMapDecorator<Object, String> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Object, String>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, Object>(hashMap0);
      abstractIterableGetMapDecorator0.size();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      AbstractIterableGetMapDecorator<String, Integer> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, Integer>(hashMap1);
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)abstractIterableGetMapDecorator1.entrySet();
      abstractIterableGetMapDecorator1.containsKey(hashMap1);
      HashMap<Object, AbstractMap.SimpleEntry<Object, Object>> hashMap2 = new HashMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Object, Object>> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Object, Object>>(hashMap2);
      abstractIterableGetMapDecorator2.isEmpty();
      HashMap<String, AbstractMap.SimpleEntry<Object, Integer>> hashMap3 = new HashMap<String, AbstractMap.SimpleEntry<Object, Integer>>();
      abstractIterableGetMapDecorator0.map = (Map<String, Object>) hashMap0;
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<Object, Integer>> abstractIterableGetMapDecorator3 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<Object, Integer>>(hashMap3);
      Integer integer0 = new Integer((-1646));
      hashMap1.put(".4C~RVR(6eJ+6jn-I6", integer0);
      abstractIterableGetMapDecorator3.values();
      abstractIterableGetMapDecorator0.size();
      HashMap<Integer, Integer> hashMap4 = new HashMap<Integer, Integer>();
      AbstractIterableGetMapDecorator<Integer, Integer> abstractIterableGetMapDecorator4 = new AbstractIterableGetMapDecorator<Integer, Integer>(hashMap4);
      abstractIterableGetMapDecorator4.mapIterator();
      abstractIterableGetMapDecorator4.get(set0);
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, String>, String> abstractIterableGetMapDecorator5 = null;
      try {
        abstractIterableGetMapDecorator5 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, String>, String>((Map<AbstractMap.SimpleEntry<Integer, String>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      AbstractIterableGetMapDecorator<Object, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, String>(hashMap0);
      hashMap0.put(abstractIterableGetMapDecorator0, "");
      abstractIterableGetMapDecorator0.mapIterator();
      abstractIterableGetMapDecorator0.containsKey(hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Integer>, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Integer>, Object>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put((Integer) null, (Integer) null);
      hashMap0.keySet();
      AbstractIterableGetMapDecorator<Integer, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, Integer>(hashMap0);
      abstractIterableGetMapDecorator0.containsValue(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Object, Object>(hashMap1);
      assertTrue(abstractIterableGetMapDecorator1.isEmpty());
  }
}
