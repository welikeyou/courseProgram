/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:46:21 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.NoSuchElementException;
import org.apache.commons.collections4.iterators.PeekingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeekingIterator_ESTest extends PeekingIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn("").when(iterator0).next();
      PeekingIterator<String> peekingIterator0 = PeekingIterator.peekingIterator((Iterator<? extends String>) iterator0);
      String string0 = peekingIterator0.peek();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn("").when(iterator0).next();
      PeekingIterator<String> peekingIterator0 = PeekingIterator.peekingIterator((Iterator<? extends String>) iterator0);
      String string0 = peekingIterator0.element();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeekingIterator<Integer> peekingIterator0 = new PeekingIterator<Integer>((Iterator<? extends Integer>) null);
      // Undeclared exception!
      try { 
        peekingIterator0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false).when(iterator0).hasNext();
      doReturn("n2JAnhmLV2Ao!~O}7C").when(iterator0).next();
      PeekingIterator<String> peekingIterator0 = PeekingIterator.peekingIterator((Iterator<? extends String>) iterator0);
      PeekingIterator<String> peekingIterator1 = new PeekingIterator<String>(peekingIterator0);
      peekingIterator1.next();
      // Undeclared exception!
      try { 
        peekingIterator1.peek();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeekingIterator<Object> peekingIterator0 = new PeekingIterator<Object>((Iterator<?>) null);
      // Undeclared exception!
      try { 
        peekingIterator0.peek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeekingIterator<String> peekingIterator0 = new PeekingIterator<String>((Iterator<? extends String>) null);
      // Undeclared exception!
      try { 
        peekingIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeekingIterator<String> peekingIterator0 = new PeekingIterator<String>((Iterator<? extends String>) null);
      // Undeclared exception!
      try { 
        peekingIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeekingIterator<String> peekingIterator0 = new PeekingIterator<String>((Iterator<? extends String>) null);
      // Undeclared exception!
      try { 
        peekingIterator0.element();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      PeekingIterator<String> peekingIterator0 = PeekingIterator.peekingIterator((Iterator<? extends String>) iterator0);
      peekingIterator0.next();
      PeekingIterator<Object> peekingIterator1 = new PeekingIterator<Object>(peekingIterator0);
      // Undeclared exception!
      try { 
        peekingIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iterator0).hasNext();
      PeekingIterator<Integer> peekingIterator0 = PeekingIterator.peekingIterator((Iterator<? extends Integer>) iterator0);
      PeekingIterator<Integer> peekingIterator1 = new PeekingIterator<Integer>(peekingIterator0);
      peekingIterator1.peek();
      peekingIterator0.peek();
      peekingIterator1.remove();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      PeekingIterator<Object> peekingIterator0 = PeekingIterator.peekingIterator((Iterator<?>) iterator0);
      peekingIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      PeekingIterator<String> peekingIterator0 = PeekingIterator.peekingIterator((Iterator<? extends String>) iterator0);
      peekingIterator0.peek();
      String string0 = peekingIterator0.next();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      PeekingIterator<Integer> peekingIterator0 = new PeekingIterator<Integer>(iterator0);
      PeekingIterator<Object> peekingIterator1 = PeekingIterator.peekingIterator((Iterator<?>) peekingIterator0);
      // Undeclared exception!
      try { 
        peekingIterator1.element();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      PeekingIterator<String> peekingIterator0 = PeekingIterator.peekingIterator((Iterator<? extends String>) iterator0);
      peekingIterator0.peek();
      boolean boolean0 = peekingIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      PeekingIterator<Integer> peekingIterator0 = new PeekingIterator<Integer>(iterator0);
      peekingIterator0.peek();
      boolean boolean0 = peekingIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      PeekingIterator<String> peekingIterator0 = PeekingIterator.peekingIterator((Iterator<? extends String>) iterator0);
      peekingIterator0.peek();
      String string0 = peekingIterator0.element();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      PeekingIterator<Integer> peekingIterator0 = new PeekingIterator<Integer>(iterator0);
      peekingIterator0.peek();
      Integer integer0 = peekingIterator0.peek();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        PeekingIterator.peekingIterator((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }
}
