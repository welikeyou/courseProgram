/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:17:29 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.collections4.iterators.CollatingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CollatingIterator_ESTest extends CollatingIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      assertNotNull(collatingIterator0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Object) collatingIterator0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      
      collatingIterator0.addIterator(iterator0);
      assertEquals(1, linkedList0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      collatingIterator0.setComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("Ib9]{?Jrv69E=n.7,G").when(comparator1).toString();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      collatingIterator0.forEachRemaining(consumer0);
      CollatingIterator<Iterator<Integer>> collatingIterator1 = new CollatingIterator<Iterator<Integer>>(comparator1);
      assertNotNull(collatingIterator1);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      collatingIterator1.forEachRemaining(consumer1);
      List<Iterator<? extends Iterator<Integer>>> list0 = collatingIterator1.getIterators();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("Ib9]{?Jrv69E=n.7,G"));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.contains("Ib9]{?Jrv69E=n.7,G"));
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      boolean boolean1 = linkedList1.add("&&W56RL]=A ,");
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertNotSame(linkedList1, linkedList2);
      assertFalse(linkedList1.contains("Ib9]{?Jrv69E=n.7,G"));
      assertTrue(linkedList1.contains("&&W56RL]=A ,"));
      assertTrue(boolean1);
      assertEquals(1, linkedList1.size());
      
      boolean boolean2 = collatingIterator1.hasNext();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = linkedList1.addAll((Collection<? extends String>) linkedList2);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList2, linkedList1);
      assertFalse(linkedList1.contains("Ib9]{?Jrv69E=n.7,G"));
      assertTrue(linkedList1.contains("&&W56RL]=A ,"));
      assertFalse(linkedList2.contains("&&W56RL]=A ,"));
      assertFalse(boolean3);
      assertEquals(1, linkedList1.size());
      assertEquals(0, linkedList2.size());
      
      boolean boolean4 = linkedList1.add("Ib9]{?Jrv69E=n.7,G");
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertNotSame(linkedList1, linkedList2);
      assertTrue(linkedList1.contains("&&W56RL]=A ,"));
      assertTrue(boolean4);
      assertEquals(2, linkedList1.size());
      
      List<Iterator<? extends Iterator<Integer>>> list1 = collatingIterator1.getIterators();
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      int int0 = collatingIterator0.getIteratorIndex();
      assertEquals(0, int0);
      
      Comparator<? super Iterator<Integer>> comparator2 = collatingIterator1.getComparator();
      assertNotNull(comparator2);
      
      collatingIterator0.remove();
      // Undeclared exception!
      try { 
        collatingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      assertNotNull(collatingIterator0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Object) collatingIterator0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      
      collatingIterator0.addIterator(iterator0);
      assertEquals(1, linkedList0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("Ib9]{?Jrv69E=n.7,G").when(comparator0).toString();
      collatingIterator0.setComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      collatingIterator0.forEachRemaining(consumer0);
      CollatingIterator<Iterator<Integer>> collatingIterator1 = new CollatingIterator<Iterator<Integer>>(comparator1);
      assertNotNull(collatingIterator1);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      collatingIterator1.forEachRemaining(consumer1);
      List<Iterator<? extends Iterator<Integer>>> list0 = collatingIterator1.getIterators();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Comparator<? super Object> comparator2 = collatingIterator0.getComparator();
      assertNotNull(comparator2);
      
      CollatingIterator<String> collatingIterator2 = new CollatingIterator<String>(comparator2);
      assertNotNull(collatingIterator2);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("Ib9]{?Jrv69E=n.7,G"));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.contains("Ib9]{?Jrv69E=n.7,G"));
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      boolean boolean1 = collatingIterator2.hasNext();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = collatingIterator1.hasNext();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = linkedList1.addAll((Collection<? extends String>) linkedList2);
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList2, linkedList1);
      assertFalse(linkedList1.contains("Ib9]{?Jrv69E=n.7,G"));
      assertFalse(linkedList2.contains("Ib9]{?Jrv69E=n.7,G"));
      assertFalse(boolean3);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      
      boolean boolean4 = linkedList1.add("Ib9]{?Jrv69E=n.7,G");
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertNotSame(linkedList1, linkedList2);
      assertTrue(linkedList1.contains("Ib9]{?Jrv69E=n.7,G"));
      assertTrue(boolean4);
      assertEquals(1, linkedList1.size());
      
      List<Iterator<? extends Iterator<Integer>>> list1 = collatingIterator1.getIterators();
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      int int0 = collatingIterator0.getIteratorIndex();
      assertEquals(0, int0);
      
      Comparator<? super Iterator<Integer>> comparator3 = collatingIterator1.getComparator();
      assertNotNull(comparator3);
      
      CollatingIterator<Integer> collatingIterator3 = new CollatingIterator<Integer>(comparator2, 1083);
      assertNotNull(collatingIterator3);
      
      boolean boolean5 = collatingIterator3.hasNext();
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      List<Iterator<? extends Integer>> list2 = collatingIterator3.getIterators();
      assertNotNull(list2);
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      boolean boolean6 = collatingIterator2.hasNext();
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6);
      
      try { 
        collatingIterator2.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      assertNotNull(collatingIterator0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Object) collatingIterator0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      
      collatingIterator0.addIterator(iterator0);
      assertEquals(1, linkedList0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.collections4.collection.AbstractCollectionDecorator").when(comparator0).toString();
      collatingIterator0.setComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      collatingIterator0.forEachRemaining(consumer0);
      CollatingIterator<Iterator<Integer>> collatingIterator1 = new CollatingIterator<Iterator<Integer>>(comparator1);
      assertNotNull(collatingIterator1);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      collatingIterator1.forEachRemaining(consumer1);
      List<Iterator<? extends Iterator<Integer>>> list0 = collatingIterator1.getIterators();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Comparator<? super Object> comparator2 = collatingIterator0.getComparator();
      assertNotNull(comparator2);
      
      CollatingIterator<String> collatingIterator2 = new CollatingIterator<String>();
      assertNotNull(collatingIterator2);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("org.apache.commons.collections4.collection.AbstractCollectionDecorator"));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      int int0 = 1083;
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.contains("org.apache.commons.collections4.collection.AbstractCollectionDecorator"));
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      String string0 = "\\`>$yi";
      boolean boolean1 = collatingIterator2.hasNext();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CollatingIterator<Iterator<Integer>> collatingIterator3 = new CollatingIterator<Iterator<Integer>>(comparator2, list0);
      assertFalse(collatingIterator3.equals((Object)collatingIterator1));
      assertNotNull(collatingIterator3);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        collatingIterator1.setIterator(4140, collatingIterator3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't do that after next or hasNext has been called.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("1'%T52p7Q'.=.Xa");
      assertTrue(linkedList0.contains("1'%T52p7Q'.=.Xa"));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      LinkedList linkedList1 = (LinkedList)linkedList0.clone();
      assertTrue(linkedList0.contains("1'%T52p7Q'.=.Xa"));
      assertNotNull(linkedList1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      assertTrue(linkedList0.contains("1'%T52p7Q'.=.Xa"));
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      
      CollatingIterator<String> collatingIterator0 = new CollatingIterator<String>(comparator0, iterator0, iterator0);
      assertTrue(linkedList0.contains("1'%T52p7Q'.=.Xa"));
      assertNotNull(collatingIterator0);
      assertEquals(1, linkedList0.size());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      collatingIterator0.setComparator(comparator1);
      assertTrue(linkedList0.contains("1'%T52p7Q'.=.Xa"));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = collatingIterator0.hasNext();
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains("1'%T52p7Q'.=.Xa"));
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      String string0 = linkedList0.pop();
      assertFalse(linkedList0.contains(string0));
      assertNotNull(string0);
      assertEquals("1'%T52p7Q'.=.Xa", string0);
      assertEquals(0, linkedList0.size());
      
      Comparator<Iterator<Integer>> comparator2 = (Comparator<Iterator<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Iterator<Integer>> collatingIterator1 = new CollatingIterator<Iterator<Integer>>(comparator2, 3299);
      assertNotNull(collatingIterator1);
      
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      assertFalse(linkedList2.contains(3299));
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      boolean boolean2 = linkedList0.retainAll(linkedList2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(linkedList0.contains(string0));
      assertFalse(linkedList2.contains(3299));
      assertFalse(boolean2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList2.size());
      
      CollatingIterator<Iterator<Integer>> collatingIterator2 = new CollatingIterator<Iterator<Integer>>(comparator2, collatingIterator1, collatingIterator1);
      assertFalse(collatingIterator2.equals((Object)collatingIterator1));
      assertNotNull(collatingIterator2);
      
      collatingIterator2.addIterator(collatingIterator1);
      assertFalse(collatingIterator1.equals((Object)collatingIterator2));
      assertFalse(collatingIterator2.equals((Object)collatingIterator1));
      assertNotSame(collatingIterator1, collatingIterator2);
      assertNotSame(collatingIterator2, collatingIterator1);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      collatingIterator1.forEachRemaining(consumer0);
      assertFalse(collatingIterator1.equals((Object)collatingIterator2));
      assertNotSame(collatingIterator1, collatingIterator2);
      
      // Undeclared exception!
      try { 
        collatingIterator2.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value can be removed at present
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0);
      assertNotNull(collatingIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Iterator<Integer> iterator0 = null;
      // Undeclared exception!
      try { 
        collatingIterator0.addIterator((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      iteratorArray0[0] = (Iterator<String>) listIterator0;
      CollatingIterator<String> collatingIterator0 = new CollatingIterator<String>(comparator0);
      assertNotNull(collatingIterator0);
      
      iteratorArray0[1] = (Iterator<String>) collatingIterator0;
      CollatingIterator<String> collatingIterator1 = new CollatingIterator<String>(comparator0, iteratorArray0);
      assertEquals(2, iteratorArray0.length);
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertNotNull(collatingIterator1);
      
      collatingIterator1.setIterator(0, listIterator0);
      assertEquals(2, iteratorArray0.length);
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertNotSame(collatingIterator1, collatingIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      CollatingIterator<Iterator<String>> collatingIterator2 = new CollatingIterator<Iterator<String>>();
      assertNotNull(collatingIterator2);
      
      // Undeclared exception!
      try { 
        collatingIterator2.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value can be removed at present
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<String> collatingIterator0 = new CollatingIterator<String>(comparator1);
      assertNotNull(collatingIterator0);
      
      iteratorArray0[0] = (Iterator<String>) collatingIterator0;
      CollatingIterator<String> collatingIterator1 = new CollatingIterator<String>(comparator0, iteratorArray0);
      assertEquals(1, iteratorArray0.length);
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertNotNull(collatingIterator1);
      
      collatingIterator1.addIterator(iteratorArray0[0]);
      assertEquals(1, iteratorArray0.length);
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertNotSame(collatingIterator1, collatingIterator0);
      
      List<Iterator<? extends String>> list0 = collatingIterator0.getIterators();
      assertFalse(collatingIterator0.equals((Object)collatingIterator1));
      assertNotSame(collatingIterator0, collatingIterator1);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        collatingIterator1.setIterator((-1973), collatingIterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      assertNotNull(collatingIterator0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Object) collatingIterator0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      
      collatingIterator0.addIterator(iterator0);
      assertEquals(1, linkedList0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      collatingIterator0.setComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      collatingIterator0.forEachRemaining(consumer0);
      CollatingIterator<Iterator<Integer>> collatingIterator1 = new CollatingIterator<Iterator<Integer>>(comparator1);
      assertNotNull(collatingIterator1);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      collatingIterator1.forEachRemaining(consumer1);
      List<Iterator<? extends Iterator<Integer>>> list0 = collatingIterator1.getIterators();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Comparator<? super Object> comparator2 = collatingIterator0.getComparator();
      assertNotNull(comparator2);
      
      CollatingIterator<String> collatingIterator2 = new CollatingIterator<String>(comparator2);
      assertNotNull(collatingIterator2);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      int int0 = 1083;
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      boolean boolean1 = collatingIterator2.hasNext();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = linkedList2.add("`>$yi");
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(linkedList2, linkedList1);
      assertTrue(linkedList2.contains("`>$yi"));
      assertTrue(boolean2);
      assertEquals(1, linkedList2.size());
      
      boolean boolean3 = linkedList1.addAll((Collection<? extends String>) linkedList2);
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList2, linkedList1);
      assertTrue(linkedList1.contains("`>$yi"));
      assertTrue(linkedList2.contains("`>$yi"));
      assertTrue(boolean3);
      assertEquals(1, linkedList1.size());
      assertEquals(1, linkedList2.size());
      
      boolean boolean4 = linkedList1.add("You must invoke setComparator() to set a comparator first.");
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertNotSame(linkedList1, linkedList2);
      assertTrue(linkedList1.contains("You must invoke setComparator() to set a comparator first."));
      assertTrue(boolean4);
      assertEquals(2, linkedList1.size());
      
      // Undeclared exception!
      try { 
        linkedList1.listIterator(1083);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1083, Size: 2
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Iterator<Integer>> collatingIterator0 = new CollatingIterator<Iterator<Integer>>();
      assertNotNull(collatingIterator0);
      
      boolean boolean0 = collatingIterator0.hasNext();
      assertFalse(boolean0);
      
      Comparator<Iterator<Integer>> comparator1 = (Comparator<Iterator<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        collatingIterator0.setComparator(comparator1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't do that after next or hasNext has been called.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CollatingIterator<String> collatingIterator0 = new CollatingIterator<String>();
      assertNotNull(collatingIterator0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<String> collatingIterator1 = new CollatingIterator<String>(comparator0, 4648);
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertNotNull(collatingIterator1);
      
      boolean boolean0 = collatingIterator1.hasNext();
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertNotSame(collatingIterator1, collatingIterator0);
      assertFalse(boolean0);
      
      collatingIterator0.addIterator(collatingIterator1);
      assertFalse(collatingIterator0.equals((Object)collatingIterator1));
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertNotSame(collatingIterator0, collatingIterator1);
      assertNotSame(collatingIterator1, collatingIterator0);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 6);
      CollatingIterator<Integer> collatingIterator2 = new CollatingIterator<Integer>(comparator1, 346);
      assertNotNull(collatingIterator2);
      
      iteratorArray0[0] = (Iterator<Integer>) collatingIterator2;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(346));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      assertFalse(linkedList0.contains(346));
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      iteratorArray0[1] = iterator0;
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Integer> collatingIterator3 = new CollatingIterator<Integer>(comparator2, iterator0, collatingIterator2);
      assertFalse(collatingIterator3.equals((Object)collatingIterator2));
      assertFalse(linkedList0.contains(346));
      assertNotNull(collatingIterator3);
      assertEquals(0, linkedList0.size());
      
      iteratorArray0[2] = (Iterator<Integer>) collatingIterator3;
      Comparator<Integer> comparator3 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Integer> collatingIterator4 = new CollatingIterator<Integer>(comparator3, iterator0, iterator0);
      assertFalse(collatingIterator4.equals((Object)collatingIterator3));
      assertFalse(collatingIterator4.equals((Object)collatingIterator2));
      assertFalse(linkedList0.contains(346));
      assertNotNull(collatingIterator4);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(346);
      assertNotNull(integer0);
      assertEquals(346, (int)integer0);
      
      boolean boolean1 = linkedList0.add(integer0);
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.contains(346));
      assertFalse(linkedList0.contains(4648));
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      iteratorArray0[3] = (Iterator<Integer>) collatingIterator4;
      Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Integer> collatingIterator5 = new CollatingIterator<Integer>(comparator4);
      assertFalse(collatingIterator5.equals((Object)collatingIterator4));
      assertFalse(collatingIterator5.equals((Object)collatingIterator2));
      assertFalse(collatingIterator5.equals((Object)collatingIterator3));
      assertNotNull(collatingIterator5);
      
      iteratorArray0[4] = (Iterator<Integer>) collatingIterator5;
      Comparator<Integer> comparator5 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      collatingIterator5.setComparator(comparator5);
      assertFalse(collatingIterator5.equals((Object)collatingIterator4));
      assertFalse(collatingIterator5.equals((Object)collatingIterator2));
      assertFalse(collatingIterator5.equals((Object)collatingIterator3));
      assertNotSame(collatingIterator5, collatingIterator4);
      assertNotSame(collatingIterator5, collatingIterator2);
      assertNotSame(collatingIterator5, collatingIterator3);
      
      Iterator<Integer> iterator1 = linkedList0.descendingIterator();
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotSame(iterator1, iterator0);
      assertTrue(linkedList0.contains(346));
      assertFalse(linkedList0.contains(4648));
      assertNotNull(iterator1);
      assertEquals(1, linkedList0.size());
      
      iteratorArray0[5] = iterator1;
      CollatingIterator<Integer> collatingIterator6 = new CollatingIterator<Integer>(comparator1, iteratorArray0);
      assertEquals(6, iteratorArray0.length);
      assertFalse(collatingIterator6.equals((Object)collatingIterator4));
      assertFalse(collatingIterator6.equals((Object)collatingIterator5));
      assertFalse(collatingIterator6.equals((Object)collatingIterator3));
      assertFalse(collatingIterator6.equals((Object)collatingIterator2));
      assertNotNull(collatingIterator6);
      
      Integer integer1 = collatingIterator6.next();
      assertEquals(6, iteratorArray0.length);
      assertFalse(collatingIterator6.equals((Object)collatingIterator4));
      assertFalse(collatingIterator6.equals((Object)collatingIterator5));
      assertFalse(collatingIterator6.equals((Object)collatingIterator3));
      assertFalse(collatingIterator6.equals((Object)collatingIterator2));
      assertNotSame(collatingIterator6, collatingIterator4);
      assertNotSame(collatingIterator6, collatingIterator5);
      assertNotSame(collatingIterator6, collatingIterator3);
      assertNotSame(collatingIterator6, collatingIterator2);
      assertNotNull(integer1);
      assertEquals(346, (int)integer1);
      
      CollatingIterator<Object> collatingIterator7 = new CollatingIterator<Object>();
      assertNotNull(collatingIterator7);
      
      boolean boolean2 = collatingIterator7.hasNext();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      CollatingIterator<String> collatingIterator0 = new CollatingIterator<String>(comparator0, listIterator0, listIterator0);
      assertNotNull(collatingIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Comparator<? super String> comparator1 = collatingIterator0.getComparator();
      assertNotNull(comparator1);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      try { 
        collatingIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>(comparator0);
      assertNotNull(collatingIterator0);
      
      int int0 = 0;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Integer> collatingIterator1 = new CollatingIterator<Integer>(comparator1, 0);
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertNotNull(collatingIterator1);
      
      CollatingIterator<Integer> collatingIterator2 = new CollatingIterator<Integer>(comparator1, collatingIterator0, collatingIterator1);
      assertFalse(collatingIterator0.equals((Object)collatingIterator1));
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertFalse(collatingIterator2.equals((Object)collatingIterator1));
      assertFalse(collatingIterator2.equals((Object)collatingIterator0));
      assertNotNull(collatingIterator2);
      
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator(0, collatingIterator2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      assertNotNull(collatingIterator0);
      
      Comparator<? super Integer> comparator0 = collatingIterator0.getComparator();
      assertNull(comparator0);
      
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>();
      assertNotNull(collatingIterator1);
      
      List<Iterator<?>> list0 = collatingIterator1.getIterators();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      collatingIterator1.setComparator(comparator1);
      try { 
        collatingIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Iterator<Integer>> collatingIterator0 = new CollatingIterator<Iterator<Integer>>(comparator0);
      assertNotNull(collatingIterator0);
      
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator((-2242), (Iterator<? extends Iterator<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 6);
      CollatingIterator<String> collatingIterator0 = new CollatingIterator<String>(comparator0, 1380);
      assertNotNull(collatingIterator0);
      
      iteratorArray0[0] = (Iterator<String>) collatingIterator0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<String> collatingIterator1 = null;
      try {
        collatingIterator1 = new CollatingIterator<String>(comparator1, iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      assertNotNull(collatingIterator0);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator((-1), (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CollatingIterator<Iterator<Integer>> collatingIterator0 = new CollatingIterator<Iterator<Integer>>();
      assertNotNull(collatingIterator0);
      
      CollatingIterator<String> collatingIterator1 = new CollatingIterator<String>((Comparator<? super String>) null);
      assertNotNull(collatingIterator1);
      
      collatingIterator1.setComparator((Comparator<? super String>) null);
      List<Iterator<? extends String>> list0 = collatingIterator1.getIterators();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      CollatingIterator<Object> collatingIterator2 = new CollatingIterator<Object>((Comparator<? super Object>) null);
      assertNotNull(collatingIterator2);
      
      // Undeclared exception!
      try { 
        collatingIterator2.setIterator(4172, collatingIterator1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4172, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>(comparator0);
      assertNotNull(collatingIterator0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>(comparator0, collatingIterator0, iterator0);
      assertNotNull(collatingIterator1);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = collatingIterator1.hasNext();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<String> collatingIterator0 = null;
      try {
        collatingIterator0 = new CollatingIterator<String>(comparator0, (Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String> iterator0 = null;
      CollatingIterator<String> collatingIterator0 = null;
      try {
        collatingIterator0 = new CollatingIterator<String>(comparator0, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = null;
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 7);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      iteratorArray0[0] = (Iterator<String>) listIterator0;
      CollatingIterator<String> collatingIterator0 = new CollatingIterator<String>();
      assertNotNull(collatingIterator0);
      
      iteratorArray0[1] = (Iterator<String>) collatingIterator0;
      ListIterator<String> listIterator1 = linkedList0.listIterator();
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertNotSame(listIterator1, listIterator0);
      assertNotNull(listIterator1);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.hasNext());
      
      iteratorArray0[2] = (Iterator<String>) listIterator1;
      CollatingIterator<String> collatingIterator1 = null;
      try {
        collatingIterator1 = new CollatingIterator<String>((Comparator<? super String>) null, iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<String> collatingIterator0 = null;
      try {
        collatingIterator0 = new CollatingIterator<String>(comparator0, (-741));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -741
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, iterator0, iterator0);
      assertNotNull(collatingIterator0);
      assertEquals(0, linkedList0.size());
      
      try { 
        collatingIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0);
      assertNotNull(collatingIterator0);
      
      int int0 = 1675;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = collatingIterator0.hasNext();
      assertFalse(boolean0);
      
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>(comparator1, 0);
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertNotNull(collatingIterator1);
      
      boolean boolean1 = collatingIterator1.hasNext();
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(collatingIterator1, collatingIterator0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        collatingIterator0.addIterator(collatingIterator1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't do that after next or hasNext has been called.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<String> collatingIterator0 = new CollatingIterator<String>(comparator0);
      assertNotNull(collatingIterator0);
      
      List<Iterator<? extends String>> list0 = collatingIterator0.getIterators();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      collatingIterator0.setComparator(comparator1);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      collatingIterator0.setComparator(comparator2);
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>();
      assertNotNull(collatingIterator1);
      
      collatingIterator1.addIterator(collatingIterator0);
      // Undeclared exception!
      try { 
        collatingIterator0.getIteratorIndex();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value has been returned yet
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<String> collatingIterator0 = new CollatingIterator<String>(comparator0);
      assertNotNull(collatingIterator0);
      
      // Undeclared exception!
      try { 
        collatingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value can be removed at present
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Object> comparator0 = null;
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>((Comparator<? super Integer>) null, iteratorArray0);
      assertEquals(0, iteratorArray0.length);
      assertNotNull(collatingIterator0);
      
      collatingIterator0.setComparator((Comparator<? super Integer>) null);
      assertEquals(0, iteratorArray0.length);
      
      CollatingIterator<Integer> collatingIterator1 = new CollatingIterator<Integer>((Comparator<? super Integer>) null);
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertNotNull(collatingIterator1);
      
      collatingIterator0.addIterator(collatingIterator1);
      assertEquals(0, iteratorArray0.length);
      assertFalse(collatingIterator0.equals((Object)collatingIterator1));
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertNotSame(collatingIterator0, collatingIterator1);
      assertNotSame(collatingIterator1, collatingIterator0);
      
      try { 
        collatingIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = null;
      CollatingIterator<String> collatingIterator0 = new CollatingIterator<String>((Comparator<? super String>) null);
      assertNotNull(collatingIterator0);
      
      boolean boolean0 = collatingIterator0.hasNext();
      assertFalse(boolean0);
      
      boolean boolean1 = collatingIterator0.hasNext();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>();
      assertNotNull(collatingIterator1);
      
      boolean boolean2 = collatingIterator1.hasNext();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CollatingIterator<Iterator<Object>> collatingIterator2 = new CollatingIterator<Iterator<Object>>((Comparator<? super Iterator<Object>>) null);
      assertNotNull(collatingIterator2);
      
      List<Iterator<? extends Iterator<Object>>> list0 = collatingIterator2.getIterators();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean3 = linkedList0.remove((Object) collatingIterator0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(0, linkedList0.size());
      
      boolean boolean4 = linkedList0.add("jVnhK");
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(linkedList0.contains("jVnhK"));
      assertTrue(boolean4);
      assertEquals(1, linkedList0.size());
      
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      assertTrue(linkedList0.contains("jVnhK"));
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator(0, iterator0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't do that after next or hasNext has been called.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>(comparator1);
      assertNotNull(collatingIterator0);
      
      CollatingIterator<Integer> collatingIterator1 = new CollatingIterator<Integer>(comparator0, collatingIterator0, collatingIterator0);
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertNotNull(collatingIterator1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<Object> comparator0 = null;
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null);
      assertNotNull(collatingIterator0);
      
      // Undeclared exception!
      try { 
        collatingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value can be removed at present
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CollatingIterator<String> collatingIterator0 = new CollatingIterator<String>();
      assertNotNull(collatingIterator0);
      
      List<Iterator<? extends String>> list0 = collatingIterator0.getIterators();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = collatingIterator0.hasNext();
      assertFalse(boolean0);
      
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>();
      assertNotNull(collatingIterator1);
      
      // Undeclared exception!
      try { 
        collatingIterator1.getIteratorIndex();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value has been returned yet
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CollatingIterator<String> collatingIterator0 = new CollatingIterator<String>((Comparator<? super String>) null);
      assertNotNull(collatingIterator0);
      
      CollatingIterator<String> collatingIterator1 = new CollatingIterator<String>();
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertNotNull(collatingIterator1);
      
      collatingIterator0.addIterator(collatingIterator1);
      assertFalse(collatingIterator0.equals((Object)collatingIterator1));
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
      assertNotSame(collatingIterator0, collatingIterator1);
      assertNotSame(collatingIterator1, collatingIterator0);
      
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<String>) collatingIterator0;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      iteratorArray0[1] = (Iterator<String>) listIterator0;
      iteratorArray0[2] = (Iterator<String>) collatingIterator1;
      CollatingIterator<Object> collatingIterator2 = new CollatingIterator<Object>((Comparator<? super Object>) null, iteratorArray0);
      assertEquals(3, iteratorArray0.length);
      assertNotNull(collatingIterator2);
      
      // Undeclared exception!
      try { 
        collatingIterator2.getIteratorIndex();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value has been returned yet
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null);
      assertNotNull(collatingIterator0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      assertNotNull(collatingIterator0);
      
      // Undeclared exception!
      try { 
        collatingIterator0.getIteratorIndex();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value has been returned yet
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CollatingIterator<Iterator<Integer>> collatingIterator0 = new CollatingIterator<Iterator<Integer>>();
      assertNotNull(collatingIterator0);
      
      boolean boolean0 = collatingIterator0.hasNext();
      assertFalse(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>(comparator0, collatingIterator0, collatingIterator0);
      assertNotNull(collatingIterator1);
      
      // Undeclared exception!
      try { 
        collatingIterator1.setIterator(1080, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      iteratorArray0[0] = (Iterator<String>) listIterator0;
      CollatingIterator<String> collatingIterator0 = new CollatingIterator<String>();
      iteratorArray0[1] = (Iterator<String>) collatingIterator0;
      CollatingIterator<String> collatingIterator1 = new CollatingIterator<String>(comparator0, iteratorArray0);
      collatingIterator1.setIterator(0, listIterator0);
      CollatingIterator<Iterator<String>> collatingIterator2 = new CollatingIterator<Iterator<String>>();
      // Undeclared exception!
      try { 
        collatingIterator2.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value can be removed at present
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CollatingIterator<String> collatingIterator0 = new CollatingIterator<String>();
      collatingIterator0.hasNext();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList0.listIterator(0);
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator((-2156), listIterator0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't do that after next or hasNext has been called.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CollatingIterator<String> collatingIterator0 = new CollatingIterator<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<String> collatingIterator1 = new CollatingIterator<String>(comparator0, 4648);
      collatingIterator1.hasNext();
      collatingIterator0.addIterator(collatingIterator1);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 6);
      CollatingIterator<Integer> collatingIterator2 = new CollatingIterator<Integer>(comparator1, 4648);
      iteratorArray0[0] = (Iterator<Integer>) collatingIterator2;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      iteratorArray0[1] = iterator0;
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Integer> collatingIterator3 = new CollatingIterator<Integer>(comparator2, iterator0, collatingIterator2);
      iteratorArray0[2] = (Iterator<Integer>) collatingIterator3;
      Comparator<Integer> comparator3 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(4648);
      linkedList0.add(integer0);
      iteratorArray0[3] = (Iterator<Integer>) collatingIterator3;
      Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Integer> collatingIterator4 = new CollatingIterator<Integer>(comparator4);
      iteratorArray0[4] = (Iterator<Integer>) collatingIterator4;
      Iterator<Integer> iterator1 = linkedList0.descendingIterator();
      iteratorArray0[5] = iterator1;
      CollatingIterator<Integer> collatingIterator5 = new CollatingIterator<Integer>(comparator1, iteratorArray0);
      collatingIterator5.next();
      CollatingIterator<Object> collatingIterator6 = new CollatingIterator<Object>();
      collatingIterator6.hasNext();
      try { 
        collatingIterator6.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Object> collatingIterator0 = null;
      try {
        collatingIterator0 = new CollatingIterator<Object>(comparator0, (Iterator<?>) null, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }
}
