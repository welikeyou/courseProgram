/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:57:50 GMT 2019
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections4.keyvalue.TiedMapEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiedMapEntry_ESTest extends TiedMapEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.putIfAbsent("Y-!D4;'", "");
      TiedMapEntry<String, String> tiedMapEntry0 = new TiedMapEntry<String, String>(hashMap0, "3[2X8Kt[[Tx.)9PZ**m");
      boolean boolean0 = tiedMapEntry0.equals(hashMap0);
      assertFalse(boolean0);
      
      HashMap<Integer, AbstractMap.SimpleEntry<Object, Integer>> hashMap1 = new HashMap<Integer, AbstractMap.SimpleEntry<Object, Integer>>();
      TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, Integer>> tiedMapEntry1 = new TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, Integer>>(hashMap1, (Integer) null);
      HashMap<Comparable<Object>, String> hashMap2 = new HashMap<Comparable<Object>, String>();
      hashMap2.put((Comparable<Object>) null, "2ukFe!h}");
      TiedMapEntry<Comparable<Object>, String> tiedMapEntry2 = new TiedMapEntry<Comparable<Object>, String>(hashMap2, (Comparable<Object>) null);
      boolean boolean1 = tiedMapEntry2.equals(tiedMapEntry1);
      assertFalse(boolean1);
      
      HashMap<Integer, AbstractMap.SimpleEntry<String, Integer>> hashMap3 = new HashMap<Integer, AbstractMap.SimpleEntry<String, Integer>>();
      TiedMapEntry<Integer, AbstractMap.SimpleEntry<String, Integer>> tiedMapEntry3 = new TiedMapEntry<Integer, AbstractMap.SimpleEntry<String, Integer>>(hashMap3, (Integer) null);
      tiedMapEntry3.toString();
      HashMap<Object, AbstractMap.SimpleEntry<String, Object>> hashMap4 = new HashMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      TiedMapEntry<Object, AbstractMap.SimpleEntry<String, Object>> tiedMapEntry4 = new TiedMapEntry<Object, AbstractMap.SimpleEntry<String, Object>>(hashMap4, hashMap4);
      Map.Entry.comparingByValue();
      tiedMapEntry4.toString();
      HashMap<Integer, Object> hashMap5 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(2695);
      TiedMapEntry<Integer, Object> tiedMapEntry5 = new TiedMapEntry<Integer, Object>(hashMap5, integer0);
      HashMap<String, Integer> hashMap6 = new HashMap<String, Integer>();
      TiedMapEntry<String, Integer> tiedMapEntry6 = new TiedMapEntry<String, Integer>(hashMap6, "null=null");
      tiedMapEntry6.getValue();
      tiedMapEntry5.setValue((Object) null);
      HashMap<Integer, Comparable<Object>> hashMap7 = new HashMap<Integer, Comparable<Object>>();
      TiedMapEntry<Integer, Comparable<Object>> tiedMapEntry7 = new TiedMapEntry<Integer, Comparable<Object>>(hashMap7, (Integer) null);
      String string0 = tiedMapEntry7.toString();
      assertEquals("null=null", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Integer>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(hashMap0, "m{Ba=I*sBEZ");
      Integer integer0 = new Integer(1);
      hashMap0.put(abstractMap_SimpleEntry0, integer0);
      TiedMapEntry<AbstractMap.SimpleEntry<Object, String>, Integer> tiedMapEntry0 = new TiedMapEntry<AbstractMap.SimpleEntry<Object, String>, Integer>(hashMap0, abstractMap_SimpleEntry0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
      // Undeclared exception!
      try { 
        tiedMapEntry0.equals(abstractMap_SimpleEntry0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "ro}");
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object> tiedMapEntry0 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(hashMap1, abstractMap_SimpleImmutableEntry0);
      HashMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> hashMap2 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>>();
      TiedMapEntry<Object, AbstractMap.SimpleImmutableEntry<String, Object>> tiedMapEntry1 = new TiedMapEntry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>(hashMap2, tiedMapEntry0);
      Object object0 = tiedMapEntry1.getKey();
      // Undeclared exception!
      try { 
        tiedMapEntry0.setValue(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot set value to this map entry
         //
         verifyException("org.apache.commons.collections4.keyvalue.TiedMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      TiedMapEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> tiedMapEntry0 = new TiedMapEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap0, hashMap0);
      tiedMapEntry0.toString();
      HashMap<Object, AbstractMap.SimpleEntry<Object, String>> hashMap1 = new HashMap<Object, AbstractMap.SimpleEntry<Object, String>>();
      TiedMapEntry<Object, AbstractMap.SimpleEntry<Object, String>> tiedMapEntry1 = new TiedMapEntry<Object, AbstractMap.SimpleEntry<Object, String>>(hashMap1, (Object) null);
      String string0 = tiedMapEntry1.toString();
      assertEquals("null=null", string0);
      
      HashMap<AbstractMap.SimpleEntry<String, String>, Object> hashMap2 = new HashMap<AbstractMap.SimpleEntry<String, String>, Object>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("null=null", "{}=null");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      TiedMapEntry<AbstractMap.SimpleEntry<String, String>, Object> tiedMapEntry2 = new TiedMapEntry<AbstractMap.SimpleEntry<String, String>, Object>(hashMap2, abstractMap_SimpleEntry1);
      boolean boolean0 = tiedMapEntry2.equals("{}=null");
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap3 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry1);
      TiedMapEntry<AbstractMap.SimpleEntry<Object, Object>, Object> tiedMapEntry3 = new TiedMapEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(hashMap3, abstractMap_SimpleEntry2);
      tiedMapEntry3.hashCode();
      HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap4 = new HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      TiedMapEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>> tiedMapEntry4 = new TiedMapEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap4, "<#;>S}=:VN%P<LFH{)0");
      tiedMapEntry4.hashCode();
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> hashMap5 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry1);
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object> tiedMapEntry5 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(hashMap5, abstractMap_SimpleImmutableEntry1);
      boolean boolean1 = tiedMapEntry5.equals(tiedMapEntry1);
      assertTrue(boolean1 == boolean0);
      
      tiedMapEntry5.hashCode();
      HashMap<Integer, AbstractMap.SimpleEntry<Object, Object>> hashMap6 = new HashMap<Integer, AbstractMap.SimpleEntry<Object, Object>>();
      Integer integer0 = new Integer((-3198));
      TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, Object>> tiedMapEntry6 = new TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>(hashMap6, integer0);
      tiedMapEntry6.getValue();
      HashMap<String, AbstractMap.SimpleEntry<Object, String>> hashMap7 = new HashMap<String, AbstractMap.SimpleEntry<Object, String>>();
      TiedMapEntry<String, AbstractMap.SimpleEntry<Object, String>> tiedMapEntry7 = new TiedMapEntry<String, AbstractMap.SimpleEntry<Object, String>>(hashMap7, "null=null");
      HashMap<Object, Object> hashMap8 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry8 = new TiedMapEntry<Object, Object>(hashMap8, hashMap5);
      tiedMapEntry8.getValue();
      HashMap<Integer, Object> hashMap9 = new HashMap<Integer, Object>();
      TiedMapEntry<Integer, Object> tiedMapEntry9 = new TiedMapEntry<Integer, Object>(hashMap9, integer0);
      tiedMapEntry9.setValue(tiedMapEntry5);
      HashMap<Integer, Integer> hashMap10 = new HashMap<Integer, Integer>();
      Integer integer1 = new Integer((-3198));
      TiedMapEntry<Integer, Integer> tiedMapEntry10 = new TiedMapEntry<Integer, Integer>(hashMap10, integer1);
      boolean boolean2 = tiedMapEntry10.equals(tiedMapEntry9);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      Integer integer0 = new Integer(0);
      Collection<Object> collection0 = hashMap0.values();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(integer0, "");
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Object> tiedMapEntry0 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(hashMap0, abstractMap_SimpleImmutableEntry0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      tiedMapEntry0.equals(integer0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry1 = new TiedMapEntry<Object, Object>(hashMap1, hashMap1);
      Object object0 = new Object();
      hashMap0.put(abstractMap_SimpleImmutableEntry0, object0);
      tiedMapEntry1.toString();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> hashMap2 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(tiedMapEntry0, collection0);
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> tiedMapEntry2 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>(hashMap2, abstractMap_SimpleImmutableEntry1);
      tiedMapEntry2.equals("");
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>();
      TiedMapEntry<String, Object> tiedMapEntry3 = new TiedMapEntry<String, Object>(hashMap3, (String) null);
      tiedMapEntry3.hashCode();
      Integer integer1 = new Integer(0);
      TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, String>> tiedMapEntry4 = new TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, String>>((Map<Integer, AbstractMap.SimpleEntry<Object, String>>) null, integer1);
      tiedMapEntry4.equals("");
      String string0 = tiedMapEntry3.toString();
      assertEquals("null=null", string0);
      
      HashMap<Object, AbstractMap.SimpleEntry<String, String>> hashMap4 = new HashMap<Object, AbstractMap.SimpleEntry<String, String>>();
      TiedMapEntry<Object, AbstractMap.SimpleEntry<String, String>> tiedMapEntry5 = new TiedMapEntry<Object, AbstractMap.SimpleEntry<String, String>>(hashMap4, hashMap4);
      tiedMapEntry5.hashCode();
      HashMap<AbstractMap.SimpleEntry<Integer, String>, String> hashMap5 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, String>();
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer1, "");
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleImmutableEntry2);
      TiedMapEntry<AbstractMap.SimpleEntry<Integer, String>, String> tiedMapEntry6 = new TiedMapEntry<AbstractMap.SimpleEntry<Integer, String>, String>(hashMap5, abstractMap_SimpleEntry0);
      tiedMapEntry6.setValue("");
      boolean boolean0 = tiedMapEntry3.equals(tiedMapEntry5);
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      TiedMapEntry<String, String> tiedMapEntry7 = new TiedMapEntry<String, String>(hashMap6, (String) null);
      boolean boolean1 = tiedMapEntry7.equals(hashMap6);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.putIfAbsent("Y-!D4;'", "");
      TiedMapEntry<String, String> tiedMapEntry0 = new TiedMapEntry<String, String>(hashMap0, "3[2X8Kt[[Tx.)9PZ**m");
      tiedMapEntry0.equals(hashMap0);
      HashMap<Integer, AbstractMap.SimpleEntry<Object, Integer>> hashMap1 = new HashMap<Integer, AbstractMap.SimpleEntry<Object, Integer>>();
      TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, Integer>> tiedMapEntry1 = new TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, Integer>>(hashMap1, (Integer) null);
      HashMap<Comparable<Object>, String> hashMap2 = new HashMap<Comparable<Object>, String>();
      TiedMapEntry<Comparable<Object>, String> tiedMapEntry2 = new TiedMapEntry<Comparable<Object>, String>(hashMap2, (Comparable<Object>) null);
      tiedMapEntry2.equals(tiedMapEntry1);
      HashMap<Integer, AbstractMap.SimpleEntry<String, Integer>> hashMap3 = new HashMap<Integer, AbstractMap.SimpleEntry<String, Integer>>();
      TiedMapEntry<Integer, AbstractMap.SimpleEntry<String, Integer>> tiedMapEntry3 = new TiedMapEntry<Integer, AbstractMap.SimpleEntry<String, Integer>>(hashMap3, (Integer) null);
      tiedMapEntry3.toString();
      HashMap<Object, AbstractMap.SimpleEntry<String, Object>> hashMap4 = new HashMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      TiedMapEntry<Object, AbstractMap.SimpleEntry<String, Object>> tiedMapEntry4 = new TiedMapEntry<Object, AbstractMap.SimpleEntry<String, Object>>(hashMap4, hashMap4);
      Map.Entry.comparingByValue();
      tiedMapEntry4.toString();
      HashMap<Integer, Object> hashMap5 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(2695);
      TiedMapEntry<Integer, Object> tiedMapEntry5 = new TiedMapEntry<Integer, Object>(hashMap5, integer0);
      HashMap<String, Integer> hashMap6 = new HashMap<String, Integer>();
      TiedMapEntry<String, Integer> tiedMapEntry6 = new TiedMapEntry<String, Integer>(hashMap6, "null=null");
      tiedMapEntry6.getValue();
      Object object0 = tiedMapEntry5.setValue((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(hashMap0, integer0);
      hashMap0.put(integer0, abstractMap_SimpleEntry0);
      TiedMapEntry<Object, AbstractMap.SimpleEntry<Object, Object>> tiedMapEntry0 = new TiedMapEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(hashMap0, hashMap0);
      tiedMapEntry0.equals((Object) null);
      // Undeclared exception!
      try { 
        tiedMapEntry0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      String string0 = "#\"^_'h_. 2Ha";
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>("#\"^_'h_. 2Ha", hashMap0);
      TiedMapEntry<AbstractMap.SimpleEntry<Object, Object>, Object> tiedMapEntry0 = new TiedMapEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(hashMap0, abstractMap_SimpleEntry0);
      Map.Entry.comparingByKey();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      TiedMapEntry<Object, Integer> tiedMapEntry1 = new TiedMapEntry<Object, Integer>(hashMap1, hashMap1);
      Integer integer0 = new Integer(2462);
      tiedMapEntry1.setValue(integer0);
      // Undeclared exception!
      try { 
        tiedMapEntry1.getValue();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put("R9LcK@g", "R9LcK@g");
      TiedMapEntry<Object, Object> tiedMapEntry0 = new TiedMapEntry<Object, Object>(hashMap0, hashMap0);
      tiedMapEntry0.toString();
      tiedMapEntry0.setValue(hashMap0);
      // Undeclared exception!
      try { 
        tiedMapEntry0.setValue("{R9LcK@g=R9LcK@g}=null");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      TiedMapEntry<String, Object> tiedMapEntry0 = new TiedMapEntry<String, Object>(hashMap0, "e?=DYo-bLL+u9dy");
      Integer integer0 = new Integer(1);
      TiedMapEntry<Integer, Object> tiedMapEntry1 = new TiedMapEntry<Integer, Object>((Map<Integer, Object>) null, integer0);
      Object object0 = tiedMapEntry1.getKey();
      tiedMapEntry0.setValue(object0);
      Map.Entry.comparingByKey();
      tiedMapEntry0.getValue();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      TiedMapEntry<String, Integer> tiedMapEntry2 = new TiedMapEntry<String, Integer>(hashMap1, "e?=DYo-bLL+u9dy");
      Integer integer1 = tiedMapEntry2.getValue();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.put((Integer) null, (Object) null);
      hashMap0.put((Integer) null, (Object) null);
      TiedMapEntry<Integer, Object> tiedMapEntry0 = new TiedMapEntry<Integer, Object>(hashMap0, (Integer) null);
      Integer integer0 = tiedMapEntry0.getKey();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleEntry<String, String>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleEntry<String, String>>();
      int int0 = 2358;
      Integer integer0 = new Integer(2358);
      TiedMapEntry<Integer, AbstractMap.SimpleEntry<String, String>> tiedMapEntry0 = new TiedMapEntry<Integer, AbstractMap.SimpleEntry<String, String>>(hashMap0, integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
      tiedMapEntry0.hashCode();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      TiedMapEntry<Integer, Object> tiedMapEntry1 = new TiedMapEntry<Integer, Object>(hashMap1, integer0);
      int int1 = (-1);
      Integer integer1 = new Integer((-1));
      tiedMapEntry1.setValue(integer1);
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      TiedMapEntry<Object, Integer> tiedMapEntry2 = new TiedMapEntry<Object, Integer>(hashMap2, "mU");
      tiedMapEntry2.getValue();
      HashMap<AbstractMap.SimpleEntry<String, Integer>, Integer> hashMap3 = new HashMap<AbstractMap.SimpleEntry<String, Integer>, Integer>();
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("mU", (Integer) null);
      TiedMapEntry<AbstractMap.SimpleEntry<String, Integer>, Integer> tiedMapEntry3 = new TiedMapEntry<AbstractMap.SimpleEntry<String, Integer>, Integer>(hashMap3, abstractMap_SimpleEntry0);
      tiedMapEntry3.getKey();
      TiedMapEntry<AbstractMap.SimpleEntry<Integer, Object>, Object> tiedMapEntry4 = new TiedMapEntry<AbstractMap.SimpleEntry<Integer, Object>, Object>((Map<AbstractMap.SimpleEntry<Integer, Object>, Object>) null, (AbstractMap.SimpleEntry<Integer, Object>) null);
      // Undeclared exception!
      try { 
        tiedMapEntry4.equals(tiedMapEntry2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>((Object) null, "");
      TiedMapEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Object>> tiedMapEntry0 = new TiedMapEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Object>>((Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Object>>) null, abstractMap_SimpleEntry0);
      abstractMap_SimpleEntry0.setValue("");
      Integer integer0 = new Integer((-2666));
      tiedMapEntry0.equals(integer0);
      abstractMap_SimpleEntry0.setValue("(85X>|='B!(7D3V");
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(tiedMapEntry0, "");
      // Undeclared exception!
      try { 
        tiedMapEntry0.setValue(abstractMap_SimpleEntry1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.keyvalue.TiedMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry0 = new TiedMapEntry<Object, Object>(hashMap0, hashMap0);
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> comparator0 = Map.Entry.comparingByKey();
      hashMap0.put(tiedMapEntry0, comparator0);
      tiedMapEntry0.equals(hashMap0);
      Integer integer0 = new Integer((-4399));
      tiedMapEntry0.equals(integer0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      TiedMapEntry<String, Object> tiedMapEntry1 = new TiedMapEntry<String, Object>(hashMap1, "");
      HashMap<String, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap2 = new HashMap<String, AbstractMap.SimpleImmutableEntry<Object, String>>();
      TiedMapEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>> tiedMapEntry2 = new TiedMapEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>>(hashMap2, "S*eXNO7\"B`8gO\u0007M");
      tiedMapEntry2.getKey();
      tiedMapEntry1.equals("S*eXNO7\"B`8gO\u0007M");
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> hashMap3 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>();
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> tiedMapEntry3 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>(hashMap3, (AbstractMap.SimpleImmutableEntry<String, Object>) null);
      tiedMapEntry3.setValue(integer0);
      HashMap<AbstractMap.SimpleEntry<String, Object>, String> hashMap4 = new HashMap<AbstractMap.SimpleEntry<String, Object>, String>();
      hashMap4.put((AbstractMap.SimpleEntry<String, Object>) null, "");
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("S*eXNO7\"B`8gO\u0007M", "");
      hashMap4.put(abstractMap_SimpleEntry0, "S*eXNO7\"B`8gO\u0007M");
      TiedMapEntry<AbstractMap.SimpleEntry<String, Object>, String> tiedMapEntry4 = new TiedMapEntry<AbstractMap.SimpleEntry<String, Object>, String>(hashMap4, (AbstractMap.SimpleEntry<String, Object>) null);
      String string0 = tiedMapEntry4.setValue("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      TiedMapEntry<String, AbstractMap.SimpleImmutableEntry<String, Integer>> tiedMapEntry0 = new TiedMapEntry<String, AbstractMap.SimpleImmutableEntry<String, Integer>>(hashMap0, "");
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("", tiedMapEntry0);
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> tiedMapEntry1 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap1, abstractMap_SimpleImmutableEntry0);
      tiedMapEntry1.equals("");
      Integer integer0 = new Integer((-2602));
      Integer integer1 = new Integer((-2602));
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, integer1);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleEntry0);
      TiedMapEntry<AbstractMap.SimpleEntry<Integer, Object>, String> tiedMapEntry2 = new TiedMapEntry<AbstractMap.SimpleEntry<Integer, Object>, String>((Map<AbstractMap.SimpleEntry<Integer, Object>, String>) null, abstractMap_SimpleEntry1);
      // Undeclared exception!
      try { 
        tiedMapEntry2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put((AbstractMap.SimpleImmutableEntry<String, Object>) null, integer0);
      String string0 = "xWQoWCV/M|5qmc]f;55";
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("xWQoWCV/M|5qmc]f;55", hashMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>>) comparator0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, (Integer) null);
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> tiedMapEntry0 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>(hashMap0, abstractMap_SimpleImmutableEntry0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, String>, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>>>) comparator1);
      // Undeclared exception!
      try { 
        tiedMapEntry0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "%8ybXPni");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, String>, Object> tiedMapEntry0 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, String>, Object>(hashMap0, abstractMap_SimpleImmutableEntry0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    //  Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>> comparator1 = (Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Integer>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      tiedMapEntry0.setValue((Object) null);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
   //   TiedMapEntry<Object, Object> tiedMapEntry1 = new TiedMapEntry<Object, Object>(hashMap1, comparator1);
   //   tiedMapEntry1.getKey();
   //   tiedMapEntry1.getValue();
      HashMap<String, AbstractMap.SimpleEntry<Object, String>> hashMap2 = new HashMap<String, AbstractMap.SimpleEntry<Object, String>>();
      TiedMapEntry<String, AbstractMap.SimpleEntry<Object, String>> tiedMapEntry2 = new TiedMapEntry<String, AbstractMap.SimpleEntry<Object, String>>(hashMap2, "");
      tiedMapEntry2.hashCode();
      HashMap<Integer, AbstractMap.SimpleEntry<Object, String>> hashMap3 = new HashMap<Integer, AbstractMap.SimpleEntry<Object, String>>();
      Integer integer0 = new Integer((-842));
      TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, String>> tiedMapEntry3 = new TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, String>>(hashMap3, integer0);
      tiedMapEntry3.hashCode();
      HashMap<String, AbstractMap.SimpleEntry<Object, Object>> hashMap4 = new HashMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      TiedMapEntry<String, AbstractMap.SimpleEntry<Object, Object>> tiedMapEntry4 = new TiedMapEntry<String, AbstractMap.SimpleEntry<Object, Object>>(hashMap4, "T;yzWy\"");
      tiedMapEntry4.getValue();
      HashMap<Object, AbstractMap.SimpleEntry<Integer, Integer>> hashMap5 = new HashMap<Object, AbstractMap.SimpleEntry<Integer, Integer>>();
      Integer integer1 = new Integer((-842));
      TiedMapEntry<Object, AbstractMap.SimpleEntry<Integer, Integer>> tiedMapEntry5 = new TiedMapEntry<Object, AbstractMap.SimpleEntry<Integer, Integer>>(hashMap5, integer1);
      HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object> hashMap6 = new HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(tiedMapEntry3);
      TiedMapEntry<AbstractMap.SimpleEntry<Integer, Object>, Object> tiedMapEntry6 = new TiedMapEntry<AbstractMap.SimpleEntry<Integer, Object>, Object>(hashMap6, abstractMap_SimpleEntry1);
      Object object0 = tiedMapEntry6.getKey();
      boolean boolean0 = tiedMapEntry5.equals(object0);
      assertTrue(boolean0);
      
      HashMap<AbstractMap.SimpleEntry<Object, Integer>, String> hashMap7 = new HashMap<AbstractMap.SimpleEntry<Object, Integer>, String>();
      Integer integer2 = new Integer(722);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, Integer>("", integer2);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleEntry2);
      TiedMapEntry<AbstractMap.SimpleEntry<Object, Integer>, String> tiedMapEntry7 = new TiedMapEntry<AbstractMap.SimpleEntry<Object, Integer>, String>(hashMap7, abstractMap_SimpleEntry3);
      String string0 = tiedMapEntry7.toString();
      assertEquals("=722=null", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Integer, Integer>, String> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Integer>, String>();
      Integer integer0 = new Integer(0);
      int int0 = 0;
      Integer integer1 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer1);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      TiedMapEntry<AbstractMap.SimpleEntry<Integer, Integer>, String> tiedMapEntry0 = new TiedMapEntry<AbstractMap.SimpleEntry<Integer, Integer>, String>(hashMap0, abstractMap_SimpleEntry1);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry2 = tiedMapEntry0.getKey();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry1 = new TiedMapEntry<Object, Object>(hashMap1, integer1);
      tiedMapEntry1.toString();
      TiedMapEntry<String, Integer> tiedMapEntry2 = new TiedMapEntry<String, Integer>((Map<String, Integer>) null, (String) null);
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Map.Entry.comparingByValue();
      TiedMapEntry<Integer, String> tiedMapEntry3 = new TiedMapEntry<Integer, String>(hashMap2, integer0);
      HashMap<Object, Integer> hashMap3 = new HashMap<Object, Integer>();
      TiedMapEntry<Object, Integer> tiedMapEntry4 = new TiedMapEntry<Object, Integer>(hashMap3, abstractMap_SimpleEntry2);
      Object object0 = tiedMapEntry4.getKey();
      hashMap1.put("0=null", object0);
      tiedMapEntry3.getValue();
      Integer integer2 = new Integer(0);
      hashMap1.remove((Object) null, (Object) integer2);
      // Undeclared exception!
      try { 
        tiedMapEntry2.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put((String) null, integer0);
      TiedMapEntry<String, Integer> tiedMapEntry0 = new TiedMapEntry<String, Integer>(hashMap0, "");
      tiedMapEntry0.toString();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      TiedMapEntry<String, Object> tiedMapEntry1 = new TiedMapEntry<String, Object>(hashMap1, (String) null);
      tiedMapEntry1.hashCode();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      HashMap<Integer, Object> hashMap3 = new HashMap<Integer, Object>();
      Integer integer1 = new Integer(0);
      TiedMapEntry<Integer, Object> tiedMapEntry2 = new TiedMapEntry<Integer, Object>(hashMap3, integer1);
      Object object0 = tiedMapEntry2.getKey();
      hashMap2.put(object0, (String) null);
      TiedMapEntry<Object, String> tiedMapEntry3 = new TiedMapEntry<Object, String>(hashMap2, (Object) null);
      HashMap<Object, Integer> hashMap4 = new HashMap<Object, Integer>();
      TiedMapEntry<Object, Integer> tiedMapEntry4 = new TiedMapEntry<Object, Integer>(hashMap4, hashMap2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      Integer integer2 = new Integer(0);
      tiedMapEntry4.setValue(integer2);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(hashMap3, tiedMapEntry1);
      TiedMapEntry<AbstractMap.SimpleEntry<Object, Object>, Object> tiedMapEntry5 = new TiedMapEntry<AbstractMap.SimpleEntry<Object, Object>, Object>((Map<AbstractMap.SimpleEntry<Object, Object>, Object>) null, abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        tiedMapEntry5.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      TiedMapEntry<String, Object> tiedMapEntry0 = new TiedMapEntry<String, Object>(hashMap0, "CK1kcbqfE");
      Map.Entry.comparingByKey();
      String string0 = tiedMapEntry0.getKey();
      assertEquals("CK1kcbqfE", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry0 = new TiedMapEntry<Object, Object>(hashMap0, hashMap0);
      tiedMapEntry0.hashCode();
      Integer integer0 = new Integer(0);
      boolean boolean0 = tiedMapEntry0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      TiedMapEntry<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>> tiedMapEntry0 = new TiedMapEntry<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0, "");
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = tiedMapEntry0.setValue((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = new Object();
      TiedMapEntry<Object, String> tiedMapEntry0 = new TiedMapEntry<Object, String>(hashMap0, object0);
      tiedMapEntry0.getValue();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      TiedMapEntry<String, String> tiedMapEntry1 = new TiedMapEntry<String, String>(hashMap1, (String) null);
      String string0 = tiedMapEntry1.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      TiedMapEntry<Integer, Integer> tiedMapEntry0 = new TiedMapEntry<Integer, Integer>(hashMap0, integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      HashMap<Object, AbstractMap.SimpleEntry<Integer, String>> hashMap1 = new HashMap<Object, AbstractMap.SimpleEntry<Integer, String>>();
      TiedMapEntry<Object, AbstractMap.SimpleEntry<Integer, String>> tiedMapEntry1 = new TiedMapEntry<Object, AbstractMap.SimpleEntry<Integer, String>>(hashMap1, tiedMapEntry0);
      tiedMapEntry1.toString();
      Object object0 = new Object();
      TiedMapEntry<Object, String> tiedMapEntry2 = new TiedMapEntry<Object, String>((Map<Object, String>) null, object0);
      // Undeclared exception!
      try { 
        tiedMapEntry2.setValue("-X@18N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.keyvalue.TiedMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("Cannot set value to this map entry", "Cannot set value to this map entry");
      TiedMapEntry<String, Object> tiedMapEntry0 = new TiedMapEntry<String, Object>(hashMap0, "Cannot set value to this map entry");
      tiedMapEntry0.hashCode();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Object object0 = new Object();
      TiedMapEntry<Object, Integer> tiedMapEntry1 = new TiedMapEntry<Object, Integer>(hashMap1, object0);
      tiedMapEntry1.getKey();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      hashMap1.put(integer0, integer1);
      TiedMapEntry<Object, String> tiedMapEntry2 = new TiedMapEntry<Object, String>((Map<Object, String>) null, hashMap1);
      // Undeclared exception!
      try { 
        tiedMapEntry2.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Integer>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(hashMap0, "m{Ba=I*sBEZ");
      TiedMapEntry<AbstractMap.SimpleEntry<Object, String>, Integer> tiedMapEntry0 = new TiedMapEntry<AbstractMap.SimpleEntry<Object, String>, Integer>(hashMap0, abstractMap_SimpleEntry0);
      boolean boolean0 = tiedMapEntry0.equals(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TiedMapEntry<String, String> tiedMapEntry0 = new TiedMapEntry<String, String>((Map<String, String>) null, "");
      // Undeclared exception!
      try { 
        tiedMapEntry0.setValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.keyvalue.TiedMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      TiedMapEntry<String, Integer> tiedMapEntry0 = new TiedMapEntry<String, Integer>(hashMap0, "iy >A!XnKO\"q");
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry1 = new TiedMapEntry<Object, Object>(hashMap1, tiedMapEntry0);
      Object object0 = tiedMapEntry1.getKey();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
      String string0 = tiedMapEntry1.toString();
      assertEquals("iy >A!XnKO\"q=null=null", string0);
      
      boolean boolean0 = tiedMapEntry0.equals(object0);
      tiedMapEntry1.hashCode();
      HashMap<Integer, AbstractMap.SimpleEntry<Object, Object>> hashMap2 = new HashMap<Integer, AbstractMap.SimpleEntry<Object, Object>>();
      Integer integer0 = new Integer((-1));
      TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, Object>> tiedMapEntry2 = new TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>(hashMap2, integer0);
      boolean boolean1 = tiedMapEntry2.equals(integer0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      TiedMapEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>> tiedMapEntry0 = new TiedMapEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap0, "");
      tiedMapEntry0.getKey();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(tiedMapEntry0);
      hashMap0.put("", abstractMap_SimpleImmutableEntry0);
      TiedMapEntry<String, String> tiedMapEntry1 = new TiedMapEntry<String, String>(hashMap1, "");
      boolean boolean0 = tiedMapEntry1.equals(tiedMapEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      TiedMapEntry<String, Object> tiedMapEntry0 = new TiedMapEntry<String, Object>(hashMap1, (String) null);
      tiedMapEntry0.hashCode();
      tiedMapEntry0.toString();
      HashMap<Object, AbstractMap.SimpleEntry<String, String>> hashMap2 = new HashMap<Object, AbstractMap.SimpleEntry<String, String>>();
      TiedMapEntry<Object, AbstractMap.SimpleEntry<String, String>> tiedMapEntry1 = new TiedMapEntry<Object, AbstractMap.SimpleEntry<String, String>>(hashMap2, hashMap2);
      tiedMapEntry0.equals(tiedMapEntry1);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      TiedMapEntry<String, String> tiedMapEntry2 = new TiedMapEntry<String, String>(hashMap3, "null=null");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleEntry<Object, Integer>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleEntry<Object, Integer>>();
      TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, Integer>> tiedMapEntry0 = new TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, Integer>>(hashMap0, (Integer) null);
      HashMap<Comparable<Object>, String> hashMap1 = new HashMap<Comparable<Object>, String>();
      hashMap1.put((Comparable<Object>) null, "2ukce!h}");
      TiedMapEntry<Comparable<Object>, String> tiedMapEntry1 = new TiedMapEntry<Comparable<Object>, String>(hashMap1, (Comparable<Object>) null);
      tiedMapEntry1.equals(tiedMapEntry0);
      HashMap<Integer, AbstractMap.SimpleEntry<String, Integer>> hashMap2 = new HashMap<Integer, AbstractMap.SimpleEntry<String, Integer>>();
      HashMap<Object, AbstractMap.SimpleEntry<String, Object>> hashMap3 = new HashMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      Map.Entry.comparingByValue();
      HashMap<Integer, Comparable<Object>> hashMap4 = new HashMap<Integer, Comparable<Object>>();
      HashMap<Object, String> hashMap5 = new HashMap<Object, String>();
      assertTrue(hashMap5.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TiedMapEntry<String, String> tiedMapEntry0 = new TiedMapEntry<String, String>(hashMap0, "3[2X8Kt[[Tx.)9PZ**m");
      boolean boolean0 = tiedMapEntry0.equals(hashMap0);
      assertFalse(boolean0);
      
      HashMap<Integer, AbstractMap.SimpleEntry<Object, Integer>> hashMap1 = new HashMap<Integer, AbstractMap.SimpleEntry<Object, Integer>>();
      TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, Integer>> tiedMapEntry1 = new TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, Integer>>(hashMap1, (Integer) null);
      HashMap<Comparable<Object>, String> hashMap2 = new HashMap<Comparable<Object>, String>();
      hashMap2.put((Comparable<Object>) null, "2ukFe!h}");
      TiedMapEntry<Comparable<Object>, String> tiedMapEntry2 = new TiedMapEntry<Comparable<Object>, String>(hashMap2, (Comparable<Object>) null);
      boolean boolean1 = tiedMapEntry2.equals(tiedMapEntry1);
      assertFalse(boolean1);
      
      HashMap<Integer, AbstractMap.SimpleEntry<String, Integer>> hashMap3 = new HashMap<Integer, AbstractMap.SimpleEntry<String, Integer>>();
      TiedMapEntry<Integer, AbstractMap.SimpleEntry<String, Integer>> tiedMapEntry3 = new TiedMapEntry<Integer, AbstractMap.SimpleEntry<String, Integer>>(hashMap3, (Integer) null);
      tiedMapEntry3.toString();
      Map.Entry.comparingByValue();
      HashMap<Integer, Object> hashMap4 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(2695);
      TiedMapEntry<Integer, Object> tiedMapEntry4 = new TiedMapEntry<Integer, Object>(hashMap4, integer0);
      HashMap<Integer, Comparable<Object>> hashMap5 = new HashMap<Integer, Comparable<Object>>();
      TiedMapEntry<Integer, Comparable<Object>> tiedMapEntry5 = new TiedMapEntry<Integer, Comparable<Object>>(hashMap5, (Integer) null);
      String string0 = tiedMapEntry5.toString();
      assertEquals("null=null", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      TiedMapEntry<String, Integer> tiedMapEntry0 = new TiedMapEntry<String, Integer>(hashMap0, "bt4,}3(2wwC6+z");
      Integer integer0 = new Integer(0);
      tiedMapEntry0.setValue(integer0);
      Integer integer1 = new Integer(0);
      tiedMapEntry0.setValue(integer1);
      Object object0 = new Object();
      tiedMapEntry0.equals(object0);
      tiedMapEntry0.hashCode();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      String string0 = ",Z";
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(",Z", "%8ybXPni");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, String>, Object> tiedMapEntry0 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, String>, Object>(hashMap0, abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        tiedMapEntry0.setValue(tiedMapEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot set value to this map entry
         //
         verifyException("org.apache.commons.collections4.keyvalue.TiedMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      TiedMapEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> tiedMapEntry0 = new TiedMapEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap0, hashMap0);
      String string0 = tiedMapEntry0.toString();
      assertEquals("{}=null", string0);
      
      HashMap<Object, AbstractMap.SimpleEntry<Object, String>> hashMap1 = new HashMap<Object, AbstractMap.SimpleEntry<Object, String>>();
      HashMap<AbstractMap.SimpleEntry<String, String>, Object> hashMap2 = new HashMap<AbstractMap.SimpleEntry<String, String>, Object>();
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap3 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap4 = new HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      TiedMapEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>> tiedMapEntry1 = new TiedMapEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap4, "<#;>S}=:VN%P<LFH{)0");
      tiedMapEntry1.hashCode();
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> hashMap5 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      HashMap<Integer, AbstractMap.SimpleEntry<Object, Object>> hashMap6 = new HashMap<Integer, AbstractMap.SimpleEntry<Object, Object>>();
      Integer integer0 = new Integer((-3198));
      TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, Object>> tiedMapEntry2 = new TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>(hashMap6, integer0);
      tiedMapEntry2.getValue();
      HashMap<String, AbstractMap.SimpleEntry<Object, String>> hashMap7 = new HashMap<String, AbstractMap.SimpleEntry<Object, String>>();
      HashMap<Integer, Object> hashMap8 = new HashMap<Integer, Object>();
      TiedMapEntry<Integer, Object> tiedMapEntry3 = new TiedMapEntry<Integer, Object>(hashMap8, integer0);
      HashMap<Integer, Integer> hashMap9 = new HashMap<Integer, Integer>();
      TiedMapEntry<Integer, Integer> tiedMapEntry4 = new TiedMapEntry<Integer, Integer>(hashMap9, integer0);
      boolean boolean0 = tiedMapEntry4.equals(tiedMapEntry3);
      HashMap<AbstractMap.SimpleEntry<String, Object>, Comparable<String>> hashMap10 = new HashMap<AbstractMap.SimpleEntry<String, Object>, Comparable<String>>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("{}=null", "{}=null");
      TiedMapEntry<AbstractMap.SimpleEntry<String, Object>, Comparable<String>> tiedMapEntry5 = new TiedMapEntry<AbstractMap.SimpleEntry<String, Object>, Comparable<String>>(hashMap10, abstractMap_SimpleEntry0);
      boolean boolean1 = tiedMapEntry5.equals(tiedMapEntry3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }
}
