/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:40:53 GMT 2019
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AndPredicate_ESTest extends AndPredicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>(predicate0, predicate0);
      Integer integer0 = new Integer(2202);
      // Undeclared exception!
      try { 
        andPredicate0.evaluate(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>(allPredicate0, predicateArray0[6]);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      andPredicate0.evaluate(integer0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Integer> predicate1 = NotPredicate.notPredicate((Predicate<? super Integer>) predicate0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(predicate1);
      AndPredicate<InstanceofPredicate> andPredicate0 = new AndPredicate<InstanceofPredicate>(predicate0, identityPredicate0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      AndPredicate<Object> andPredicate1 = new AndPredicate<Object>(anyPredicate0, anyPredicate0);
      // Undeclared exception!
      try { 
        andPredicate1.evaluate(andPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      AndPredicate<Transformer<String, Integer>> andPredicate0 = new AndPredicate<Transformer<String, Integer>>(predicate0, predicate0);
      Integer integer0 = new Integer(0);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      Transformer<Object, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) factory0);
      IfTransformer<String, Integer> ifTransformer0 = new IfTransformer<String, Integer>(predicate0, transformer0, transformer0);
      boolean boolean0 = andPredicate0.evaluate(ifTransformer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      AndPredicate<Transformer<Object, Boolean>> andPredicate0 = new AndPredicate<Transformer<Object, Boolean>>(predicate2, predicate2);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 15);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("3KT^H-4NP%6by{", (Class<?>[]) classArray0, (Object[]) classArray0);
      boolean boolean0 = andPredicate0.evaluate(transformer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Integer> predicate1 = NotPredicate.notPredicate((Predicate<? super Integer>) predicate0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(predicate1);
      AndPredicate<InstanceofPredicate> andPredicate0 = new AndPredicate<InstanceofPredicate>(predicate0, identityPredicate0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = andPredicate0.evaluate(instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        AndPredicate.andPredicate((Predicate<? super Object>) null, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>((Predicate<? super Integer>) null, (Predicate<? super Integer>) null);
      Predicate<? super Integer>[] predicateArray0 = andPredicate0.getPredicates();
      assertEquals(2, predicateArray0.length);
  }
}
