/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:33:39 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.collections4.iterators.PermutationIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PermutationIterator_ESTest extends PermutationIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PermutationIterator<Object> permutationIterator0 = new PermutationIterator<Object>(linkedList0);
      assertNotNull(permutationIterator0);
      assertEquals(0, linkedList0.size());
      assertTrue(permutationIterator0.hasNext());
      
      boolean boolean0 = permutationIterator0.hasNext();
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertTrue(permutationIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PermutationIterator<String> permutationIterator0 = new PermutationIterator<String>(linkedList0);
      assertNotNull(permutationIterator0);
      assertEquals(0, linkedList0.size());
      assertTrue(permutationIterator0.hasNext());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      permutationIterator0.forEachRemaining(consumer0);
      assertEquals(0, linkedList0.size());
      assertFalse(permutationIterator0.hasNext());
      
      boolean boolean0 = permutationIterator0.hasNext();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(permutationIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Object> list0 = linkedList0.subList(0, 0);
      assertNotNull(list0);
      assertFalse(linkedList0.contains(0));
      assertFalse(list0.contains(0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = linkedList0.offer(list0);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(0));
      assertEquals(1, linkedList0.size());
      
      PermutationIterator<Object> permutationIterator0 = null;
      try {
        permutationIterator0 = new PermutationIterator<Object>(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("hRaNu");
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("hRaNu"));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add("");
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(""));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      boolean boolean2 = linkedList0.add("");
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(""));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, linkedList0.size());
      
      boolean boolean3 = linkedList0.add("");
      assertTrue(boolean3);
      assertTrue(linkedList0.contains(""));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(4, linkedList0.size());
      
      PermutationIterator<String> permutationIterator0 = new PermutationIterator<String>(linkedList0);
      assertNotNull(permutationIterator0);
      assertTrue(linkedList0.contains(""));
      assertEquals(4, linkedList0.size());
      assertTrue(permutationIterator0.hasNext());
      
      List<String> list0 = permutationIterator0.next();
      assertNotNull(list0);
      assertTrue(linkedList0.contains(""));
      assertTrue(list0.contains(""));
      assertEquals(4, linkedList0.size());
      assertTrue(permutationIterator0.hasNext());
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      
      List<String> list1 = permutationIterator0.next();
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertTrue(linkedList0.contains(""));
      assertTrue(list1.contains(""));
      assertTrue(list1.equals((Object)list0));
      assertEquals(4, linkedList0.size());
      assertTrue(permutationIterator0.hasNext());
      assertEquals(4, list1.size());
      assertFalse(list1.isEmpty());
      
      List<String> list2 = permutationIterator0.next();
      assertNotNull(list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertTrue(linkedList0.contains(""));
      assertTrue(list2.contains(""));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertEquals(4, linkedList0.size());
      assertTrue(permutationIterator0.hasNext());
      assertFalse(list2.isEmpty());
      assertEquals(4, list2.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("");
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(""));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add("");
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(""));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      boolean boolean2 = linkedList0.add("");
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(""));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, linkedList0.size());
      
      PermutationIterator<String> permutationIterator0 = new PermutationIterator<String>(linkedList0);
      assertNotNull(permutationIterator0);
      assertTrue(linkedList0.contains(""));
      assertEquals(3, linkedList0.size());
      assertTrue(permutationIterator0.hasNext());
      
      List<String> list0 = permutationIterator0.next();
      assertNotNull(list0);
      assertTrue(linkedList0.contains(""));
      assertTrue(list0.contains(""));
      assertEquals(3, linkedList0.size());
      assertTrue(permutationIterator0.hasNext());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      List<String> list1 = permutationIterator0.next();
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertTrue(linkedList0.contains(""));
      assertTrue(list1.contains(""));
      assertTrue(list1.equals((Object)list0));
      assertEquals(3, linkedList0.size());
      assertTrue(permutationIterator0.hasNext());
      assertFalse(list1.isEmpty());
      assertEquals(3, list1.size());
      
      List<String> list2 = permutationIterator0.next();
      assertNotNull(list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertTrue(linkedList0.contains(""));
      assertTrue(list2.contains(""));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertEquals(3, linkedList0.size());
      assertTrue(permutationIterator0.hasNext());
      assertFalse(list2.isEmpty());
      assertEquals(3, list2.size());
      
      List<String> list3 = permutationIterator0.next();
      assertNotNull(list3);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      assertNotSame(list3, list1);
      assertTrue(linkedList0.contains(""));
      assertTrue(list3.contains(""));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list1));
      assertEquals(3, linkedList0.size());
      assertTrue(permutationIterator0.hasNext());
      assertEquals(3, list3.size());
      assertFalse(list3.isEmpty());
      
      List<String> list4 = permutationIterator0.next();
      assertNotNull(list4);
      assertNotSame(list4, list3);
      assertNotSame(list4, list1);
      assertNotSame(list4, list2);
      assertNotSame(list4, list0);
      assertTrue(linkedList0.contains(""));
      assertTrue(list4.contains(""));
      assertTrue(list4.equals((Object)list0));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list4.equals((Object)list1));
      assertTrue(list4.equals((Object)list3));
      assertEquals(3, linkedList0.size());
      assertTrue(permutationIterator0.hasNext());
      assertEquals(3, list4.size());
      assertFalse(list4.isEmpty());
      
      List<String> list5 = permutationIterator0.next();
      assertNotNull(list5);
      assertNotSame(list5, list0);
      assertNotSame(list5, list4);
      assertNotSame(list5, list3);
      assertNotSame(list5, list2);
      assertNotSame(list5, list1);
      assertTrue(linkedList0.contains(""));
      assertTrue(list5.contains(""));
      assertTrue(list5.equals((Object)list1));
      assertTrue(list5.equals((Object)list4));
      assertTrue(list5.equals((Object)list3));
      assertTrue(list5.equals((Object)list0));
      assertTrue(list5.equals((Object)list2));
      assertEquals(3, linkedList0.size());
      assertFalse(permutationIterator0.hasNext());
      assertFalse(list5.isEmpty());
      assertEquals(3, list5.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1394);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      PermutationIterator<Integer> permutationIterator0 = new PermutationIterator<Integer>(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      permutationIterator0.forEachRemaining(consumer0);
      assertFalse(permutationIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PermutationIterator<Object> permutationIterator0 = new PermutationIterator<Object>(linkedList0);
      permutationIterator0.next();
      // Undeclared exception!
      try { 
        permutationIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.PermutationIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PermutationIterator<Integer> permutationIterator0 = null;
      try {
        permutationIterator0 = new PermutationIterator<Integer>((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collection must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PermutationIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      PermutationIterator<Integer> permutationIterator0 = new PermutationIterator<Integer>(linkedList0);
      // Undeclared exception!
      try { 
        permutationIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported
         //
         verifyException("org.apache.commons.collections4.iterators.PermutationIterator", e);
      }
  }
}
