/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 02:25:48 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.Flat3Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Flat3Map_ESTest extends Flat3Map_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Flat3Map<HashMap<Object, Object>, Object> flat3Map0 = new Flat3Map<HashMap<Object, Object>, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      flat3Map0.putIfAbsent(hashMap0, hashMap0);
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>((String) null, (String) null);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleImmutableEntry<String, String>> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(integer0, abstractMap_SimpleImmutableEntry1);
      Object object0 = hashMap0.put(flat3Map0, abstractMap_SimpleEntry1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Flat3Map<Integer, AbstractMap.SimpleEntry<Integer, Object>> flat3Map0 = new Flat3Map<Integer, AbstractMap.SimpleEntry<Integer, Object>>();
      Flat3Map<Integer, AbstractMap.SimpleEntry<Integer, Object>> flat3Map1 = flat3Map0.clone();
      Integer integer0 = new Integer(1039);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleEntry0);
      flat3Map1.put(integer0, abstractMap_SimpleEntry1);
      boolean boolean0 = flat3Map1.equals(flat3Map0);
      assertEquals(1, flat3Map1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("AYrn!AwEL>^<7E", "org.apache.commons.collections4.iterators.EmptyMapIterator", biFunction0);
      hashMap0.put("ifyyc7Ml;&z", "org.apache.commons.collections4.map.Flat3Map$FlatMapIterator");
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("", "org.apache.commons.collections4.map.Flat3Map$KeySet", biFunction1);
      hashMap0.put("-+F", "");
      hashMap0.put((String) null, "org.apache.commons.collections4.map.Flat3Map$KeySet");
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>(hashMap0);
      assertEquals(5, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Flat3Map<Integer, Flat3Map<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object>> flat3Map0 = new Flat3Map<Integer, Flat3Map<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object>>();
      Integer integer0 = new Integer(0);
      Flat3Map<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object> flat3Map1 = new Flat3Map<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object>();
      flat3Map0.put(integer0, flat3Map1);
      boolean boolean0 = flat3Map0.remove((Object) flat3Map0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge("No next() entry in the iteration", "No next() entry in the iteration", biFunction0);
      flat3Map0.putIfAbsent("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", "org.apache.commons.collections4.map.Flat3Map$KeySetIterator");
      String string0 = flat3Map0.getOrDefault("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", "org.apache.commons.collections4.iterators.AbstractEmptyIterator");
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("org.apache.commons.collections4.iterators.AbstractEmptyIterator", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Flat3Map<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, String> flat3Map0 = new Flat3Map<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, String>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>((String) null, "org.apache.commons.collections4.map.Flat3Map$KeySet");
      AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleImmutableEntry<String, String>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(integer0, abstractMap_SimpleImmutableEntry0);
      flat3Map0.putIfAbsent(abstractMap_SimpleEntry0, (String) null);
      Flat3Map.ValuesIterator<String> flat3Map_ValuesIterator0 = new Flat3Map.ValuesIterator<String>(flat3Map0);
      String string0 = flat3Map_ValuesIterator0.next();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Flat3Map<Flat3Map<String, Object>, Object> flat3Map0 = new Flat3Map<Flat3Map<String, Object>, Object>();
      Flat3Map<String, Object> flat3Map1 = new Flat3Map<String, Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      flat3Map0.computeIfAbsent(flat3Map1, unaryOperator0);
      Flat3Map.KeySetIterator<Flat3Map<String, Object>> flat3Map_KeySetIterator0 = new Flat3Map.KeySetIterator<Flat3Map<String, Object>>(flat3Map0);
      Flat3Map flat3Map2 = (Flat3Map)flat3Map_KeySetIterator0.next();
      assertEquals(0, flat3Map2.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Flat3Map<String, Object> flat3Map0 = new Flat3Map<String, Object>();
      Flat3Map.FlatMapEntry<String, Object> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<String, Object>(flat3Map0, 3);
      Object object0 = flat3Map_FlatMapEntry0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Flat3Map<String, Object> flat3Map0 = new Flat3Map<String, Object>();
      Flat3Map.FlatMapEntry<String, Object> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<String, Object>(flat3Map0, 3);
      String string0 = flat3Map_FlatMapEntry0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Flat3Map<Map.Entry<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, String>, String> flat3Map0 = new Flat3Map<Map.Entry<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, String>, String>();
      Flat3Map<Integer, AbstractMap.SimpleImmutableEntry<String, String>> flat3Map1 = new Flat3Map<Integer, AbstractMap.SimpleImmutableEntry<String, String>>();
      Flat3Map.FlatMapEntry<Integer, AbstractMap.SimpleImmutableEntry<String, String>> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(flat3Map1, (-1));
      AbstractMap.SimpleImmutableEntry<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, String>(flat3Map_FlatMapEntry0, "{}");
      flat3Map0.put(abstractMap_SimpleImmutableEntry0, "{}");
      Flat3Map.EntrySetIterator<Map.Entry<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, String>, String> flat3Map_EntrySetIterator0 = new Flat3Map.EntrySetIterator<Map.Entry<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, String>, String>(flat3Map0);
      Map.Entry<Map.Entry<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, String>, String> map_Entry0 = flat3Map_EntrySetIterator0.next();
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Flat3Map<Object, String> flat3Map0 = new Flat3Map<Object, String>();
      Flat3Map.EntrySet<Object, String> flat3Map_EntrySet0 = new Flat3Map.EntrySet<Object, String>(flat3Map0);
      flat3Map_EntrySet0.iterator();
      assertEquals(0, flat3Map_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Flat3Map<Integer, String> flat3Map0 = new Flat3Map<Integer, String>();
      Flat3Map.Values<String> flat3Map_Values0 = new Flat3Map.Values<String>(flat3Map0);
      int int0 = flat3Map_Values0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Flat3Map<Integer, Object> flat3Map0 = new Flat3Map<Integer, Object>();
      Flat3Map.KeySetIterator<Integer> flat3Map_KeySetIterator0 = new Flat3Map.KeySetIterator<Integer>(flat3Map0);
      // Undeclared exception!
      try { 
        flat3Map_KeySetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$EntryIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Flat3Map<String, Object> flat3Map0 = new Flat3Map<String, Object>(hashMap0);
      Flat3Map.KeySet<String> flat3Map_KeySet0 = new Flat3Map.KeySet<String>(flat3Map0);
      int int0 = flat3Map_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Flat3Map<Object, AbstractMap.SimpleImmutableEntry<String, Object>> flat3Map0 = new Flat3Map<Object, AbstractMap.SimpleImmutableEntry<String, Object>>();
      Flat3Map.FlatMapIterator<Object, AbstractMap.SimpleImmutableEntry<String, Object>> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Object, AbstractMap.SimpleImmutableEntry<String, Object>>(flat3Map0);
      boolean boolean0 = flat3Map_FlatMapIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>();
      Flat3Map.EntrySetIterator<Integer, Integer> flat3Map_EntrySetIterator0 = new Flat3Map.EntrySetIterator<Integer, Integer>(flat3Map0);
      boolean boolean0 = flat3Map_EntrySetIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Flat3Map<Integer, Flat3Map<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object>> flat3Map0 = new Flat3Map<Integer, Flat3Map<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object>>();
      Integer integer0 = new Integer(0);
      Flat3Map<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object> flat3Map1 = new Flat3Map<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object>();
      flat3Map0.put(integer0, flat3Map1);
      int int0 = flat3Map0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Flat3Map<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> flat3Map0 = new Flat3Map<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      Object object0 = flat3Map0.get((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Flat3Map<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object> flat3Map0 = new Flat3Map<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object>();
      Set<Map.Entry<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object>> set0 = (Set<Map.Entry<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object>>)flat3Map0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Flat3Map<Integer, String> flat3Map0 = new Flat3Map<Integer, String>();
      flat3Map0.put(integer0, ".g!,m*XhUYfbE`");
      Set<Map.Entry<Integer, String>> set0 = (Set<Map.Entry<Integer, String>>)flat3Map0.entrySet();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Flat3Map<Integer, Object> flat3Map0 = new Flat3Map<Integer, Object>();
      // Undeclared exception!
      try { 
        flat3Map0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Flat3Map<Object, Comparable<String>> flat3Map0 = null;
      try {
        flat3Map0 = new Flat3Map<Object, Comparable<String>>((Map<?, ? extends Comparable<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Flat3Map<Object, Integer> flat3Map0 = new Flat3Map<Object, Integer>(hashMap0);
      Flat3Map.KeySet<Object> flat3Map_KeySet0 = new Flat3Map.KeySet<Object>(flat3Map0);
      boolean boolean0 = flat3Map0.equals(flat3Map_KeySet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Flat3Map<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>> flat3Map0 = new Flat3Map<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      Set<Integer> set0 = flat3Map0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Flat3Map<AbstractMap.SimpleImmutableEntry<String, Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>>, HashMap<Object, Integer>> flat3Map0 = new Flat3Map<AbstractMap.SimpleImmutableEntry<String, Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>>, HashMap<Object, Integer>>();
      flat3Map0.clear();
      assertEquals(0, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Flat3Map<String, Integer> flat3Map0 = new Flat3Map<String, Integer>();
      Flat3Map<String, Object> flat3Map1 = new Flat3Map<String, Object>(flat3Map0);
      flat3Map1.remove((Object) integer0);
      assertEquals(0, flat3Map1.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Flat3Map<Object, Integer> flat3Map0 = new Flat3Map<Object, Integer>();
      flat3Map0.putAll(flat3Map0);
      assertTrue(flat3Map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Flat3Map<HashMap<Object, Object>, Object> flat3Map0 = new Flat3Map<HashMap<Object, Object>, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      flat3Map0.putIfAbsent(hashMap0, hashMap0);
      Integer integer0 = new Integer(0);
      flat3Map0.put(hashMap0, integer0);
      assertEquals(1, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Flat3Map<Integer, Object> flat3Map0 = new Flat3Map<Integer, Object>();
      boolean boolean0 = flat3Map0.containsValue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Flat3Map<Object, AbstractMap.SimpleEntry<String, String>> flat3Map0 = new Flat3Map<Object, AbstractMap.SimpleEntry<String, String>>();
      Flat3Map<Comparable<Object>, AbstractMap.SimpleImmutableEntry<String, Object>> flat3Map1 = new Flat3Map<Comparable<Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      boolean boolean0 = flat3Map1.containsKey(flat3Map0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Flat3Map<String, Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>> flat3Map0 = new Flat3Map<String, Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>>();
      boolean boolean0 = flat3Map0.containsKey((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Flat3Map<Integer, Flat3Map<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object>> flat3Map0 = new Flat3Map<Integer, Flat3Map<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object>>();
      int int0 = flat3Map0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Flat3Map<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> flat3Map0 = new Flat3Map<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(flat3Map0, flat3Map0);
      Object object0 = new Object();
      flat3Map0.putIfAbsent(abstractMap_SimpleImmutableEntry0, object0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      flat3Map0.computeIfPresent(abstractMap_SimpleImmutableEntry0, biFunction0);
      assertTrue(flat3Map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Flat3Map<String, Object> flat3Map0 = new Flat3Map<String, Object>();
      flat3Map0.putIfAbsent((String) null, (Object) null);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge("NO)4.c#?3E3{A", "", biFunction0);
      flat3Map0.toString();
      assertEquals(2, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge("oFv|E<-GR`jI=Kg", "oFv|E<-GR`jI=Kg", biFunction0);
      String string0 = flat3Map0.toString();
      assertEquals("{oFv|E<-GR`jI=Kg=oFv|E<-GR`jI=Kg}", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      String string0 = flat3Map0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Flat3Map<Flat3Map<String, String>, String> flat3Map0 = new Flat3Map<Flat3Map<String, String>, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge((Flat3Map<String, String>) null, "", biFunction0);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      flat3Map0.replaceAll(biFunction1);
      flat3Map0.hashCode();
      assertEquals(1, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Flat3Map<Flat3Map<String, String>, String> flat3Map0 = new Flat3Map<Flat3Map<String, String>, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge((Flat3Map<String, String>) null, "", biFunction0);
      flat3Map0.hashCode();
      assertFalse(flat3Map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      flat3Map0.hashCode();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap1);
      boolean boolean0 = flat3Map0.equals(hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge("No next() entry in the iteration", "No next() entry in the iteration", biFunction0);
      Flat3Map<String, AbstractMap.SimpleImmutableEntry<Object, Object>> flat3Map1 = new Flat3Map<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      boolean boolean0 = flat3Map1.equals(flat3Map0);
      assertEquals(1, flat3Map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("AYrn!AwEL>^<7E", "org.apache.commons.collections4.iterators.EmptyMapIterator", biFunction0);
      hashMap0.put("ifyyc7Ml;&z", "org.apache.commons.collections4.iterators.EmptyMapIterator");
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("", "org.apache.commons.collections4.map.Flat3Map$KeySet", biFunction1);
      hashMap0.put("-+F", "");
      Flat3Map<String, Object> flat3Map0 = new Flat3Map<String, Object>(hashMap0);
      Flat3Map<String, Object> flat3Map1 = flat3Map0.clone();
      assertEquals(4, flat3Map1.size());
      assertNotSame(flat3Map1, flat3Map0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Flat3Map<Integer, String> flat3Map0 = new Flat3Map<Integer, String>();
      Flat3Map<Integer, Object> flat3Map1 = new Flat3Map<Integer, Object>(flat3Map0);
      Integer integer0 = new Integer(266);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map1.merge(integer0, "fa)1_P{WSWso<%", biFunction0);
      Flat3Map.Values<Object> flat3Map_Values0 = new Flat3Map.Values<Object>(flat3Map1);
      flat3Map_Values0.iterator();
      assertEquals(1, flat3Map1.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      Flat3Map.Values<String> flat3Map_Values0 = new Flat3Map.Values<String>(flat3Map0);
      flat3Map_Values0.iterator();
      assertEquals(0, flat3Map_Values0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      Collection<Object> collection0 = flat3Map0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Flat3Map<HashMap<Object, Object>, String> flat3Map0 = new Flat3Map<HashMap<Object, Object>, String>();
      Flat3Map.KeySet<HashMap<Object, Object>> flat3Map_KeySet0 = new Flat3Map.KeySet<HashMap<Object, Object>>(flat3Map0);
      flat3Map_KeySet0.iterator();
      assertEquals(0, flat3Map_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("AYrn!AwEL>^<7E", "org.apache.commons.collections4.iterators.EmptyMapIterator", biFunction0);
      hashMap0.put("ifyyc7Ml;&z", "org.apache.commons.collections4.iterators.EmptyMapIterator");
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("", "org.apache.commons.collections4.map.Flat3Map$KeySet", biFunction1);
      hashMap0.put("-+F", "");
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>(hashMap0);
      Set<String> set0 = flat3Map0.keySet();
      assertEquals(4, set0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Flat3Map<String, Object> flat3Map0 = new Flat3Map<String, Object>();
      Flat3Map.FlatMapEntry<String, Object> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<String, Object>(flat3Map0, 3);
      String string0 = flat3Map_FlatMapEntry0.toString();
      assertEquals("null=null", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Flat3Map<AbstractMap.SimpleEntry<Object, Integer>, HashMap<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object>> flat3Map0 = new Flat3Map<AbstractMap.SimpleEntry<Object, Integer>, HashMap<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object>>();
      Flat3Map.FlatMapEntry<AbstractMap.SimpleEntry<Object, Integer>, HashMap<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object>> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<AbstractMap.SimpleEntry<Object, Integer>, HashMap<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Object>>(flat3Map0, 4559);
      flat3Map_FlatMapEntry0.setRemoved(true);
      String string0 = flat3Map_FlatMapEntry0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, String> hashMap0 = new HashMap<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, String>();
      Flat3Map<Integer, AbstractMap.SimpleImmutableEntry<String, String>> flat3Map0 = new Flat3Map<Integer, AbstractMap.SimpleImmutableEntry<String, String>>();
      Flat3Map.FlatMapEntry<Integer, AbstractMap.SimpleImmutableEntry<String, String>> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(flat3Map0, 1402);
      // Undeclared exception!
      try { 
        hashMap0.put(flat3Map_FlatMapEntry0, "j4 c'7(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid map index: 1402
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Flat3Map<String, Flat3Map<Integer, Integer>> flat3Map0 = new Flat3Map<String, Flat3Map<Integer, Integer>>();
      Integer integer0 = new Integer(3);
      Flat3Map.FlatMapEntry<String, Flat3Map<Integer, Integer>> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<String, Flat3Map<Integer, Integer>>(flat3Map0, 4323);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(flat3Map0, integer0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        flat3Map_FlatMapEntry0.equals(abstractMap_SimpleEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid map index: 4323
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Flat3Map<Object, Integer> flat3Map0 = new Flat3Map<Object, Integer>();
      Flat3Map.FlatMapEntry<Object, Integer> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<Object, Integer>(flat3Map0, 632);
      boolean boolean0 = flat3Map_FlatMapEntry0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Flat3Map<Comparable<Object>, Integer> flat3Map0 = new Flat3Map<Comparable<Object>, Integer>();
      Flat3Map.FlatMapEntry<Comparable<Object>, Integer> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<Comparable<Object>, Integer>(flat3Map0, 2);
      Integer integer0 = flat3Map_FlatMapEntry0.setValue((Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Flat3Map<AbstractMap.SimpleEntry<Object, Integer>, Object> flat3Map0 = new Flat3Map<AbstractMap.SimpleEntry<Object, Integer>, Object>();
      Flat3Map.FlatMapEntry<AbstractMap.SimpleEntry<Object, Integer>, Object> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<AbstractMap.SimpleEntry<Object, Integer>, Object>(flat3Map0, 3);
      Object object0 = flat3Map_FlatMapEntry0.setValue(flat3Map0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Flat3Map<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> flat3Map0 = new Flat3Map<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Flat3Map.FlatMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(flat3Map0, 128);
      // Undeclared exception!
      try { 
        flat3Map_FlatMapEntry0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid map index: 128
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Flat3Map.FlatMapEntry<Comparable<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>>, AbstractMap.SimpleEntry<String, String>> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<Comparable<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>>, AbstractMap.SimpleEntry<String, String>>((Flat3Map<Comparable<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>>, AbstractMap.SimpleEntry<String, String>>) null, (-1637));
      flat3Map_FlatMapEntry0.setRemoved(true);
      // Undeclared exception!
      try { 
        flat3Map_FlatMapEntry0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Flat3Map<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Integer, String>> flat3Map0 = new Flat3Map<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Integer, String>>();
      Integer integer0 = new Integer((-1832));
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("bq`@1H9_.<lz9 ", integer0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry2 = (AbstractMap.SimpleEntry<Integer, String>) mock(AbstractMap.SimpleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(abstractMap_SimpleEntry2).toString();
      flat3Map0.putIfAbsent(abstractMap_SimpleEntry1, abstractMap_SimpleEntry2);
      Flat3Map.EntrySetIterator<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Integer, String>> flat3Map_EntrySetIterator0 = new Flat3Map.EntrySetIterator<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Integer, String>>(flat3Map0);
      flat3Map_EntrySetIterator0.nextEntry();
      // Undeclared exception!
      try { 
        flat3Map_EntrySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      Flat3Map.EntrySet<String, String> flat3Map_EntrySet0 = new Flat3Map.EntrySet<String, String>(flat3Map0);
      boolean boolean0 = flat3Map_EntrySet0.remove("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Flat3Map<Comparable<String>, AbstractMap.SimpleEntry<Integer, Object>> flat3Map0 = new Flat3Map<Comparable<String>, AbstractMap.SimpleEntry<Integer, Object>>();
      Flat3Map.FlatMapIterator<Comparable<String>, AbstractMap.SimpleEntry<Integer, Object>> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Comparable<String>, AbstractMap.SimpleEntry<Integer, Object>>(flat3Map0);
      String string0 = flat3Map_FlatMapIterator0.toString();
      assertEquals("Iterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Integer, Comparable<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>>> hashMap0 = new HashMap<Integer, Comparable<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>>>();
      Flat3Map<Integer, Comparable<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>>> flat3Map0 = new Flat3Map<Integer, Comparable<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>>>(hashMap0);
      Flat3Map.FlatMapIterator<Integer, Comparable<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>>> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Integer, Comparable<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>>>(flat3Map0);
      // Undeclared exception!
      try { 
        flat3Map_FlatMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Flat3Map<String, AbstractMap.SimpleImmutableEntry<Object, Object>> flat3Map0 = new Flat3Map<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Flat3Map.FlatMapIterator<String, AbstractMap.SimpleImmutableEntry<Object, Object>> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<String, AbstractMap.SimpleImmutableEntry<Object, Object>>(flat3Map0);
      // Undeclared exception!
      try { 
        flat3Map_FlatMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Flat3Map<String, Integer> flat3Map0 = new Flat3Map<String, Integer>();
      Flat3Map.FlatMapIterator<String, Integer> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<String, Integer>(flat3Map0);
      // Undeclared exception!
      try { 
        flat3Map_FlatMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Flat3Map<HashMap<String, Object>, String> flat3Map0 = new Flat3Map<HashMap<String, Object>, String>();
      Flat3Map.FlatMapIterator<HashMap<String, Object>, String> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<HashMap<String, Object>, String>(flat3Map0);
      // Undeclared exception!
      try { 
        flat3Map_FlatMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Flat3Map<Flat3Map<String, String>, String> flat3Map0 = new Flat3Map<Flat3Map<String, String>, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge((Flat3Map<String, String>) null, "", biFunction0);
      Flat3Map.FlatMapIterator<Flat3Map<String, String>, String> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Flat3Map<String, String>, String>(flat3Map0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      flat3Map_FlatMapIterator0.forEachRemaining(consumer0);
      String string0 = flat3Map_FlatMapIterator0.toString();
      assertEquals(1, flat3Map0.size());
      assertEquals("Iterator[null=]", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Flat3Map<Flat3Map<String, String>, String> flat3Map0 = new Flat3Map<Flat3Map<String, String>, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge((Flat3Map<String, String>) null, "", biFunction0);
      flat3Map0.mapIterator();
      assertFalse(flat3Map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Flat3Map<String, AbstractMap.SimpleImmutableEntry<Object, Object>> flat3Map0 = new Flat3Map<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MapIterator<String, AbstractMap.SimpleImmutableEntry<Object, Object>> mapIterator0 = flat3Map0.mapIterator();
      assertFalse(mapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Flat3Map<Integer, String> flat3Map0 = new Flat3Map<Integer, String>();
      Integer integer0 = new Integer(2270);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      flat3Map0.compute(integer0, biFunction0);
      Flat3Map<Object, String> flat3Map1 = new Flat3Map<Object, String>(flat3Map0);
      flat3Map1.remove((Object) integer0);
      assertEquals(1, flat3Map0.size());
      assertTrue(flat3Map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge("No next() entry in the iteration", "No next() entry in the iteration", biFunction0);
      flat3Map0.putIfAbsent("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", "org.apache.commons.collections4.map.Flat3Map$KeySetIterator");
      String string0 = flat3Map0.remove((Object) flat3Map0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      flat3Map0.putIfAbsent("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", "org.apache.commons.collections4.map.Flat3Map$KeySetIterator");
      flat3Map0.put("org.apache.commons.collections4.iterators.AbstractEmptyIterator", (String) null);
      String string0 = flat3Map0.remove((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      flat3Map0.putIfAbsent("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", "org.apache.commons.collections4.map.Flat3Map$KeySetIterator");
      String string0 = flat3Map0.remove((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge("No next() entry in the iteration", "No next() entry in the iteration", biFunction0);
      String string0 = flat3Map0.remove((Object) flat3Map0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Flat3Map<String, Comparable<String>> flat3Map0 = new Flat3Map<String, Comparable<String>>(hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("AYrn!AwEL>^<7E", "org.apache.commons.collections4.iterators.EmptyMapIterator", biFunction0);
      flat3Map0.putIfAbsent("org.apache.commons.collections4.iterators.EmptyMapIterator", "org.apache.commons.collections4.iterators.EmptyMapIterator");
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("}v%?Al&X5@c1WM}2,yh").when(biFunction1).apply(anyString() , any());
      hashMap0.put("ifyyc7Ml;&z", "org.apache.commons.collections4.map.Flat3Map$FlatMapIterator");
      BiFunction<String, Object, String> biFunction2 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("", "org.apache.commons.collections4.map.Flat3Map$KeySet", biFunction2);
      hashMap0.put("-+F", "");
      flat3Map0.compute("`", biFunction1);
      Flat3Map<String, Object> flat3Map1 = new Flat3Map<String, Object>(flat3Map0);
      flat3Map1.putAll(hashMap0);
      assertEquals(6, flat3Map1.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Flat3Map<String, Comparable<String>> flat3Map0 = new Flat3Map<String, Comparable<String>>(hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("AYrn!AwEL>^<7E", "org.apache.commons.collections4.iterators.EmptyMapIterator", biFunction0);
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("}v%?Al&X5@c1WM}2,yh").when(biFunction1).apply(anyString() , any());
      hashMap0.put("ifyyc7Ml;&z", "org.apache.commons.collections4.map.Flat3Map$FlatMapIterator");
      BiFunction<String, Object, String> biFunction2 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("", "org.apache.commons.collections4.map.Flat3Map$KeySet", biFunction2);
      hashMap0.put("-+F", "");
      flat3Map0.compute("`", biFunction1);
      Flat3Map<String, Object> flat3Map1 = new Flat3Map<String, Object>(flat3Map0);
      flat3Map1.putAll(hashMap0);
      assertEquals(5, flat3Map1.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Flat3Map<String, Comparable<String>> flat3Map0 = new Flat3Map<String, Comparable<String>>(hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("AYrn!AwEL>^<7E", "org.apache.commons.collections4.iterators.EmptyMapIterator", biFunction0);
      flat3Map0.putIfAbsent("org.apache.commons.collections4.iterators.EmptyMapIterator", "org.apache.commons.collections4.iterators.EmptyMapIterator");
      hashMap0.put("ifyyc7Ml;&z", "org.apache.commons.collections4.map.Flat3Map$FlatMapIterator");
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("", "org.apache.commons.collections4.map.Flat3Map$KeySet", biFunction1);
      Flat3Map<String, Object> flat3Map1 = new Flat3Map<String, Object>(flat3Map0);
      flat3Map1.putAll(hashMap0);
      assertEquals(1, flat3Map0.size());
      assertEquals(4, flat3Map1.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge("No next() entry in the iteration", "No next() entry in the iteration", biFunction0);
      flat3Map0.putIfAbsent("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", "org.apache.commons.collections4.map.Flat3Map$KeySetIterator");
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge("No next() entry in the iteration", "No next() entry in the iteration", biFunction1);
      flat3Map0.putAll(flat3Map0);
      assertEquals(3, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      flat3Map0.put("", "/Nh*L*X7s(\"H[YPC.d");
      Flat3Map<String, Comparable<String>> flat3Map1 = new Flat3Map<String, Comparable<String>>(flat3Map0);
      flat3Map1.put((String) null, (Comparable<String>) null);
      assertEquals(1, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>();
      Integer integer0 = new Integer((-4387));
      flat3Map0.putIfAbsent(integer0, integer0);
      boolean boolean0 = flat3Map0.containsValue(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>();
      Integer integer0 = new Integer(290);
      Integer integer1 = new Integer(290);
      flat3Map0.putIfAbsent(integer1, integer0);
      flat3Map0.putIfAbsent(integer0, integer1);
      Integer integer2 = new Integer((-4387));
      boolean boolean0 = flat3Map0.containsValue(integer2);
      assertEquals(2, flat3Map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>();
      Integer integer0 = new Integer(290);
      Integer integer1 = new Integer(290);
      flat3Map0.putIfAbsent(integer1, integer0);
      flat3Map0.putIfAbsent(integer0, integer1);
      boolean boolean0 = flat3Map0.containsValue(integer0);
      assertEquals(2, flat3Map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      flat3Map0.put("", "/Nh*L*X7s(\"H[YC.d");
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>(flat3Map0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      flat3Map1.replaceAll(biFunction0);
      boolean boolean0 = flat3Map1.containsValue((Object) null);
      assertEquals(1, flat3Map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      flat3Map0.put("", "/Nh*L*X7s(\"H[YC.d");
      flat3Map0.put("getKey() can only be called after next() and before remove()", (String) null);
      boolean boolean0 = flat3Map0.containsValue((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      flat3Map0.put("", "/Nh*L*X7s(\"H[YPC.d");
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>(flat3Map0);
      boolean boolean0 = flat3Map1.containsValue((Object) null);
      assertEquals(1, flat3Map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Flat3Map<Integer, String> flat3Map0 = new Flat3Map<Integer, String>();
      Flat3Map.Values<String> flat3Map_Values0 = new Flat3Map.Values<String>(flat3Map0);
      boolean boolean0 = flat3Map_Values0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Flat3Map<Integer, Object> flat3Map0 = new Flat3Map<Integer, Object>();
      boolean boolean0 = flat3Map0.containsValue(flat3Map0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge("oFv|E<-GR`jI=Kg", "oFv|E<-GR`jI=Kg", biFunction0);
      boolean boolean0 = flat3Map0.containsKey(flat3Map0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Flat3Map<AbstractMap.SimpleEntry<Object, Integer>, Object> flat3Map0 = new Flat3Map<AbstractMap.SimpleEntry<Object, Integer>, Object>();
      Flat3Map.FlatMapEntry<AbstractMap.SimpleEntry<Object, Integer>, Object> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<AbstractMap.SimpleEntry<Object, Integer>, Object>(flat3Map0, 3);
      Flat3Map<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> flat3Map1 = new Flat3Map<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Flat3Map.EntrySet<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> flat3Map_EntrySet0 = new Flat3Map.EntrySet<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(flat3Map1);
      boolean boolean0 = flat3Map_EntrySet0.remove(flat3Map_FlatMapEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Flat3Map<HashMap<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Integer>, HashMap<String, Object>> flat3Map0 = new Flat3Map<HashMap<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>, Integer>, HashMap<String, Object>>();
      boolean boolean0 = flat3Map0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Flat3Map<Integer, String> flat3Map0 = new Flat3Map<Integer, String>();
      Integer integer0 = new Integer(2270);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      flat3Map0.compute(integer0, biFunction0);
      boolean boolean0 = flat3Map0.isEmpty();
      assertEquals(1, flat3Map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("AYrn!AwEL>^<7E", "org.apache.commons.collections4.iterators.EmptyMapIterator", biFunction0);
      hashMap0.put("ifyyc7Ml;&z", "org.apache.commons.collections4.iterators.EmptyMapIterator");
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("", "org.apache.commons.collections4.map.Flat3Map$KeySet", biFunction1);
      hashMap0.put("-+F", "");
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>(hashMap0);
      hashMap0.putAll(flat3Map0);
      assertEquals(4, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge("No next() entry in the iteration", "No next() entry in the iteration", biFunction0);
      flat3Map0.putIfAbsent("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", "org.apache.commons.collections4.map.Flat3Map$KeySetIterator");
      Integer integer0 = new Integer(8);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge("org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", "", biFunction1);
      String string0 = flat3Map0.getOrDefault(integer0, "org.apache.commons.collections4.iterator.AbstractEmptyIterator");
      assertEquals("org.apache.commons.collections4.iterator.AbstractEmptyIterator", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Flat3Map<HashMap<String, Integer>, String> flat3Map0 = new Flat3Map<HashMap<String, Integer>, String>();
      flat3Map0.putIfAbsent((HashMap<String, Integer>) null, "org.apache.commons.collections4.map.Flat3Map$FlatMapEntry");
      flat3Map0.replace((HashMap<String, Integer>) null, "r\u0005P");
      assertFalse(flat3Map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge("No next() entry in the iteration", "No next() entry in the iteration", biFunction0);
      flat3Map0.putIfAbsent("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", "org.apache.commons.collections4.map.Flat3Map$KeySetIterator");
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("No next() entry in the iteration").when(biFunction1).apply(any() , anyString());
      flat3Map0.compute((String) null, biFunction1);
      assertEquals(2, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Flat3Map<Integer, String> flat3Map0 = new Flat3Map<Integer, String>();
      Integer integer0 = new Integer(9);
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(anyInt() , any());
      flat3Map0.compute(integer0, biFunction0);
      boolean boolean0 = flat3Map0.remove((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Flat3Map<String, Object> flat3Map0 = new Flat3Map<String, Object>();
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map0.merge((String) null, integer0, biFunction0);
      Flat3Map<AbstractMap.SimpleEntry<String, Integer>, Integer> flat3Map1 = new Flat3Map<AbstractMap.SimpleEntry<String, Integer>, Integer>();
      Flat3Map<String, Integer> flat3Map2 = new Flat3Map<String, Integer>();
      Flat3Map.FlatMapEntry<String, Integer> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<String, Integer>(flat3Map2, 3);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>(flat3Map_FlatMapEntry0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map1.merge(abstractMap_SimpleEntry0, integer0, biFunction1);
      boolean boolean0 = flat3Map1.equals(flat3Map0);
      assertEquals(1, flat3Map1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Flat3Map<String, Flat3Map<Object, Integer>> flat3Map0 = new Flat3Map<String, Flat3Map<Object, Integer>>();
      Flat3Map.KeySet<String> flat3Map_KeySet0 = new Flat3Map.KeySet<String>(flat3Map0);
      boolean boolean0 = flat3Map_KeySet0.remove(flat3Map0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Flat3Map<String, Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>> flat3Map0 = new Flat3Map<String, Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>>();
      Flat3Map.KeySet<String> flat3Map_KeySet0 = new Flat3Map.KeySet<String>(flat3Map0);
      boolean boolean0 = flat3Map_KeySet0.contains(flat3Map0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      Flat3Map.KeySet<String> flat3Map_KeySet0 = new Flat3Map.KeySet<String>(flat3Map0);
      flat3Map_KeySet0.clear();
      assertEquals(0, flat3Map_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Flat3Map<String, String> flat3Map0 = new Flat3Map<String, String>();
      flat3Map0.put("", "/Nh*L*X7s(\"H[YPC.d");
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>(flat3Map0);
      Flat3Map<Object, Object> flat3Map2 = flat3Map1.clone();
      boolean boolean0 = flat3Map2.equals(flat3Map1);
      assertFalse(flat3Map0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Flat3Map<Object, Flat3Map<String, Object>> flat3Map0 = new Flat3Map<Object, Flat3Map<String, Object>>();
      Flat3Map.Values<Flat3Map<String, Object>> flat3Map_Values0 = new Flat3Map.Values<Flat3Map<String, Object>>(flat3Map0);
      flat3Map_Values0.clear();
      assertEquals(0, flat3Map_Values0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Flat3Map<AbstractMap.SimpleEntry<Object, String>, Object> flat3Map0 = new Flat3Map<AbstractMap.SimpleEntry<Object, String>, Object>();
      Flat3Map.EntrySet<AbstractMap.SimpleEntry<Object, String>, Object> flat3Map_EntrySet0 = new Flat3Map.EntrySet<AbstractMap.SimpleEntry<Object, String>, Object>(flat3Map0);
      flat3Map_EntrySet0.clear();
      assertEquals(0, flat3Map_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Flat3Map<Integer, String> flat3Map0 = new Flat3Map<Integer, String>();
      Flat3Map.EntrySet<Integer, String> flat3Map_EntrySet0 = new Flat3Map.EntrySet<Integer, String>(flat3Map0);
      int int0 = flat3Map_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Flat3Map<Comparable<String>, AbstractMap.SimpleEntry<Integer, Object>> flat3Map0 = new Flat3Map<Comparable<String>, AbstractMap.SimpleEntry<Integer, Object>>();
      Flat3Map.FlatMapIterator<Comparable<String>, AbstractMap.SimpleEntry<Integer, Object>> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Comparable<String>, AbstractMap.SimpleEntry<Integer, Object>>(flat3Map0);
      flat3Map_FlatMapIterator0.reset();
      assertFalse(flat3Map_FlatMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Flat3Map<Comparable<String>, String> flat3Map0 = new Flat3Map<Comparable<String>, String>();
      Flat3Map.FlatMapIterator<Comparable<String>, String> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Comparable<String>, String>(flat3Map0);
      // Undeclared exception!
      try { 
        flat3Map_FlatMapIterator0.setValue("~MOC(Ut}");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Flat3Map<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> flat3Map0 = new Flat3Map<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractHashedMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractHashedMap0 = flat3Map0.createDelegateMap();
      assertEquals(0, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Flat3Map<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Integer, String>> flat3Map0 = new Flat3Map<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Integer, String>>();
      Flat3Map.EntrySetIterator<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Integer, String>> flat3Map_EntrySetIterator0 = new Flat3Map.EntrySetIterator<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Integer, String>>(flat3Map0);
      // Undeclared exception!
      try { 
        flat3Map_EntrySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$EntryIterator", e);
      }
  }
}
