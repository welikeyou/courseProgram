/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:05:35 GMT 2019
 */

package org.apache.commons.collections4.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.apache.commons.collections4.set.CompositeSet;
import org.apache.commons.collections4.set.EmptySetMutator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompositeSet_ESTest extends CompositeSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      LinkedHashSet<String> linkedHashSet1 = null;
      CompositeSet<String> compositeSet0 = new CompositeSet<String>((Set<String>) null);
      // Undeclared exception!
      try { 
        compositeSet0.contains(linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      CompositeSet<String> compositeSet0 = new CompositeSet<String>(linkedHashSet0);
      compositeSet0.contains(linkedHashSet0);
      LinkedHashSet<LinkedList<String>> linkedHashSet1 = new LinkedHashSet<LinkedList<String>>();
      CompositeSet<LinkedList<String>> compositeSet1 = new CompositeSet<LinkedList<String>>(linkedHashSet1);
      compositeSet1.removeComposited(linkedHashSet1);
      compositeSet1.iterator();
      LinkedHashSet<Set<Object>> linkedHashSet2 = new LinkedHashSet<Set<Object>>();
      CompositeSet<Set<Object>> compositeSet2 = new CompositeSet<Set<Object>>(linkedHashSet2);
      LinkedList<Set<Object>>[] linkedListArray0 = (LinkedList<Set<Object>>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<Set<Object>> linkedList0 = new LinkedList<Set<Object>>();
      linkedListArray0[2] = linkedList0;
      LinkedList<Set<Object>> linkedList1 = new LinkedList<Set<Object>>();
      linkedListArray0[1] = linkedList0;
      LinkedList<Set<Object>> linkedList2 = new LinkedList<Set<Object>>();
      linkedListArray0[2] = linkedList2;
      compositeSet2.toArray(linkedListArray0);
      Set<String>[] setArray0 = (Set<String>[]) Array.newInstance(Set.class, 1);
      setArray0[0] = (Set<String>) linkedHashSet0;
      // Undeclared exception!
      try { 
        compositeSet0.addComposited(setArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 0);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(setArray0);
      compositeSet0.size();
      LinkedHashSet<LinkedList<Object>> linkedHashSet0 = new LinkedHashSet<LinkedList<Object>>();
      CompositeSet<LinkedList<Object>> compositeSet1 = new CompositeSet<LinkedList<Object>>(linkedHashSet0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      compositeSet1.removeAll(linkedList0);
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      CompositeSet<String> compositeSet2 = new CompositeSet<String>(linkedHashSet1);
      compositeSet2.toSet();
      linkedHashSet1.add((String) null);
      compositeSet2.remove((Object) null);
      compositeSet0.toArray();
      compositeSet2.isEmpty();
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "V[npLM)NQ[F\"AM");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      compositeSet3.removeIf(predicate3);
      compositeSet3.toSet();
      compositeSet2.getSets();
      CompositeSet<LinkedHashSet<Object>> compositeSet4 = new CompositeSet<LinkedHashSet<Object>>();
      CompositeSet<LinkedHashSet<Object>> compositeSet5 = new CompositeSet<LinkedHashSet<Object>>(compositeSet4);
      // Undeclared exception!
      try { 
        compositeSet5.addAll(compositeSet4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      Set<String> set0 = null;
      CompositeSet<String> compositeSet1 = new CompositeSet<String>((Set<String>) null);
      // Undeclared exception!
      try { 
        compositeSet1.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>((Set<Integer>) null);
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 2);
      Set<Object>[] setArray1 = (Set<Object>[]) Array.newInstance(Set.class, 4);
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>();
      CompositeSet<Object> compositeSet2 = new CompositeSet<Object>(compositeSet1);
      CompositeSet<Object> compositeSet3 = new CompositeSet<Object>(compositeSet2);
      setArray1[0] = (Set<Object>) compositeSet3;
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setArray1[1] = (Set<Object>) linkedHashSet0;
      CompositeSet<Object> compositeSet4 = new CompositeSet<Object>(setArray1[0]);
      setArray1[2] = (Set<Object>) compositeSet4;
      CompositeSet<Object> compositeSet5 = new CompositeSet<Object>(compositeSet1);
      setArray1[3] = (Set<Object>) compositeSet5;
      CompositeSet<Object> compositeSet6 = new CompositeSet<Object>(setArray1);
      // Undeclared exception!
      try { 
        compositeSet0.remove(compositeSet6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      CompositeSet<String> compositeSet0 = new CompositeSet<String>(linkedHashSet0);
      compositeSet0.contains(linkedHashSet0);
      LinkedHashSet<LinkedList<String>> linkedHashSet1 = new LinkedHashSet<LinkedList<String>>();
      CompositeSet<LinkedList<String>> compositeSet1 = new CompositeSet<LinkedList<String>>(linkedHashSet1);
      compositeSet1.iterator();
      LinkedHashSet<Set<Object>> linkedHashSet2 = new LinkedHashSet<Set<Object>>();
      CompositeSet<Set<Object>> compositeSet2 = new CompositeSet<Set<Object>>(linkedHashSet2);
      LinkedList<Set<Object>>[] linkedListArray0 = (LinkedList<Set<Object>>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<Set<Object>> linkedList0 = new LinkedList<Set<Object>>();
      LinkedHashSet<Object> linkedHashSet3 = new LinkedHashSet<Object>(compositeSet2);
      CompositeSet<Object> compositeSet3 = new CompositeSet<Object>(linkedHashSet3);
      linkedHashSet2.add(compositeSet3);
      linkedListArray0[0] = linkedList0;
      LinkedList<Set<Object>> linkedList1 = new LinkedList<Set<Object>>();
      linkedListArray0[1] = linkedList1;
      LinkedList<Set<Object>> linkedList2 = new LinkedList<Set<Object>>();
      linkedListArray0[2] = linkedList2;
      // Undeclared exception!
      try { 
        compositeSet2.toArray(linkedListArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.collections4.set.CompositeSet
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 6);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      setArray0[5] = (Set<Integer>) compositeSet0;
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      linkedHashSet1.add("org.apache.commons.collections4.CollectionUtils$CardinalityHelper");
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(linkedHashSet1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compositeSet1.forEach(consumer0);
      compositeSet0.equals(compositeSet1);
      CompositeSet<Integer> compositeSet2 = null;
      try {
        compositeSet2 = new CompositeSet<Integer>(setArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.clear();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.poll();
      Integer integer0 = new Integer((-566));
      linkedList0.add((Object) integer0);
      linkedHashSet0.add(linkedList0);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      compositeSet0.toArray();
      Set<Object> set0 = compositeSet0.toSet();
      assertFalse(set0.isEmpty());
      
      compositeSet0.iterator();
      CompositeSet<Set<Object>> compositeSet1 = new CompositeSet<Set<Object>>();
      compositeSet1.getSets();
      CompositeSet<Set<Integer>> compositeSet2 = new CompositeSet<Set<Integer>>();
      CompositeSet<Set<Integer>> compositeSet3 = new CompositeSet<Set<Integer>>();
      compositeSet2.addComposited((Set<Set<Integer>>) compositeSet3);
      boolean boolean0 = compositeSet2.isEmpty();
      assertTrue(compositeSet2.equals((Object)compositeSet3));
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      boolean boolean1 = compositeSet0.equals(linkedHashSet1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      CompositeSet<String> compositeSet0 = new CompositeSet<String>(linkedHashSet0);
      LinkedHashSet<LinkedList<String>> linkedHashSet1 = new LinkedHashSet<LinkedList<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedHashSet1.add(linkedList0);
      CompositeSet<LinkedList<String>> compositeSet1 = new CompositeSet<LinkedList<String>>(linkedHashSet1);
      compositeSet1.iterator();
      LinkedHashSet<Set<Object>> linkedHashSet2 = new LinkedHashSet<Set<Object>>();
      CompositeSet<Set<Object>> compositeSet2 = new CompositeSet<Set<Object>>(linkedHashSet2);
      LinkedList<Set<Object>>[] linkedListArray0 = (LinkedList<Set<Object>>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<Set<Object>> linkedList1 = new LinkedList<Set<Object>>();
      linkedListArray0[0] = linkedList1;
      LinkedList<Set<Object>> linkedList2 = new LinkedList<Set<Object>>();
      LinkedList<Set<Object>> linkedList3 = new LinkedList<Set<Object>>();
      linkedListArray0[2] = linkedList3;
      compositeSet0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 0);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(setArray0);
      compositeSet0.size();
      LinkedHashSet<LinkedList<Object>> linkedHashSet0 = new LinkedHashSet<LinkedList<Object>>();
      CompositeSet<LinkedList<Object>> compositeSet1 = new CompositeSet<LinkedList<Object>>(linkedHashSet0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedHashSet0.add(linkedList0);
      compositeSet1.containsAll(linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      compositeSet1.removeAll(linkedList1);
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      CompositeSet<String> compositeSet2 = new CompositeSet<String>(linkedHashSet1);
      compositeSet2.toSet();
      compositeSet2.remove((Object) null);
      linkedHashSet1.add("Collision adding composited set with no SetMutator set");
      compositeSet0.toArray();
      compositeSet2.isEmpty();
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "V[npLM)NQ[F\"AM");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      compositeSet3.removeIf(predicate3);
      Set<LinkedHashSet<Integer>> set0 = compositeSet3.toSet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      compositeSet0.containsAll(linkedHashSet0);
      Integer integer0 = new Integer(10);
      linkedHashSet0.add(integer0);
      compositeSet0.hashCode();
      compositeSet0.containsAll(linkedHashSet0);
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 8);
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>();
      setArray0[0] = (Set<Object>) compositeSet1;
      CompositeSet<Object> compositeSet2 = new CompositeSet<Object>();
      CompositeSet<Object> compositeSet3 = new CompositeSet<Object>(compositeSet2);
      setArray0[1] = (Set<Object>) compositeSet3;
      Set<Object>[] setArray1 = (Set<Object>[]) Array.newInstance(Set.class, 4);
      setArray1[0] = (Set<Object>) compositeSet3;
      setArray1[1] = (Set<Object>) compositeSet1;
      setArray1[2] = (Set<Object>) compositeSet3;
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      setArray1[3] = (Set<Object>) linkedHashSet1;
      CompositeSet<LinkedList<Integer>> compositeSet4 = new CompositeSet<LinkedList<Integer>>();
      CompositeSet<LinkedList<Integer>> compositeSet5 = new CompositeSet<LinkedList<Integer>>(compositeSet4);
      CompositeSet<LinkedList<Integer>> compositeSet6 = new CompositeSet<LinkedList<Integer>>(compositeSet5);
      EmptySetMutator<LinkedList<Integer>> emptySetMutator0 = new EmptySetMutator<LinkedList<Integer>>(compositeSet6);
      LinkedList<Set<LinkedList<Integer>>> linkedList0 = new LinkedList<Set<LinkedList<Integer>>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        emptySetMutator0.add(compositeSet4, linkedList0, linkedList1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.clear();
      linkedHashSet0.add((String) null);
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 3);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet1);
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(compositeSet0);
      setArray0[0] = (Set<Integer>) compositeSet1;
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      setArray0[1] = (Set<Integer>) linkedHashSet2;
      LinkedHashSet<Integer> linkedHashSet3 = new LinkedHashSet<Integer>();
      setArray0[2] = (Set<Integer>) linkedHashSet3;
      linkedHashSet3.add((Integer) null);
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(setArray0);
      linkedHashSet0.retainAll(compositeSet2);
      CompositeSet<String> compositeSet3 = new CompositeSet<String>(linkedHashSet0);
      compositeSet3.contains(linkedHashSet0);
      LinkedHashSet<LinkedList<String>> linkedHashSet4 = new LinkedHashSet<LinkedList<String>>();
      CompositeSet<LinkedList<String>> compositeSet4 = new CompositeSet<LinkedList<String>>(linkedHashSet4);
      compositeSet4.iterator();
      LinkedHashSet<Set<Object>> linkedHashSet5 = new LinkedHashSet<Set<Object>>();
      CompositeSet<Set<Object>> compositeSet5 = new CompositeSet<Set<Object>>(linkedHashSet5);
      LinkedList<Set<Object>>[] linkedListArray0 = (LinkedList<Set<Object>>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<Set<Object>> linkedList0 = new LinkedList<Set<Object>>();
      linkedListArray0[0] = linkedList0;
      LinkedList<Set<Object>> linkedList1 = new LinkedList<Set<Object>>();
      linkedListArray0[1] = linkedList1;
      LinkedList<Set<Object>> linkedList2 = new LinkedList<Set<Object>>();
      linkedListArray0[2] = linkedList2;
      compositeSet5.toArray(linkedListArray0);
      boolean boolean0 = compositeSet3.remove(compositeSet1);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<LinkedList<String>> linkedHashSet0 = new LinkedHashSet<LinkedList<String>>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      Set<Object> set0 = compositeSet0.toSet();
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(set0);
      Set<Set<Object>>[] setArray0 = (Set<Set<Object>>[]) Array.newInstance(Set.class, 4);
      Set<CompositeSet<Integer>>[] setArray1 = (Set<CompositeSet<Integer>>[]) Array.newInstance(Set.class, 0);
      CompositeSet<CompositeSet<Integer>> compositeSet2 = new CompositeSet<CompositeSet<Integer>>(setArray1);
      compositeSet2.addComposited(setArray1);
      CompositeSet<String> compositeSet3 = new CompositeSet<String>();
      compositeSet3.removeAll(linkedHashSet0);
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>((Set<Integer>) null);
      // Undeclared exception!
      try { 
        compositeSet4.equals(set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedHashSet<LinkedList<Object>> linkedHashSet1 = new LinkedHashSet<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedHashSet1.add(linkedList0);
      CompositeSet<LinkedList<Object>> compositeSet0 = new CompositeSet<LinkedList<Object>>(linkedHashSet1);
      CompositeSet<LinkedList<Object>> compositeSet1 = new CompositeSet<LinkedList<Object>>(compositeSet0);
      compositeSet1.hashCode();
      Set<LinkedHashSet<String>>[] setArray0 = (Set<LinkedHashSet<String>>[]) Array.newInstance(Set.class, 3);
      CompositeSet<LinkedHashSet<String>> compositeSet2 = null;
      try {
        compositeSet2 = new CompositeSet<LinkedHashSet<String>>(setArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      CompositeSet<String> compositeSet1 = new CompositeSet<String>((Set<String>) null);
      CompositeSet<String> compositeSet2 = new CompositeSet<String>(compositeSet1);
      CompositeSet<String> compositeSet3 = new CompositeSet<String>(compositeSet2);
      // Undeclared exception!
      try { 
        compositeSet3.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompositeSet<Set<Object>> compositeSet0 = new CompositeSet<Set<Object>>((Set<Set<Object>>) null);
      CompositeSet<String> compositeSet1 = new CompositeSet<String>();
      // Undeclared exception!
      try { 
        compositeSet1.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(compositeSet0);
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = compositeSet1.toArray(objectArray0);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      Set<LinkedHashSet<Integer>>[] setArray0 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 5);
      setArray0[0] = (Set<LinkedHashSet<Integer>>) compositeSet0;
      setArray0[1] = (Set<LinkedHashSet<Integer>>) compositeSet0;
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>();
      setArray0[2] = (Set<LinkedHashSet<Integer>>) compositeSet1;
      setArray0[3] = (Set<LinkedHashSet<Integer>>) compositeSet0;
      setArray0[4] = (Set<LinkedHashSet<Integer>>) compositeSet0;
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      compositeSet0.addComposited((Set<LinkedHashSet<Integer>>) compositeSet2);
      compositeSet0.toArray();
      compositeSet0.toArray();
      Set<LinkedHashSet<Set<Object>>>[] setArray1 = null;
      CompositeSet<LinkedHashSet<Set<Object>>> compositeSet3 = new CompositeSet<LinkedHashSet<Set<Object>>>(setArray1);
      CompositeSet<LinkedHashSet<Set<Object>>> compositeSet4 = new CompositeSet<LinkedHashSet<Set<Object>>>(compositeSet3);
      CompositeSet<LinkedHashSet<Set<Object>>> compositeSet5 = new CompositeSet<LinkedHashSet<Set<Object>>>(compositeSet4);
      compositeSet5.toArray();
      CompositeSet<CompositeSet<Integer>> compositeSet6 = new CompositeSet<CompositeSet<Integer>>();
      compositeSet6.toSet();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Integer>>();
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>(linkedHashSet0);
      compositeSet0.clear();
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet0);
      List<Set<LinkedHashSet<Integer>>> list0 = compositeSet1.getSets();
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet1);
      compositeSet2.removeAll(list0);
      compositeSet2.equals("org.apache.commons.collections4.set.CompositeSet");
      compositeSet2.containsAll(compositeSet1);
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 8);
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>();
      setArray0[0] = (Set<Integer>) compositeSet3;
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>();
      setArray0[1] = (Set<Integer>) compositeSet4;
      CompositeSet<Integer> compositeSet5 = null;
      try {
        compositeSet5 = new CompositeSet<Integer>(setArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      compositeSet0.iterator();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(compositeSet0);
      linkedHashSet0.add(compositeSet0);
      linkedHashSet0.stream();
      linkedHashSet0.addAll(compositeSet0);
      linkedHashSet0.add(compositeSet0);
      compositeSet0.stream();
      compositeSet0.toSet();
      compositeSet0.containsAll(linkedHashSet0);
      compositeSet0.getSets();
      Set<LinkedList<Integer>>[] setArray0 = (Set<LinkedList<Integer>>[]) Array.newInstance(Set.class, 0);
      CompositeSet<LinkedList<Integer>> compositeSet1 = new CompositeSet<LinkedList<Integer>>(setArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        compositeSet1.add(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(compositeSet0);
      LinkedHashSet<Set<Object>> linkedHashSet1 = new LinkedHashSet<Set<Object>>();
      CompositeSet<Set<Object>> compositeSet2 = new CompositeSet<Set<Object>>(linkedHashSet1);
      linkedHashSet1.clear();
      Integer integer0 = new Integer((-2250));
      linkedHashSet0.add(integer0);
      compositeSet2.equals("@`tyu.Y6lerJSZ.Nht");
      // Undeclared exception!
      try { 
        compositeSet0.addComposited((Set<Integer>) compositeSet1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      Set<Set<Object>>[] setArray0 = (Set<Set<Object>>[]) Array.newInstance(Set.class, 0);
      CompositeSet<Set<Object>> compositeSet1 = new CompositeSet<Set<Object>>(setArray0);
      compositeSet1.iterator();
      compositeSet0.removeAll(compositeSet1);
      Set<String>[] setArray1 = (Set<String>[]) Array.newInstance(Set.class, 1);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      setArray1[0] = (Set<String>) linkedHashSet0;
      CompositeSet<String> compositeSet2 = new CompositeSet<String>(setArray1);
      compositeSet2.getMutator();
      CompositeSet<Set<String>> compositeSet3 = new CompositeSet<Set<String>>((Set<Set<String>>) null);
      EmptySetMutator<Set<String>> emptySetMutator0 = new EmptySetMutator<Set<String>>(compositeSet3);
      compositeSet3.setMutator(emptySetMutator0);
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>((Set<Integer>) null);
      // Undeclared exception!
      try { 
        compositeSet4.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Set<String>[] setArray0 = (Set<String>[]) Array.newInstance(Set.class, 3);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      setArray0[0] = (Set<String>) linkedHashSet0;
      linkedHashSet0.add("[$?n0@");
      CompositeSet<String> compositeSet0 = new CompositeSet<String>(setArray0[0]);
      linkedHashSet0.add("[$?n0@");
      setArray0[1] = (Set<String>) compositeSet0;
      CompositeSet<String> compositeSet1 = null;
      try {
        compositeSet1 = new CompositeSet<String>(setArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add((Object) null);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      // Undeclared exception!
      try { 
        compositeSet0.addComposited((Set<Object>) linkedHashSet0, (Set<Object>) linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompositeSet<Set<Object>> compositeSet0 = new CompositeSet<Set<Object>>((Set<Set<Object>>) null);
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>();
      compositeSet1.size();
      // Undeclared exception!
      try { 
        compositeSet1.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 3);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      setArray0[0] = (Set<Object>) compositeSet0;
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>();
      setArray0[1] = (Set<Object>) compositeSet1;
      CompositeSet<Object> compositeSet2 = new CompositeSet<Object>(setArray0[1]);
      setArray0[2] = (Set<Object>) compositeSet2;
      compositeSet2.containsAll(setArray0[2]);
      compositeSet2.addComposited((Set<Object>) compositeSet1);
      CompositeSet<Object> compositeSet3 = new CompositeSet<Object>(setArray0);
      compositeSet3.addComposited((Set<Object>) compositeSet1);
      compositeSet0.toSet();
      CompositeSet<Set<Object>> compositeSet4 = new CompositeSet<Set<Object>>();
      EmptySetMutator<Set<Object>> emptySetMutator0 = new EmptySetMutator<Set<Object>>(compositeSet4);
      CompositeSet<Integer> compositeSet5 = new CompositeSet<Integer>((Set<Integer>) null);
      // Undeclared exception!
      try { 
        compositeSet5.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Set<Set<Integer>> set0 = null;
      CompositeSet<Set<Integer>> compositeSet0 = new CompositeSet<Set<Integer>>((Set<Set<Integer>>) null);
      CompositeSet<Set<Integer>> compositeSet1 = new CompositeSet<Set<Integer>>(compositeSet0);
      // Undeclared exception!
      try { 
        compositeSet1.removeComposited(compositeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Set<String>[] setArray0 = (Set<String>[]) Array.newInstance(Set.class, 1);
      CompositeSet<String> compositeSet0 = new CompositeSet<String>(setArray0);
      CompositeSet<String> compositeSet1 = new CompositeSet<String>(compositeSet0);
      setArray0[0] = (Set<String>) compositeSet1;
      CompositeSet<String> compositeSet2 = new CompositeSet<String>(setArray0);
      compositeSet2.getMutator();
      Set<Object>[] setArray1 = (Set<Object>[]) Array.newInstance(Set.class, 1);
      // Undeclared exception!
      try { 
        compositeSet2.toSet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompositeSet<LinkedHashSet<Object>> compositeSet0 = new CompositeSet<LinkedHashSet<Object>>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("'T*j4?X#W++Q,");
      compositeSet0.retainAll(linkedHashSet0);
      LinkedHashSet<Set<Object>> linkedHashSet1 = new LinkedHashSet<Set<Object>>();
      EmptySetMutator<LinkedHashSet<Object>> emptySetMutator0 = new EmptySetMutator<LinkedHashSet<Object>>(compositeSet0);
      compositeSet0.setMutator(emptySetMutator0);
      compositeSet0.retainAll(linkedHashSet1);
      compositeSet0.isEmpty();
      Set<Set<Object>>[] setArray0 = (Set<Set<Object>>[]) Array.newInstance(Set.class, 5);
      setArray0[0] = (Set<Set<Object>>) linkedHashSet1;
      setArray0[1] = (Set<Set<Object>>) linkedHashSet1;
      setArray0[2] = (Set<Set<Object>>) linkedHashSet1;
      LinkedHashSet<Set<Object>> linkedHashSet2 = new LinkedHashSet<Set<Object>>();
      setArray0[3] = (Set<Set<Object>>) linkedHashSet2;
      setArray0[4] = (Set<Set<Object>>) linkedHashSet1;
      CompositeSet<Set<Object>> compositeSet1 = new CompositeSet<Set<Object>>(setArray0);
      compositeSet1.toArray();
      compositeSet1.addComposited(setArray0[4], (Set<Set<Object>>) linkedHashSet2);
      CompositeSet<Object> compositeSet2 = new CompositeSet<Object>();
      Set<Object> set0 = compositeSet2.toSet();
      EmptySetMutator<Object> emptySetMutator1 = new EmptySetMutator<Object>(set0);
      // Undeclared exception!
      try { 
        emptySetMutator1.resolveCollision(compositeSet2, set0, compositeSet2, set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.EmptySetMutator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<LinkedList<Object>> linkedHashSet0 = new LinkedHashSet<LinkedList<Object>>();
      EmptySetMutator<LinkedList<Object>> emptySetMutator0 = new EmptySetMutator<LinkedList<Object>>(linkedHashSet0);
      CompositeSet<LinkedList<Object>> compositeSet0 = new CompositeSet<LinkedList<Object>>();
      LinkedList<Set<LinkedList<Object>>> linkedList0 = new LinkedList<Set<LinkedList<Object>>>();
      boolean boolean0 = emptySetMutator0.addAll(compositeSet0, linkedList0, compositeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompositeSet<Set<Object>> compositeSet0 = new CompositeSet<Set<Object>>();
      compositeSet0.parallelStream();
      compositeSet0.equals("$VW G4p0p");
      CompositeSet<LinkedHashSet<Object>> compositeSet1 = new CompositeSet<LinkedHashSet<Object>>();
      List<Set<LinkedHashSet<Object>>> list0 = compositeSet1.getSets();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 3);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      Set<Object> set0 = compositeSet0.toSet();
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(set0);
      setArray0[0] = (Set<Object>) compositeSet1;
      CompositeSet<Object> compositeSet2 = new CompositeSet<Object>(compositeSet1);
      compositeSet2.removeAll(set0);
      setArray0[1] = (Set<Object>) compositeSet2;
      CompositeSet<Object> compositeSet3 = new CompositeSet<Object>(compositeSet2);
      compositeSet1.removeAll(compositeSet3);
      setArray0[2] = (Set<Object>) compositeSet3;
      compositeSet1.removeAll(setArray0[0]);
      CompositeSet<Object> compositeSet4 = new CompositeSet<Object>(setArray0[1]);
      compositeSet3.addComposited((Set<Object>) compositeSet4);
      CompositeSet<Object> compositeSet5 = new CompositeSet<Object>(setArray0);
      compositeSet5.isEmpty();
      CompositeSet<String> compositeSet6 = new CompositeSet<String>();
      compositeSet6.getMutator();
      Set<LinkedList<Integer>>[] setArray1 = (Set<LinkedList<Integer>>[]) Array.newInstance(Set.class, 4);
      CompositeSet<LinkedList<Integer>> compositeSet7 = new CompositeSet<LinkedList<Integer>>();
      CompositeSet<LinkedList<Integer>> compositeSet8 = new CompositeSet<LinkedList<Integer>>(compositeSet7);
      setArray1[0] = (Set<LinkedList<Integer>>) compositeSet8;
      CompositeSet<LinkedList<Integer>> compositeSet9 = null;
      try {
        compositeSet9 = new CompositeSet<LinkedList<Integer>>(setArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>((Set<Integer>) null);
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(compositeSet0);
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(compositeSet1);
      // Undeclared exception!
      try { 
        compositeSet2.addComposited((Set<Integer>) compositeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 3);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setArray0[0] = (Set<Object>) linkedHashSet0;
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      Set<Object> set0 = compositeSet0.toSet();
      setArray0[1] = set0;
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      setArray0[2] = (Set<Object>) linkedHashSet1;
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(setArray0);
      CompositeSet<Object> compositeSet2 = new CompositeSet<Object>(compositeSet1);
      CompositeSet<Object> compositeSet3 = new CompositeSet<Object>(compositeSet2);
      CompositeSet<Object> compositeSet4 = new CompositeSet<Object>(compositeSet3);
      CompositeSet<Object> compositeSet5 = new CompositeSet<Object>(compositeSet4);
      int int0 = compositeSet5.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Set<LinkedList<Object>>[] setArray0 = (Set<LinkedList<Object>>[]) Array.newInstance(Set.class, 4);
      CompositeSet<LinkedList<Object>> compositeSet0 = new CompositeSet<LinkedList<Object>>();
      setArray0[0] = (Set<LinkedList<Object>>) compositeSet0;
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedListArray0[0] = linkedList0;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedListArray0[1] = linkedList1;
      LinkedList<Integer>[] linkedListArray1 = compositeSet0.toArray(linkedListArray0);
      assertEquals(2, linkedListArray1.length);
      
      CompositeSet<LinkedList<Object>> compositeSet1 = new CompositeSet<LinkedList<Object>>();
      setArray0[1] = (Set<LinkedList<Object>>) compositeSet1;
      LinkedHashSet<LinkedList<Object>> linkedHashSet0 = new LinkedHashSet<LinkedList<Object>>();
      setArray0[2] = (Set<LinkedList<Object>>) linkedHashSet0;
      LinkedHashSet<LinkedList<Object>> linkedHashSet1 = new LinkedHashSet<LinkedList<Object>>();
      Object object0 = new Object();
      linkedHashSet0.contains(object0);
      setArray0[3] = (Set<LinkedList<Object>>) linkedHashSet1;
      Set<LinkedList<Object>>[] setArray1 = (Set<LinkedList<Object>>[]) Array.newInstance(Set.class, 3);
      setArray1[0] = (Set<LinkedList<Object>>) linkedHashSet1;
      setArray1[1] = (Set<LinkedList<Object>>) linkedHashSet1;
      setArray1[2] = (Set<LinkedList<Object>>) linkedHashSet1;
      compositeSet0.addComposited(setArray1);
      CompositeSet<LinkedList<Object>> compositeSet2 = new CompositeSet<LinkedList<Object>>(setArray0);
      compositeSet2.clear();
      assertTrue(compositeSet2.equals((Object)compositeSet0));
      
      LinkedHashSet<String> linkedHashSet2 = new LinkedHashSet<String>();
      linkedHashSet2.add("");
      CompositeSet<String> compositeSet3 = new CompositeSet<String>(linkedHashSet2);
      Set<String> set0 = compositeSet3.toSet();
      assertTrue(set0.contains(""));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>((Set<Object>) null);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-3160));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3160));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(367);
      integerArray0[2] = integer2;
      int int0 = 0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1156);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(367);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      // Undeclared exception!
      try { 
        compositeSet0.toArray(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 1);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(setArray0);
      setArray0[0] = (Set<Object>) compositeSet0;
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(setArray0);
      // Undeclared exception!
      try { 
        compositeSet1.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 5);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setArray0[0] = (Set<Object>) linkedHashSet0;
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(setArray0[0]);
      Set<Object> set0 = compositeSet0.toSet();
      setArray0[1] = set0;
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      setArray0[2] = (Set<Object>) linkedHashSet1;
      LinkedHashSet<Object> linkedHashSet2 = new LinkedHashSet<Object>();
      setArray0[3] = (Set<Object>) linkedHashSet2;
      LinkedHashSet<Object> linkedHashSet3 = new LinkedHashSet<Object>();
      setArray0[4] = (Set<Object>) linkedHashSet3;
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(setArray0);
      boolean boolean0 = compositeSet1.isEmpty();
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EmptySetMutator<String> emptySetMutator0 = new EmptySetMutator<String>(linkedHashSet0);
      CompositeSet<String> compositeSet0 = new CompositeSet<String>();
      LinkedList<Set<String>> linkedList0 = new LinkedList<Set<String>>();
      compositeSet0.contains(linkedHashSet0);
      emptySetMutator0.add(compositeSet0, linkedList0, "");
      CompositeSet<Set<Object>> compositeSet1 = new CompositeSet<Set<Object>>();
      compositeSet1.size();
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 2);
      CompositeSet<Object> compositeSet2 = new CompositeSet<Object>();
      Set<Object> set0 = compositeSet2.toSet();
      CompositeSet<Object> compositeSet3 = new CompositeSet<Object>(set0);
      setArray0[0] = (Set<Object>) compositeSet3;
      CompositeSet<Object> compositeSet4 = new CompositeSet<Object>();
      setArray0[1] = (Set<Object>) compositeSet4;
      CompositeSet<Object> compositeSet5 = new CompositeSet<Object>(setArray0);
      boolean boolean0 = compositeSet5.contains("");
      boolean boolean1 = compositeSet5.containsAll(compositeSet4);
      assertFalse(boolean1 == boolean0);
      
      compositeSet5.clear();
      assertTrue(compositeSet5.equals((Object)compositeSet2));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EmptySetMutator<String> emptySetMutator0 = new EmptySetMutator<String>((Set<String>) null);
      CompositeSet<String> compositeSet0 = new CompositeSet<String>((Set<String>) null);
      LinkedList<Set<String>> linkedList0 = new LinkedList<Set<String>>();
      // Undeclared exception!
      try { 
        emptySetMutator0.add(compositeSet0, linkedList0, "Collision adding composited set with no SetMutator set");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.EmptySetMutator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompositeSet<LinkedList<Object>> compositeSet0 = new CompositeSet<LinkedList<Object>>((Set<LinkedList<Object>>) null);
      // Undeclared exception!
      try { 
        compositeSet0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 2);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      compositeSet0.retainAll((Collection<?>) null);
      Integer integer0 = new Integer((-769));
      // Undeclared exception!
      try { 
        compositeSet0.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 0);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(setArray0);
      compositeSet0.stream();
      compositeSet0.addComposited(setArray0);
      CompositeSet<String> compositeSet1 = new CompositeSet<String>();
      compositeSet1.removeAll(compositeSet0);
      compositeSet1.iterator();
      CompositeSet<Object> compositeSet2 = new CompositeSet<Object>();
      CompositeSet<Object> compositeSet3 = new CompositeSet<Object>(compositeSet2);
      CompositeSet<Object> compositeSet4 = new CompositeSet<Object>(compositeSet3);
      // Undeclared exception!
      try { 
        compositeSet2.add("Aa@U");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompositeSet<String> compositeSet0 = new CompositeSet<String>();
      Integer integer0 = new Integer((-2569));
      boolean boolean0 = compositeSet0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedHashSet<LinkedHashSet<String>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<String>>(0);
      CompositeSet<LinkedHashSet<String>> compositeSet0 = new CompositeSet<LinkedHashSet<String>>(linkedHashSet0);
      boolean boolean0 = compositeSet0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompositeSet<LinkedList<Object>> compositeSet0 = new CompositeSet<LinkedList<Object>>();
      compositeSet0.addComposited((Set<LinkedList<Object>>) null);
      // Undeclared exception!
      try { 
        compositeSet0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      compositeSet0.removeComposited(compositeSet0);
      CompositeSet<LinkedList<String>> compositeSet1 = new CompositeSet<LinkedList<String>>();
      CompositeSet<LinkedList<String>> compositeSet2 = new CompositeSet<LinkedList<String>>(compositeSet1);
      CompositeSet<LinkedList<String>> compositeSet3 = new CompositeSet<LinkedList<String>>(compositeSet2);
      LinkedHashSet<LinkedList<String>> linkedHashSet0 = new LinkedHashSet<LinkedList<String>>();
      CompositeSet<LinkedList<String>> compositeSet4 = new CompositeSet<LinkedList<String>>(compositeSet3);
      assertTrue(compositeSet4.equals((Object)compositeSet2));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Set<String>[] setArray0 = (Set<String>[]) Array.newInstance(Set.class, 8);
      CompositeSet<String> compositeSet0 = new CompositeSet<String>();
      setArray0[0] = (Set<String>) compositeSet0;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      setArray0[1] = (Set<String>) linkedHashSet0;
      CompositeSet<String> compositeSet1 = new CompositeSet<String>();
      setArray0[2] = (Set<String>) compositeSet1;
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      setArray0[3] = (Set<String>) linkedHashSet1;
      CompositeSet<String> compositeSet2 = new CompositeSet<String>();
      setArray0[4] = (Set<String>) compositeSet2;
      CompositeSet<String> compositeSet3 = new CompositeSet<String>();
      setArray0[5] = (Set<String>) compositeSet3;
      LinkedHashSet<String> linkedHashSet2 = new LinkedHashSet<String>();
      setArray0[6] = (Set<String>) linkedHashSet2;
      LinkedHashSet<String> linkedHashSet3 = new LinkedHashSet<String>();
      setArray0[7] = (Set<String>) linkedHashSet3;
      CompositeSet<String> compositeSet4 = new CompositeSet<String>(setArray0);
      CompositeSet<String> compositeSet5 = new CompositeSet<String>(compositeSet4);
      compositeSet5.clear();
      assertTrue(compositeSet5.equals((Object)compositeSet1));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompositeSet<String> compositeSet0 = new CompositeSet<String>();
      compositeSet0.toArray();
      int int0 = compositeSet0.size();
      assertEquals(0, int0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(linkedHashSet0);
      compositeSet1.iterator();
      CompositeSet<String> compositeSet2 = new CompositeSet<String>();
      compositeSet0.addComposited((Set<String>) compositeSet2, (Set<String>) compositeSet2);
      assertTrue(compositeSet0.equals((Object)compositeSet2));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      Set<Object> set0 = compositeSet0.toSet();
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(set0);
      boolean boolean0 = compositeSet1.remove(compositeSet0);
      compositeSet0.iterator();
      compositeSet1.parallelStream();
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>();
      boolean boolean1 = compositeSet2.removeAll(compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompositeSet<LinkedList<Integer>> compositeSet0 = new CompositeSet<LinkedList<Integer>>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(linkedHashSet0);
      compositeSet1.getMutator();
      LinkedHashSet<Set<Object>> linkedHashSet1 = new LinkedHashSet<Set<Object>>();
      CompositeSet<Set<Object>> compositeSet2 = new CompositeSet<Set<Object>>(linkedHashSet1);
      compositeSet2.getSets();
      CompositeSet<String> compositeSet3 = new CompositeSet<String>();
      boolean boolean0 = compositeSet3.equals(compositeSet1);
      boolean boolean1 = compositeSet3.containsAll(linkedHashSet0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      compositeSet0.parallelStream();
      compositeSet0.toArray();
      compositeSet0.setMutator((CompositeSet.SetMutator<Object>) null);
      compositeSet0.hashCode();
      compositeSet0.clear();
      compositeSet0.size();
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      int int0 = 59;
      Integer integer2 = new Integer(59);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(59);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[1]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-3962));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[6]);
      integerArray0[8] = integer8;
      compositeSet1.toArray(integerArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        compositeSet1.addAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompositeSet<LinkedList<String>> compositeSet0 = new CompositeSet<LinkedList<String>>((Set<LinkedList<String>>) null);
      Set<LinkedList<String>>[] setArray0 = (Set<LinkedList<String>>[]) Array.newInstance(Set.class, 9);
      setArray0[0] = (Set<LinkedList<String>>) compositeSet0;
      setArray0[1] = (Set<LinkedList<String>>) compositeSet0;
      setArray0[2] = null;
      setArray0[3] = null;
      setArray0[4] = null;
      LinkedHashSet<LinkedList<String>> linkedHashSet0 = new LinkedHashSet<LinkedList<String>>();
      setArray0[5] = (Set<LinkedList<String>>) linkedHashSet0;
      setArray0[6] = null;
      setArray0[7] = (Set<LinkedList<String>>) compositeSet0;
      setArray0[8] = null;
      // Undeclared exception!
      try { 
        compositeSet0.addComposited(setArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 3);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      setArray0[0] = (Set<Integer>) linkedHashSet0;
      CompositeSet<Integer> compositeSet0 = null;
      try {
        compositeSet0 = new CompositeSet<Integer>(setArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet0);
      compositeSet0.addComposited((Set<LinkedHashSet<Integer>>) compositeSet1);
      CompositeSet<Object> compositeSet2 = new CompositeSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = compositeSet2.containsAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompositeSet<LinkedList<Object>> compositeSet0 = new CompositeSet<LinkedList<Object>>();
      LinkedHashSet<LinkedList<Object>> linkedHashSet0 = new LinkedHashSet<LinkedList<Object>>();
      EmptySetMutator<LinkedList<Object>> emptySetMutator0 = new EmptySetMutator<LinkedList<Object>>(linkedHashSet0);
      compositeSet0.setMutator(emptySetMutator0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompositeSet<String> compositeSet0 = new CompositeSet<String>();
      compositeSet0.clear();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompositeSet<Set<Object>> compositeSet0 = new CompositeSet<Set<Object>>();
      LinkedList<Set<Object>> linkedList0 = new LinkedList<Set<Object>>();
      // Undeclared exception!
      try { 
        compositeSet0.addAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(6039);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(6039);
      integerArray0[1] = integer1;
      compositeSet0.toArray(integerArray0);
      compositeSet0.parallelStream();
      compositeSet0.hashCode();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompositeSet<LinkedList<Integer>> compositeSet0 = new CompositeSet<LinkedList<Integer>>();
      boolean boolean0 = compositeSet0.isEmpty();
      assertTrue(boolean0);
      
      compositeSet0.getSets();
      Object[] objectArray0 = compositeSet0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompositeSet<Set<Object>> compositeSet0 = new CompositeSet<Set<Object>>();
      CompositeSet<Set<Object>> compositeSet1 = new CompositeSet<Set<Object>>();
      compositeSet0.removeComposited(compositeSet1);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        compositeSet0.add(linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Integer integer0 = new Integer((-1));
      linkedHashSet0.add(integer0);
      linkedHashSet0.add("/Ml7w{k)++CL;8m");
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      boolean boolean0 = compositeSet0.removeAll(linkedHashSet0);
      assertFalse(compositeSet0.contains((-1)));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedHashSet<LinkedList<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedList<Integer>>();
      CompositeSet<LinkedList<Integer>> compositeSet0 = new CompositeSet<LinkedList<Integer>>(linkedHashSet0);
      compositeSet0.iterator();
      Set<LinkedHashSet<Object>>[] setArray0 = (Set<LinkedHashSet<Object>>[]) Array.newInstance(Set.class, 3);
      CompositeSet<LinkedHashSet<Object>> compositeSet1 = new CompositeSet<LinkedHashSet<Object>>();
      setArray0[0] = (Set<LinkedHashSet<Object>>) compositeSet1;
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet1 = new LinkedHashSet<LinkedHashSet<Object>>();
      setArray0[1] = (Set<LinkedHashSet<Object>>) linkedHashSet1;
      CompositeSet<LinkedHashSet<Object>> compositeSet2 = new CompositeSet<LinkedHashSet<Object>>();
      setArray0[2] = (Set<LinkedHashSet<Object>>) compositeSet2;
      CompositeSet<LinkedHashSet<Object>> compositeSet3 = new CompositeSet<LinkedHashSet<Object>>(setArray0);
      LinkedHashSet<Object> linkedHashSet2 = new LinkedHashSet<Object>();
      boolean boolean0 = compositeSet3.contains(linkedHashSet2);
      assertFalse(boolean0);
      assertTrue(compositeSet3.equals((Object)compositeSet2));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      compositeSet0.iterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) compositeSet0);
      compositeSet0.removeAll(linkedList0);
      compositeSet0.hashCode();
      CompositeSet<String> compositeSet1 = new CompositeSet<String>();
      compositeSet1.toSet();
      compositeSet0.removeAll(compositeSet1);
      Set<LinkedList<String>>[] setArray0 = (Set<LinkedList<String>>[]) Array.newInstance(Set.class, 6);
      CompositeSet<LinkedList<String>> compositeSet2 = new CompositeSet<LinkedList<String>>();
      setArray0[0] = (Set<LinkedList<String>>) compositeSet2;
      CompositeSet<LinkedList<String>> compositeSet3 = new CompositeSet<LinkedList<String>>(setArray0[0]);
      setArray0[1] = (Set<LinkedList<String>>) compositeSet3;
      CompositeSet<LinkedList<String>> compositeSet4 = null;
      try {
        compositeSet4 = new CompositeSet<LinkedList<String>>(setArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 0);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(setArray0);
      compositeSet0.size();
      LinkedHashSet<LinkedList<Object>> linkedHashSet0 = new LinkedHashSet<LinkedList<Object>>();
      CompositeSet<LinkedList<Object>> compositeSet1 = new CompositeSet<LinkedList<Object>>(linkedHashSet0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      compositeSet1.removeAll(linkedList0);
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      CompositeSet<String> compositeSet2 = new CompositeSet<String>(linkedHashSet1);
      compositeSet2.toSet();
      linkedHashSet1.add((String) null);
      compositeSet2.remove((Object) null);
      compositeSet0.toArray();
      linkedHashSet1.add(")[.*N69}<})cwLIr:");
      compositeSet2.isEmpty();
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "V[npLM)NQ[F\"AM");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      compositeSet3.removeIf(predicate3);
      compositeSet3.toSet();
      compositeSet2.getSets();
      CompositeSet<LinkedHashSet<Object>> compositeSet4 = new CompositeSet<LinkedHashSet<Object>>();
      CompositeSet<LinkedHashSet<Object>> compositeSet5 = new CompositeSet<LinkedHashSet<Object>>(compositeSet4);
      // Undeclared exception!
      try { 
        compositeSet5.addAll(compositeSet4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 1);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      setArray0[0] = (Set<Object>) compositeSet0;
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(setArray0);
      CompositeSet<Object> compositeSet2 = new CompositeSet<Object>(compositeSet1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "*RO|F[T";
      stringArray0[1] = "";
      compositeSet0.size();
      stringArray0[4] = "W(9PI25RU*";
      stringArray0[5] = "";
      stringArray0[1] = "";
      stringArray0[7] = "";
      compositeSet2.toArray(stringArray0);
      compositeSet2.containsAll(compositeSet1);
      CompositeSet<String> compositeSet3 = new CompositeSet<String>();
      CompositeSet<String> compositeSet4 = new CompositeSet<String>(compositeSet3);
      compositeSet4.hashCode();
      LinkedHashSet<Set<Object>> linkedHashSet0 = new LinkedHashSet<Set<Object>>();
      CompositeSet<Set<Object>> compositeSet5 = new CompositeSet<Set<Object>>(linkedHashSet0);
      CompositeSet<Set<Object>> compositeSet6 = new CompositeSet<Set<Object>>(compositeSet5);
      compositeSet6.containsAll(compositeSet0);
      compositeSet3.equals("");
      CompositeSet<LinkedHashSet<Object>> compositeSet7 = new CompositeSet<LinkedHashSet<Object>>();
      Set<LinkedHashSet<Object>> set0 = compositeSet7.toSet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      compositeSet0.containsAll(linkedHashSet0);
      Integer integer0 = new Integer(10);
      linkedHashSet0.add(integer0);
      compositeSet0.hashCode();
      compositeSet0.containsAll(linkedHashSet0);
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 8);
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>();
      setArray0[0] = (Set<Object>) compositeSet1;
      CompositeSet<Object> compositeSet2 = new CompositeSet<Object>();
      CompositeSet<Object> compositeSet3 = new CompositeSet<Object>(compositeSet2);
      setArray0[1] = (Set<Object>) compositeSet3;
      Set<Object>[] setArray1 = (Set<Object>[]) Array.newInstance(Set.class, 4);
      setArray1[0] = (Set<Object>) compositeSet3;
      setArray1[1] = (Set<Object>) compositeSet1;
      setArray1[2] = (Set<Object>) compositeSet3;
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      linkedHashSet1.contains(setArray0[1]);
      setArray1[3] = (Set<Object>) linkedHashSet1;
      CompositeSet<LinkedList<Integer>> compositeSet4 = new CompositeSet<LinkedList<Integer>>();
      CompositeSet<LinkedList<Integer>> compositeSet5 = new CompositeSet<LinkedList<Integer>>(compositeSet4);
      CompositeSet<LinkedList<Integer>> compositeSet6 = new CompositeSet<LinkedList<Integer>>(compositeSet5);
      EmptySetMutator<LinkedList<Integer>> emptySetMutator0 = new EmptySetMutator<LinkedList<Integer>>(compositeSet6);
      LinkedList<Set<LinkedList<Integer>>> linkedList0 = new LinkedList<Set<LinkedList<Integer>>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        emptySetMutator0.add(compositeSet4, linkedList0, linkedList1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      CompositeSet<String> compositeSet0 = new CompositeSet<String>(linkedHashSet0);
      compositeSet0.contains(linkedHashSet0);
      LinkedHashSet<LinkedList<String>> linkedHashSet1 = new LinkedHashSet<LinkedList<String>>();
      CompositeSet<LinkedList<String>> compositeSet1 = new CompositeSet<LinkedList<String>>(linkedHashSet1);
      compositeSet1.iterator();
      LinkedHashSet<Set<Object>> linkedHashSet2 = new LinkedHashSet<Set<Object>>();
      CompositeSet<Set<Object>> compositeSet2 = new CompositeSet<Set<Object>>(linkedHashSet2);
      LinkedList<Set<Object>>[] linkedListArray0 = (LinkedList<Set<Object>>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<Set<Object>> linkedList0 = new LinkedList<Set<Object>>();
      LinkedList<Set<Object>> linkedList1 = new LinkedList<Set<Object>>();
      linkedListArray0[1] = linkedList1;
      LinkedHashSet<Object> linkedHashSet3 = new LinkedHashSet<Object>();
      linkedHashSet2.add(linkedHashSet3);
      LinkedList<Set<Object>> linkedList2 = new LinkedList<Set<Object>>();
      linkedListArray0[2] = linkedList2;
      // Undeclared exception!
      try { 
        compositeSet2.toArray(linkedListArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.util.LinkedHashSet
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CompositeSet<String> compositeSet0 = new CompositeSet<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      compositeSet0.removeComposited(linkedHashSet0);
      Set<String>[] setArray0 = (Set<String>[]) Array.newInstance(Set.class, 4);
      setArray0[2] = (Set<String>) compositeSet0;
      CompositeSet<String> compositeSet1 = new CompositeSet<String>();
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet1 = new LinkedHashSet<LinkedHashSet<Object>>();
      EmptySetMutator<LinkedHashSet<Object>> emptySetMutator0 = new EmptySetMutator<LinkedHashSet<Object>>(linkedHashSet1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      CompositeSet<String> compositeSet0 = new CompositeSet<String>(linkedHashSet0);
      compositeSet0.contains(linkedHashSet0);
      LinkedHashSet<LinkedList<String>> linkedHashSet1 = new LinkedHashSet<LinkedList<String>>();
      CompositeSet<LinkedList<String>> compositeSet1 = new CompositeSet<LinkedList<String>>(linkedHashSet1);
      compositeSet1.iterator();
      LinkedHashSet<Set<Object>> linkedHashSet2 = new LinkedHashSet<Set<Object>>();
      CompositeSet<Set<Object>> compositeSet2 = new CompositeSet<Set<Object>>(linkedHashSet2);
      LinkedList<Set<Object>>[] linkedListArray0 = (LinkedList<Set<Object>>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<Set<Object>> linkedList0 = new LinkedList<Set<Object>>();
      linkedListArray0[2] = linkedList0;
      LinkedList<Set<Object>> linkedList1 = new LinkedList<Set<Object>>();
      linkedListArray0[1] = linkedList0;
      LinkedList<Set<Object>> linkedList2 = new LinkedList<Set<Object>>();
      linkedListArray0[2] = linkedList2;
      compositeSet2.toArray(linkedListArray0);
      Set<String>[] setArray0 = (Set<String>[]) Array.newInstance(Set.class, 1);
      setArray0[0] = (Set<String>) linkedHashSet0;
      // Undeclared exception!
      try { 
        compositeSet0.addComposited(setArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 0);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(setArray0);
      compositeSet0.size();
      LinkedHashSet<LinkedList<Object>> linkedHashSet0 = new LinkedHashSet<LinkedList<Object>>();
      CompositeSet<LinkedList<Object>> compositeSet1 = new CompositeSet<LinkedList<Object>>(linkedHashSet0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      compositeSet1.removeAll(linkedList0);
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      CompositeSet<String> compositeSet2 = new CompositeSet<String>(linkedHashSet1);
      compositeSet2.toSet();
      compositeSet2.remove((Object) null);
      compositeSet0.toArray();
      compositeSet2.isEmpty();
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "V[npLM)NQ[F\"AM");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      compositeSet3.removeIf(predicate3);
      compositeSet3.toSet();
      compositeSet2.getSets();
      CompositeSet<LinkedHashSet<Object>> compositeSet4 = new CompositeSet<LinkedHashSet<Object>>();
      CompositeSet<LinkedHashSet<Object>> compositeSet5 = new CompositeSet<LinkedHashSet<Object>>(compositeSet4);
      // Undeclared exception!
      try { 
        compositeSet5.addAll(compositeSet4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = null;
      try {
        compositeSet0 = new CompositeSet<Object>((Set<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CompositeSet<Set<Object>> compositeSet0 = new CompositeSet<Set<Object>>();
      CompositeSet<Set<Object>> compositeSet1 = new CompositeSet<Set<Object>>(compositeSet0);
      CompositeSet<Set<Object>> compositeSet2 = new CompositeSet<Set<Object>>(compositeSet1);
      CompositeSet<Set<Object>> compositeSet3 = new CompositeSet<Set<Object>>(compositeSet2);
      compositeSet3.retainAll(compositeSet2);
      CompositeSet<String> compositeSet4 = new CompositeSet<String>();
      CompositeSet<String> compositeSet5 = new CompositeSet<String>(compositeSet4);
      CompositeSet<String> compositeSet6 = new CompositeSet<String>(compositeSet5);
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 7);
      CompositeSet<Object> compositeSet7 = new CompositeSet<Object>();
      setArray0[0] = (Set<Object>) compositeSet7;
      Set<Object> set0 = compositeSet7.toSet();
      setArray0[1] = set0;
      Set<Object> set1 = compositeSet7.toSet();
      setArray0[2] = set1;
      CompositeSet<Object> compositeSet8 = null;
      try {
        compositeSet8 = new CompositeSet<Object>(setArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 25);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      setArray0[5] = (Set<Integer>) compositeSet0;
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      Integer integer0 = new Integer((-446));
      linkedHashSet0.add(integer0);
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(linkedHashSet1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compositeSet1.forEach(consumer0);
      linkedHashSet0.stream();
      linkedHashSet0.add(integer0);
      compositeSet0.equals(compositeSet1);
      compositeSet1.clear();
      linkedHashSet1.add((Object) null);
      EmptySetMutator<Object> emptySetMutator0 = new EmptySetMutator<Object>(linkedHashSet1);
      // Undeclared exception!
      try { 
        emptySetMutator0.resolveCollision(compositeSet1, compositeSet1, compositeSet1, compositeSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.EmptySetMutator", e);
      }
  }
}
