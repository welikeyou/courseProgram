/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:07:56 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.map.PredicatedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PredicatedMap_ESTest extends PredicatedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicateArray0[1];
      Predicate<Boolean> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Boolean>[]) predicateArray0);
      PredicatedMap<Boolean, Integer> predicatedMap0 = new PredicatedMap<Boolean, Integer>(hashMap0, predicate1, predicate0);
      Integer integer0 = new Integer(0);
      Integer integer1 = predicatedMap0.checkSetValue(integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      HashMap<AbstractMap.SimpleEntry<String, Integer>, InstanceofPredicate> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Integer>, InstanceofPredicate>();
      PredicatedMap<AbstractMap.SimpleEntry<String, Integer>, InstanceofPredicate> predicatedMap0 = new PredicatedMap<AbstractMap.SimpleEntry<String, Integer>, InstanceofPredicate>(hashMap0, allPredicate0, allPredicate0);
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("", integer0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicatedMap0.validate(abstractMap_SimpleEntry0, instanceofPredicate0);
      assertEquals(0, predicatedMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      PredicatedMap<Object, String> predicatedMap0 = new PredicatedMap<Object, String>(hashMap0, nullIsTruePredicate0, nullIsTruePredicate0);
      Integer integer0 = new Integer((-3162));
      predicatedMap0.put(integer0, "6Q4|o;t[bp9^PL;:xz");
      predicatedMap0.put(integer0, "fF");
      assertEquals(1, predicatedMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      HashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Boolean> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Boolean>();
      PredicatedMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Boolean> predicatedMap0 = PredicatedMap.predicatedMap((Map<AbstractMap.SimpleImmutableEntry<String, Integer>, Boolean>) hashMap0, (Predicate<? super AbstractMap.SimpleImmutableEntry<String, Integer>>) predicate0, (Predicate<? super Boolean>) predicate0);
      boolean boolean0 = predicatedMap0.isSetValueChecking();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Predicate<Object>> hashMap0 = new HashMap<String, Predicate<Object>>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      PredicatedMap<String, Predicate<Object>> predicatedMap0 = new PredicatedMap<String, Predicate<Object>>(hashMap0, orPredicate0, (Predicate<? super Predicate<Object>>) null);
      boolean boolean0 = predicatedMap0.isSetValueChecking();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<InstanceofPredicate, String> hashMap0 = new HashMap<InstanceofPredicate, String>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedMap<InstanceofPredicate, String> predicatedMap0 = PredicatedMap.predicatedMap((Map<InstanceofPredicate, String>) hashMap0, (Predicate<? super InstanceofPredicate>) uniquePredicate0, (Predicate<? super String>) uniquePredicate0);
      String string0 = predicatedMap0.checkSetValue((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<String> predicate1 = NotPredicate.notPredicate((Predicate<? super String>) predicate0);
      PredicatedMap<String, String> predicatedMap0 = PredicatedMap.predicatedMap((Map<String, String>) hashMap0, (Predicate<? super String>) predicate1, (Predicate<? super String>) predicate0);
      // Undeclared exception!
      try { 
        predicatedMap0.validate(":", ":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Predicate<Object>, Object> hashMap0 = new HashMap<Predicate<Object>, Object>();
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>((Factory<? extends Boolean>) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) factoryTransformer0);
      HashMap<Object, AbstractMap.SimpleEntry<InstanceofPredicate, String>> hashMap1 = new HashMap<Object, AbstractMap.SimpleEntry<InstanceofPredicate, String>>();
      PredicatedMap<Object, AbstractMap.SimpleEntry<InstanceofPredicate, String>> predicatedMap0 = PredicatedMap.predicatedMap((Map<Object, AbstractMap.SimpleEntry<InstanceofPredicate, String>>) hashMap1, (Predicate<? super Object>) predicate0, (Predicate<? super AbstractMap.SimpleEntry<InstanceofPredicate, String>>) predicate0);
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      AbstractMap.SimpleImmutableEntry<InstanceofPredicate, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<InstanceofPredicate, String>(instanceofPredicate0, "Cannot add key - Predicate rejected it");
      AbstractMap.SimpleEntry<InstanceofPredicate, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<InstanceofPredicate, String>(abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        predicatedMap0.validate(hashMap0, abstractMap_SimpleEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      HashMap<Predicate<Object>, Object> hashMap0 = new HashMap<Predicate<Object>, Object>();
      PredicatedMap<Predicate<Object>, Object> predicatedMap0 = PredicatedMap.predicatedMap((Map<Predicate<Object>, Object>) hashMap0, (Predicate<? super Predicate<Object>>) instanceofPredicate0, (Predicate<? super Object>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        predicatedMap0.validate((Predicate<Object>) null, instanceofPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add key - Predicate rejected it
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<InstanceofPredicate, String> hashMap0 = new HashMap<InstanceofPredicate, String>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicatedMap<InstanceofPredicate, String> predicatedMap0 = new PredicatedMap<InstanceofPredicate, String>(hashMap0, predicate0, predicate0);
      // Undeclared exception!
      try { 
        predicatedMap0.putAll((Map<? extends InstanceofPredicate, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Predicate<Object>, AbstractMap.SimpleEntry<Object, Predicate<Object>>> hashMap0 = new HashMap<Predicate<Object>, AbstractMap.SimpleEntry<Object, Predicate<Object>>>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      AbstractMap.SimpleImmutableEntry<Object, InstanceofPredicate> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, InstanceofPredicate>("aJH u~", instanceofPredicate0);
      AbstractMap.SimpleEntry<Object, Predicate<Object>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Predicate<Object>>(abstractMap_SimpleImmutableEntry0);
      hashMap0.put((Predicate<Object>) null, abstractMap_SimpleEntry0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(instanceofPredicate0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) identityPredicate0);
      // Undeclared exception!
      try { 
        PredicatedMap.predicatedMap((Map<Predicate<Object>, AbstractMap.SimpleEntry<Object, Predicate<Object>>>) hashMap0, (Predicate<? super Predicate<Object>>) predicate0, (Predicate<? super AbstractMap.SimpleEntry<Object, Predicate<Object>>>) instanceofPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        PredicatedMap.predicatedMap((Map<Predicate<Object>, Predicate<Object>>) null, (Predicate<? super Predicate<Object>>) instanceofPredicate0, (Predicate<? super Predicate<Object>>) instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      PredicatedMap<Integer, Boolean> predicatedMap0 = PredicatedMap.predicatedMap((Map<Integer, Boolean>) hashMap0, (Predicate<? super Integer>) predicate0, (Predicate<? super Boolean>) predicate0);
      // Undeclared exception!
      try { 
        predicatedMap0.checkSetValue((Boolean) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<HashMap<InstanceofPredicate, Object>, String> hashMap0 = new HashMap<HashMap<InstanceofPredicate, Object>, String>();
      PredicatedMap<HashMap<InstanceofPredicate, Object>, String> predicatedMap0 = new PredicatedMap<HashMap<InstanceofPredicate, Object>, String>(hashMap0, (Predicate<? super HashMap<InstanceofPredicate, Object>>) null, (Predicate<? super String>) null);
      // Undeclared exception!
      try { 
        predicatedMap0.checkSetValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      PredicatedMap<Integer, Integer> predicatedMap0 = PredicatedMap.predicatedMap((Map<Integer, Integer>) hashMap0, (Predicate<? super Integer>) predicate0, (Predicate<? super Integer>) predicate0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Integer integer0 = new Integer((-440));
      hashMap0.put(integer0, integer0);
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      PredicatedMap<Integer, Integer> predicatedMap1 = null;
      try {
        predicatedMap1 = new PredicatedMap<Integer, Integer>(predicatedMap0, predicate0, predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Predicate<Object>, InstanceofPredicate> hashMap0 = new HashMap<Predicate<Object>, InstanceofPredicate>();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      hashMap0.put(predicate0, instanceofPredicate0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      PredicatedMap<Predicate<Object>, InstanceofPredicate> predicatedMap0 = null;
      try {
        predicatedMap0 = new PredicatedMap<Predicate<Object>, InstanceofPredicate>(hashMap0, onePredicate0, onePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      PredicatedMap<Predicate<Object>, InstanceofPredicate> predicatedMap0 = null;
      try {
        predicatedMap0 = new PredicatedMap<Predicate<Object>, InstanceofPredicate>((Map<Predicate<Object>, InstanceofPredicate>) null, predicate0, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Predicate<Object>, AbstractMap.SimpleImmutableEntry<Integer, String>> hashMap0 = new HashMap<Predicate<Object>, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>((Integer) (-1), (String) null);
      hashMap0.put(predicate0, abstractMap_SimpleImmutableEntry0);
      PredicatedMap<Predicate<Object>, AbstractMap.SimpleImmutableEntry<Integer, String>> predicatedMap0 = null;
      try {
        predicatedMap0 = new PredicatedMap<Predicate<Object>, AbstractMap.SimpleImmutableEntry<Integer, String>>(hashMap0, predicate0, predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add key - Predicate rejected it
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      HashMap<AbstractMap.SimpleEntry<String, Integer>, InstanceofPredicate> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Integer>, InstanceofPredicate>();
      PredicatedMap<AbstractMap.SimpleEntry<String, Integer>, InstanceofPredicate> predicatedMap0 = new PredicatedMap<AbstractMap.SimpleEntry<String, Integer>, InstanceofPredicate>(hashMap0, allPredicate0, allPredicate0);
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("", integer0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicatedMap0.put(abstractMap_SimpleEntry0, instanceofPredicate0);
      predicatedMap0.putAll(predicatedMap0);
      assertFalse(predicatedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      HashMap<Boolean, Predicate<Object>> hashMap0 = new HashMap<Boolean, Predicate<Object>>();
      PredicatedMap<Boolean, Predicate<Object>> predicatedMap0 = PredicatedMap.predicatedMap((Map<Boolean, Predicate<Object>>) hashMap0, (Predicate<? super Boolean>) predicate0, (Predicate<? super Predicate<Object>>) predicate0);
      // Undeclared exception!
      try { 
        predicatedMap0.checkSetValue(predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot set value - Predicate rejected it
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>((Integer) null);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicatedMap<Integer, String> predicatedMap0 = PredicatedMap.predicatedMap((Map<Integer, String>) hashMap0, (Predicate<? super Integer>) equalPredicate0, (Predicate<? super String>) predicate0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      PredicatedMap<Integer, String> predicatedMap1 = new PredicatedMap<Integer, String>(predicatedMap0, predicate0, predicate1);
      // Undeclared exception!
      try { 
        predicatedMap1.put((Integer) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<InstanceofPredicate, Closure<Object>> hashMap0 = new HashMap<InstanceofPredicate, Closure<Object>>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      hashMap0.put(instanceofPredicate0, closure0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        PredicatedMap.predicatedMap((Map<InstanceofPredicate, Closure<Object>>) hashMap0, (Predicate<? super InstanceofPredicate>) predicate0, (Predicate<? super Closure<Object>>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add key - Predicate rejected it
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>((Integer) null);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicatedMap<Integer, String> predicatedMap0 = PredicatedMap.predicatedMap((Map<Integer, String>) hashMap0, (Predicate<? super Integer>) equalPredicate0, (Predicate<? super String>) predicate0);
      PredicatedMap<Integer, String> predicatedMap1 = new PredicatedMap<Integer, String>(predicatedMap0, predicate0, predicate0);
      // Undeclared exception!
      try { 
        predicatedMap1.put((Integer) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add value - Predicate rejected it
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      Predicate<Boolean> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      PredicatedMap<Boolean, Object> predicatedMap0 = PredicatedMap.predicatedMap((Map<Boolean, Object>) hashMap0, (Predicate<? super Boolean>) predicate0, (Predicate<? super Object>) onePredicate0);
      PredicateTransformer<Integer> predicateTransformer0 = new PredicateTransformer<Integer>(instanceofPredicate0);
      Integer integer0 = new Integer((-1));
      Boolean boolean0 = predicateTransformer0.transform(integer0);
      // Undeclared exception!
      try { 
        predicatedMap0.put(boolean0, integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }
}
