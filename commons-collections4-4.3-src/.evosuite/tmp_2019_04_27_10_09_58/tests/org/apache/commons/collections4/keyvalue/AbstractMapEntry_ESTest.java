/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:02:15 GMT 2019
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections4.KeyValue;
import org.apache.commons.collections4.keyvalue.DefaultKeyValue;
import org.apache.commons.collections4.keyvalue.DefaultMapEntry;
import org.apache.commons.collections4.keyvalue.TiedMapEntry;
import org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractMapEntry_ESTest extends AbstractMapEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultKeyValue<Integer, String> defaultKeyValue0 = new DefaultKeyValue<Integer, String>();
      UnmodifiableMapEntry<Integer, String> unmodifiableMapEntry0 = new UnmodifiableMapEntry<Integer, String>(defaultKeyValue0);
      DefaultKeyValue<Object, Object> defaultKeyValue1 = new DefaultKeyValue<Object, Object>((Map.Entry<?, ?>) unmodifiableMapEntry0);
      DefaultMapEntry<Object, Object> defaultMapEntry0 = new DefaultMapEntry<Object, Object>(defaultKeyValue1);
      Object object0 = defaultMapEntry0.setValue("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$MapEntry");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("mz=H_N;?E,_X{aHj2yw", "mz=H_N;?E,_X{aHj2yw");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      UnmodifiableMapEntry<Object, String> unmodifiableMapEntry0 = new UnmodifiableMapEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      UnmodifiableMapEntry<Object, Object> unmodifiableMapEntry1 = new UnmodifiableMapEntry<Object, Object>((KeyValue<?, ?>) unmodifiableMapEntry0);
      UnmodifiableMapEntry<String, String> unmodifiableMapEntry2 = new UnmodifiableMapEntry<String, String>("mz=H_N;?E,_X{aHj2yw", "n}");
      UnmodifiableMapEntry<String, Object> unmodifiableMapEntry3 = new UnmodifiableMapEntry<String, Object>((Map.Entry<? extends String, ?>) unmodifiableMapEntry2);
      // Undeclared exception!
      try { 
        unmodifiableMapEntry3.setValue(unmodifiableMapEntry1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // setValue() is not supported
         //
         verifyException("org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyValue<String, Integer> defaultKeyValue0 = new DefaultKeyValue<String, Integer>();
      DefaultMapEntry<String, Integer> defaultMapEntry0 = new DefaultMapEntry<String, Integer>(defaultKeyValue0);
      defaultMapEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-420));
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      DefaultMapEntry<Integer, Integer> defaultMapEntry0 = new DefaultMapEntry<Integer, Integer>(abstractMap_SimpleEntry1);
      defaultMapEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(128);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>((String) null, integer0);
      UnmodifiableMapEntry<Object, Integer> unmodifiableMapEntry0 = new UnmodifiableMapEntry<Object, Integer>((Object) null, (Integer) null);
      boolean boolean0 = unmodifiableMapEntry0.equals(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultMapEntry<String, Object> defaultMapEntry0 = new DefaultMapEntry<String, Object>("", "");
      Integer integer0 = new Integer((-420));
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(defaultMapEntry0);
      UnmodifiableMapEntry<Integer, AbstractMap.SimpleEntry<Object, Object>> unmodifiableMapEntry0 = new UnmodifiableMapEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>(integer0, abstractMap_SimpleEntry0);
      DefaultMapEntry<String, AbstractMap.SimpleEntry<Integer, Object>> defaultMapEntry1 = new DefaultMapEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("^PtSWkg", (AbstractMap.SimpleEntry<Integer, Object>) null);
      boolean boolean0 = defaultMapEntry1.equals(unmodifiableMapEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(128);
      DefaultMapEntry<Integer, Integer> defaultMapEntry0 = new DefaultMapEntry<Integer, Integer>(integer0, integer0);
      UnmodifiableMapEntry<String, Object> unmodifiableMapEntry0 = new UnmodifiableMapEntry<String, Object>((String) null, (Object) null);
      boolean boolean0 = unmodifiableMapEntry0.equals(defaultMapEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultMapEntry<String, String> defaultMapEntry0 = new DefaultMapEntry<String, String>((String) null, "");
      DefaultMapEntry<Integer, String> defaultMapEntry1 = new DefaultMapEntry<Integer, String>((Integer) null, "=");
      boolean boolean0 = defaultMapEntry1.equals(defaultMapEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(9);
      TiedMapEntry<Integer, Integer> tiedMapEntry0 = new TiedMapEntry<Integer, Integer>(hashMap0, integer0);
      DefaultMapEntry<Integer, Integer> defaultMapEntry0 = new DefaultMapEntry<Integer, Integer>((KeyValue<? extends Integer, ? extends Integer>) tiedMapEntry0);
      DefaultMapEntry<Object, Integer> defaultMapEntry1 = new DefaultMapEntry<Object, Integer>((Map.Entry<?, ? extends Integer>) defaultMapEntry0);
      boolean boolean0 = defaultMapEntry1.equals(defaultMapEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultMapEntry<String, Object> defaultMapEntry0 = new DefaultMapEntry<String, Object>("", "");
      Integer integer0 = new Integer((-420));
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(defaultMapEntry0);
      UnmodifiableMapEntry<Integer, AbstractMap.SimpleEntry<Object, Object>> unmodifiableMapEntry0 = new UnmodifiableMapEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>(integer0, abstractMap_SimpleEntry0);
      boolean boolean0 = unmodifiableMapEntry0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultMapEntry<String, String> defaultMapEntry0 = new DefaultMapEntry<String, String>((String) null, "");
      String string0 = defaultMapEntry0.setValue("K^\"7<AL~ff");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("mz=H_N;?E,_X{aHj2yw", "mz=H_N;?E,_X{aHj2yw");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      UnmodifiableMapEntry<Object, String> unmodifiableMapEntry0 = new UnmodifiableMapEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      UnmodifiableMapEntry<Object, Object> unmodifiableMapEntry1 = new UnmodifiableMapEntry<Object, Object>((KeyValue<?, ?>) unmodifiableMapEntry0);
      boolean boolean0 = unmodifiableMapEntry1.equals(unmodifiableMapEntry0);
      assertTrue(boolean0);
  }
}
