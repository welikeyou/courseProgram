/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:21:53 GMT 2019
 */

package org.apache.commons.collections4.multiset;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.SequenceInputStream;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.MultiSet;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.multiset.AbstractMapMultiSet;
import org.apache.commons.collections4.multiset.AbstractMultiSet;
import org.apache.commons.collections4.multiset.HashMultiSet;
import org.apache.commons.collections4.multiset.SynchronizedMultiSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractMultiSet_ESTest extends AbstractMultiSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>();
      hashMultiSet0.add("org.apache.commons.collections4.multiset.AbstractMultiSet", 2224);
      int int0 = hashMultiSet0.setCount("org.apache.commons.collections4.multiset.AbstractMultiSet", 355);
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(2224, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>();
      hashMultiSet0.add("org.apache.commons.collections4.multiset.AbstractMultiSet");
      int int0 = hashMultiSet0.setCount("org.apache.commons.collections4.multiset.AbstractMultiSet", 355);
      assertEquals(355, hashMultiSet0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMultiSet<MultiSet.Entry<InstanceofPredicate>> hashMultiSet0 = new HashMultiSet<MultiSet.Entry<InstanceofPredicate>>();
      AbstractMultiSet.UniqueSet<MultiSet.Entry<InstanceofPredicate>> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<MultiSet.Entry<InstanceofPredicate>>(hashMultiSet0);
      Iterator<MultiSet.Entry<InstanceofPredicate>> iterator0 = abstractMultiSet_UniqueSet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMultiSet<Transformer<Object, SequenceInputStream>> hashMultiSet0 = new HashMultiSet<Transformer<Object, SequenceInputStream>>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      hashMultiSet0.doWriteObject(objectOutputStream0);
      assertTrue(hashMultiSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      AbstractMultiSet.UniqueSet<Integer> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<Integer>(hashMultiSet0);
      int int0 = abstractMultiSet_UniqueSet0.size();
      assertFalse(hashMultiSet0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MultiSetEntry<Boolean>> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MultiSetEntry<Boolean>>();
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(hashMultiSet0);
      hashMultiSet1.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMultiSet<Transformer<Object, SequenceInputStream>> hashMultiSet0 = new HashMultiSet<Transformer<Object, SequenceInputStream>>();
      Set<Transformer<Object, SequenceInputStream>> set0 = hashMultiSet0.createUniqueSet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMultiSet<SequenceInputStream> hashMultiSet0 = new HashMultiSet<SequenceInputStream>();
      hashMultiSet0.clear();
      assertEquals(0, hashMultiSet0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMultiSet<Boolean> hashMultiSet0 = new HashMultiSet<Boolean>();
      int int0 = hashMultiSet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMultiSet<Transformer<Object, SequenceInputStream>> hashMultiSet0 = new HashMultiSet<Transformer<Object, SequenceInputStream>>();
      HashMap<InstanceofPredicate, Transformer<Object, SequenceInputStream>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, SequenceInputStream>>();
      Transformer<Object, SequenceInputStream> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends SequenceInputStream>>) hashMap0);
      hashMultiSet0.add(transformer0);
      int int0 = hashMultiSet0.size();
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>();
      hashMultiSet0.add("");
      assertFalse(hashMultiSet0.isEmpty());
      
      int int0 = hashMultiSet0.setCount("", 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMultiSet<Locale> hashMultiSet0 = new HashMultiSet<Locale>();
      AbstractMultiSet.UniqueSet<Locale> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<Locale>(hashMultiSet0);
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet1 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      int int0 = hashMultiSet1.remove((Object) abstractMultiSet_UniqueSet0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      AbstractMultiSet.EntrySet<AbstractMapMultiSet.MutableInteger> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<AbstractMapMultiSet.MutableInteger>(hashMultiSet0);
      Iterator<MultiSet.Entry<AbstractMapMultiSet.MutableInteger>> iterator0 = (Iterator<MultiSet.Entry<AbstractMapMultiSet.MutableInteger>>)abstractMultiSet_EntrySet0.iterator();
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet1 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      int int0 = hashMultiSet1.getCount(iterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      LinkedList<AbstractMapMultiSet.MutableInteger> linkedList0 = new LinkedList<AbstractMapMultiSet.MutableInteger>();
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet1 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>(linkedList0);
      HashMultiSet<HashMultiSet<Object>> hashMultiSet2 = new HashMultiSet<HashMultiSet<Object>>();
      hashMultiSet2.add(hashMultiSet0);
      int int0 = hashMultiSet2.getCount(hashMultiSet1);
      assertTrue(hashMultiSet2.contains(hashMultiSet0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      HashMultiSet<InputStream> hashMultiSet1 = new HashMultiSet<InputStream>();
      boolean boolean0 = hashMultiSet1.equals(hashMultiSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMultiSet<SequenceInputStream> hashMultiSet0 = new HashMultiSet<SequenceInputStream>();
      boolean boolean0 = hashMultiSet0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      Iterator<AbstractMapMultiSet.MutableInteger> iterator0 = hashMultiSet0.createUniqueSetIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MultiSetEntry<SequenceInputStream>> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MultiSetEntry<SequenceInputStream>>();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = hashMultiSet0.contains(instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMultiSet<Predicate<Object>> hashMultiSet0 = new HashMultiSet<Predicate<Object>>();
      int int0 = hashMultiSet0.add((Predicate<Object>) null, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      Class<AbstractMapMultiSet.MutableInteger> class0 = AbstractMapMultiSet.MutableInteger.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      hashMultiSet0.add(instanceofPredicate0);
      int int0 = hashMultiSet0.add(instanceofPredicate0, 3900);
      assertEquals(3901, hashMultiSet0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      // Undeclared exception!
      try { 
        hashMultiSet0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MultiSetEntry<InputStream>> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MultiSetEntry<InputStream>>();
      HashMultiSet<HashMultiSet<Object>> hashMultiSet1 = new HashMultiSet<HashMultiSet<Object>>();
      // Undeclared exception!
      try { 
        hashMultiSet1.remove((Object) hashMultiSet0, (-1236));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Occurrences must not be negative.
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMultiSet<Boolean> hashMultiSet0 = new HashMultiSet<Boolean>();
      Locale locale0 = Locale.ENGLISH;
      hashMultiSet0.setMap((Map<Boolean, AbstractMapMultiSet.MutableInteger>) null);
      // Undeclared exception!
      try { 
        hashMultiSet0.remove((Object) locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMultiSet<Transformer<InstanceofPredicate, String>> hashMultiSet0 = new HashMultiSet<Transformer<InstanceofPredicate, String>>();
      // Undeclared exception!
      try { 
        hashMultiSet0.doWriteObject((ObjectOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<AbstractMapMultiSet.MutableInteger> linkedList0 = new LinkedList<AbstractMapMultiSet.MutableInteger>();
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>(linkedList0);
      // Undeclared exception!
      try { 
        hashMultiSet0.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      hashMultiSet0.setMap((Map<Object, AbstractMapMultiSet.MutableInteger>) null);
      Set<MultiSet.Entry<Object>> set0 = (Set<MultiSet.Entry<Object>>)hashMultiSet0.createEntrySet();
      // Undeclared exception!
      try { 
        hashMultiSet0.contains(set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        hashMultiSet0.add(instanceofPredicate0, (-3964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Occurrences must not be negative.
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      AbstractMultiSet.EntrySet<Object> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<Object>(hashMultiSet0);
      boolean boolean0 = abstractMultiSet_EntrySet0.remove(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMultiSet<Predicate<Object>> hashMultiSet0 = new HashMultiSet<Predicate<Object>>();
      Iterator<Predicate<Object>> iterator0 = hashMultiSet0.iterator();
      HashMultiSet<InputStream> hashMultiSet1 = new HashMultiSet<InputStream>();
      AbstractMultiSet.EntrySet<InputStream> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<InputStream>(hashMultiSet1);
      boolean boolean0 = abstractMultiSet_EntrySet0.contains(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMultiSet<Locale> hashMultiSet0 = new HashMultiSet<Locale>();
      AbstractMultiSet.EntrySet<Locale> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<Locale>(hashMultiSet0);
      HashMultiSet<MultiSet.Entry<InstanceofPredicate>> hashMultiSet1 = new HashMultiSet<MultiSet.Entry<InstanceofPredicate>>();
      AbstractMultiSet.EntrySet<MultiSet.Entry<InstanceofPredicate>> abstractMultiSet_EntrySet1 = new AbstractMultiSet.EntrySet<MultiSet.Entry<InstanceofPredicate>>(hashMultiSet1);
      HashMultiSet<Object> hashMultiSet2 = new HashMultiSet<Object>(abstractMultiSet_EntrySet1);
      hashMultiSet2.add((Object) abstractMultiSet_EntrySet0);
      AbstractMultiSet.UniqueSet<Object> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<Object>(hashMultiSet2);
      assertFalse(hashMultiSet2.isEmpty());
      
      boolean boolean0 = abstractMultiSet_UniqueSet0.remove(abstractMultiSet_EntrySet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MultiSetEntry<Boolean>> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MultiSetEntry<Boolean>>();
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(hashMultiSet0);
      AbstractMultiSet.UniqueSet<Object> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<Object>(hashMultiSet1);
      boolean boolean0 = abstractMultiSet_UniqueSet0.remove("fDLWX4?dr*'<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMultiSet<SequenceInputStream> hashMultiSet0 = new HashMultiSet<SequenceInputStream>();
      Set<MultiSet.Entry<SequenceInputStream>> set0 = (Set<MultiSet.Entry<SequenceInputStream>>)hashMultiSet0.entrySet();
      Set<MultiSet.Entry<SequenceInputStream>> set1 = (Set<MultiSet.Entry<SequenceInputStream>>)hashMultiSet0.entrySet();
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMultiSet<MultiSet.Entry<InstanceofPredicate>> hashMultiSet0 = new HashMultiSet<MultiSet.Entry<InstanceofPredicate>>();
      Set<MultiSet.Entry<InstanceofPredicate>> set0 = hashMultiSet0.uniqueSet();
      Set<MultiSet.Entry<InstanceofPredicate>> set1 = hashMultiSet0.uniqueSet();
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      hashMultiSet0.add(instanceofPredicate0, 2);
      // Undeclared exception!
      try { 
        hashMultiSet0.removeAll(hashMultiSet0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet$MapBasedMultiSetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>(linkedList0);
      SynchronizedMultiSet<InstanceofPredicate> synchronizedMultiSet0 = SynchronizedMultiSet.synchronizedMultiSet((MultiSet<InstanceofPredicate>) hashMultiSet0);
      HashMultiSet<Predicate<Object>> hashMultiSet1 = new HashMultiSet<Predicate<Object>>(synchronizedMultiSet0);
      HashMultiSet<Boolean> hashMultiSet2 = new HashMultiSet<Boolean>();
      HashMultiSet<Object> hashMultiSet3 = new HashMultiSet<Object>(linkedList0);
      hashMultiSet3.add((Object) hashMultiSet1);
      boolean boolean0 = hashMultiSet2.removeAll(hashMultiSet3);
      assertFalse(hashMultiSet3.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      Object object0 = new Object();
      boolean boolean0 = hashMultiSet0.remove(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>();
      int int0 = hashMultiSet0.setCount("org.apache.commons.collections4.multiset.AbstractMultiSet", 355);
      assertEquals(355, hashMultiSet0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Integer integer0 = new Integer((-1705));
      // Undeclared exception!
      try { 
        hashMultiSet0.setCount(integer0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Count must not be negative.
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Integer integer0 = new Integer((-1));
      int int0 = hashMultiSet0.setCount(integer0, 0);
      assertEquals(0, int0);
      assertFalse(hashMultiSet0.contains((-1)));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMultiSet<MultiSet.Entry<InstanceofPredicate>> hashMultiSet0 = new HashMultiSet<MultiSet.Entry<InstanceofPredicate>>();
      AbstractMultiSet.EntrySet<MultiSet.Entry<InstanceofPredicate>> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<MultiSet.Entry<InstanceofPredicate>>(hashMultiSet0);
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(abstractMultiSet_EntrySet0);
      String string0 = hashMultiSet1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMultiSet<InputStream> hashMultiSet0 = new HashMultiSet<InputStream>();
      AbstractMultiSet.UniqueSet<InputStream> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<InputStream>(hashMultiSet0);
      abstractMultiSet_UniqueSet0.clear();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMultiSet<InputStream> hashMultiSet0 = new HashMultiSet<InputStream>();
      AbstractMultiSet.UniqueSet<InputStream> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<InputStream>(hashMultiSet0);
      boolean boolean0 = abstractMultiSet_UniqueSet0.containsAll(hashMultiSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMultiSet<InputStream> hashMultiSet0 = new HashMultiSet<InputStream>();
      HashMultiSet<InstanceofPredicate> hashMultiSet1 = new HashMultiSet<InstanceofPredicate>();
      AbstractMultiSet.UniqueSet<InstanceofPredicate> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<InstanceofPredicate>(hashMultiSet1);
      boolean boolean0 = abstractMultiSet_UniqueSet0.contains(hashMultiSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AbstractMultiSet<InstanceofPredicate> abstractMultiSet0 = (AbstractMultiSet<InstanceofPredicate>) mock(AbstractMultiSet.class, CALLS_REAL_METHODS);
      doReturn((Iterator) null, (Iterator) null, (Iterator) null).when(abstractMultiSet0).createEntrySetIterator();
      doReturn(0).when(abstractMultiSet0).uniqueElements();
      AbstractMultiSet.UniqueSet<InstanceofPredicate> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<InstanceofPredicate>(abstractMultiSet0);
      // Undeclared exception!
      try { 
        NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) abstractMultiSet_UniqueSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MultiSetEntry<Boolean>> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MultiSetEntry<Boolean>>();
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(hashMultiSet0);
      AbstractMultiSet.EntrySet<Object> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<Object>(hashMultiSet1);
      int int0 = abstractMultiSet_EntrySet0.size();
      assertEquals(0, int0);
  }
}
