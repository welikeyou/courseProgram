/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:57:36 GMT 2019
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.list.TreeList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TreeList_ESTest extends TreeList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("i<,s1qGx[ijqR93]h~j");
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.add(0, (Object) "Kut");
      treeList0.lastIndexOf("i<,s1qGx[ijqR93]h~j");
      treeList0.removeAll(linkedList0);
      treeList0.add((Object) "]9f($z+j}aua _-@");
      linkedList0.add("]9f($z+j}aua _-@");
      treeList0.retainAll(linkedList0);
      int int0 = (-236);
      // Undeclared exception!
      try { 
        treeList0.get((-236));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-236, size=1
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.add(0, (Object) "}");
      treeList0.removeAll(linkedList0);
      treeList0.remove(0);
      treeList0.add((Object) "]9f($z+j}aua _-@");
      linkedList0.add("]9f($z+j}aua _-@");
      treeList0.retainAll(linkedList0);
      TreeList<String> treeList1 = new TreeList<String>();
      treeList1.listIterator(0);
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList1, 0);
      treeList1.spliterator();
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.forEachRemaining((Consumer<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      treeList0.add((Object) "=ug>0G<@~TO\"uyo");
      treeList0.remove((Object) "=ug>0G<@~TO\"uyo");
      TreeList<String> treeList1 = new TreeList<String>();
      treeList1.add("=ug>0G<@~TO\"uyo");
      int int0 = 1;
      treeList1.add("x<{dF+#");
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList1, 1);
      treeList_TreeListIterator0.previous();
      treeList_TreeListIterator0.previousIndex();
      TreeList.TreeListIterator<Object> treeList_TreeListIterator1 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator1.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      Integer integer0 = new Integer(408);
      treeList0.remove((Object) integer0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList0.forEach(consumer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      treeList0.remove((Object) " )");
      treeList0.containsAll(linkedList0);
      treeList0.iterator();
      linkedList0.add(" )");
      treeList0.isEmpty();
      treeList0.listIterator();
      linkedList0.offer(" )");
      treeList0.addAll((Collection<? extends String>) linkedList0);
      linkedList0.add("");
      treeList0.addAll(1, (Collection<? extends String>) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>();
      int int0 = (-1643);
      // Undeclared exception!
      try { 
        treeList1.addAll((-1643), (Collection<?>) treeList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1643, Size: 0
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push("");
      treeList0.add("V9`5x(tluta");
      treeList0.add("");
      linkedList0.add("V9`5x(tluta");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.spliterator();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      treeList0.replaceAll(unaryOperator0);
      treeList0.addAll((Collection<? extends String>) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      int int0 = 0;
      treeList1.listIterator(0);
      int int1 = 1;
      treeList1.retainAll(treeList0);
      treeList1.get(1);
      int int2 = new Integer(1);
      // Undeclared exception!
      try { 
        treeList0.subList(1069, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1069) > toIndex(1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.parallelStream();
      linkedList0.push("");
      treeList0.add("V9`5x(tluta");
      linkedList0.add("V9`5x(tluta");
      linkedList0.add("V9`5x(tluta");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.spliterator();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      treeList0.replaceAll(unaryOperator0);
      treeList0.addAll((Collection<? extends String>) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      int int0 = 0;
      treeList1.listIterator(0);
      int int1 = 1;
      treeList1.retainAll(treeList0);
      treeList1.get(1);
      treeList1.size();
      treeList1.toArray();
      // Undeclared exception!
      try { 
        treeList0.subList(1069, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1069) > toIndex(4)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast((String) null);
      linkedList0.add((String) null);
      linkedList0.add("i<,s1qGx[ijqR93]h~j");
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.add(0, (Object) "Kut");
      treeList0.removeAll(linkedList0);
      treeList0.add((Object) "]9f($z+j}aua _-@");
      linkedList0.add("]9f($z+j}aua _-@");
      // Undeclared exception!
      try { 
        treeList0.get((-236));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-236, size=2
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      treeList0.addAll((Collection<? extends Integer>) linkedList0);
      Integer integer0 = new Integer(0);
      treeList0.add(integer0);
      treeList0.size();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      treeList1.listIterator();
      treeList1.iterator();
      Integer integer1 = new Integer(0);
      treeList1.contains(integer1);
      treeList1.iterator();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 1);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList_TreeListIterator0.forEachRemaining(consumer1);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.set(integer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("i<,s1qGx[ijqR93]h~j");
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.add(0, (Object) "Kut");
      treeList0.removeAll(linkedList0);
      treeList0.add((Object) "]9f($z+j}aua _-@");
      linkedList0.add("]9f($z+j}aua _-@");
      treeList0.retainAll(linkedList0);
      treeList0.set(0, "*@f");
      int int0 = (-236);
      // Undeclared exception!
      try { 
        treeList0.get((-236));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-236, size=1
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      linkedList0.add("i<,s1qGx[ijqR93]h~j");
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.add(0, (Object) "Kut");
      treeList0.removeAll(linkedList0);
      treeList0.add((Object) "]9f($z+j}aua _-@");
      linkedList0.add("]9f($z+j}aua _-@");
      treeList0.retainAll(linkedList0);
      int int0 = (-236);
      // Undeclared exception!
      try { 
        treeList0.get((-236));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-236, size=1
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push("");
      treeList0.add("V9`5x(tluta");
      linkedList0.add("V9`5x(tluta");
      linkedList0.add("V9`5x(tluta");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.spliterator();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      treeList0.replaceAll(unaryOperator0);
      treeList0.addAll((Collection<? extends String>) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      int int0 = 0;
      treeList1.listIterator(0);
      int int1 = 1;
      treeList1.retainAll(treeList0);
      treeList1.get(1);
      treeList1.size();
      // Undeclared exception!
      try { 
        treeList0.subList(1069, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1069) > toIndex(4)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("i<,s1qGx[ijqR93]h~j");
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.add(0, (Object) "Kut");
      treeList0.add((Object) "]9f($z+j}aua _-@");
      linkedList0.add("]9f($z+j}aua _-@");
      treeList0.retainAll(linkedList0);
      int int0 = (-236);
      // Undeclared exception!
      try { 
        treeList0.get((-236));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-236, size=2
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      Integer integer0 = new Integer(408);
      treeList0.remove((Object) integer0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList0.forEach(consumer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      treeList0.remove((Object) " )");
      treeList0.containsAll(linkedList0);
      treeList0.iterator();
      linkedList0.add(" )");
      linkedList0.add(" )");
      treeList0.listIterator();
      linkedList0.offer(" )");
      treeList0.addAll((Collection<? extends String>) linkedList0);
      linkedList0.add("");
      treeList0.addAll(1, (Collection<? extends String>) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList0.forEach(consumer1);
      int int0 = (-1643);
      // Undeclared exception!
      try { 
        treeList1.addAll((-1643), (Collection<?>) treeList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1643, Size: 0
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      treeList0.add((Object) "=ug>0G<@~TO\"uyo");
      treeList0.remove((Object) "=ug>0G<@~TO\"uyo");
      TreeList<String> treeList1 = new TreeList<String>();
      treeList1.add("=ug>0G<@~TO\"uyo");
      int int0 = 1;
      treeList1.remove((Object) "");
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList1, 1);
      treeList_TreeListIterator0.previous();
      treeList_TreeListIterator0.previousIndex();
      TreeList.TreeListIterator<Object> treeList_TreeListIterator1 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator1.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      Integer integer0 = new Integer(408);
      treeList0.remove((Object) integer0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList0.forEach(consumer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      treeList0.remove((Object) " )");
      treeList0.containsAll(linkedList0);
      treeList0.iterator();
      linkedList0.add("YiH=},&XEXCv{O>p");
      linkedList0.add(" )");
      linkedList0.add(" )");
      treeList0.listIterator();
      linkedList0.offer(" )");
      treeList0.addAll((Collection<? extends String>) linkedList0);
      linkedList0.add("");
      treeList0.addAll(1, (Collection<? extends String>) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>();
      int int0 = (-1643);
      treeList0.isEmpty();
      int int1 = 2;
      // Undeclared exception!
      try { 
        treeList1.get(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:2, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TreeList<Integer> treeList0 = new TreeList<Integer>(linkedList0);
      TreeList<Integer> treeList1 = new TreeList<Integer>(treeList0);
      treeList1.clear();
      Integer integer0 = new Integer(543);
      linkedList0.add(integer0);
      treeList1.addAll((Collection<? extends Integer>) linkedList0);
      Integer integer1 = new Integer(1820);
      treeList1.indexOf(integer1);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      TreeList<String> treeList2 = new TreeList<String>(linkedList1);
      TreeList<String> treeList3 = new TreeList<String>(treeList2);
      treeList3.size();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      treeList0.containsAll(linkedList0);
      treeList0.iterator();
      linkedList0.add("");
      linkedList0.add("dH8&~E");
      linkedList0.add("#");
      linkedList0.add("5];");
      treeList0.addAll((Collection<? extends String>) linkedList0);
      // Undeclared exception!
      try { 
        treeList0.get((-3881));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-3881, size=5
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      Integer integer0 = new Integer(408);
      treeList0.remove((Object) integer0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList0.forEach(consumer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      treeList0.remove((Object) " )");
      treeList0.containsAll(linkedList0);
      treeList0.iterator();
      linkedList0.add(" )");
      linkedList0.add(" )");
      treeList0.listIterator();
      linkedList0.offer(" )");
      treeList0.addAll((Collection<? extends String>) linkedList0);
      linkedList0.add("");
      treeList0.addAll(1, (Collection<? extends String>) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>();
      int int0 = (-1643);
      // Undeclared exception!
      try { 
        treeList1.addAll((-1643), (Collection<?>) treeList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1643, Size: 0
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("V9`5x(tluta");
      linkedList0.add("V9`5x(tluta");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.add(">4zyiH");
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer1);
      treeList0.forEach(consumer0);
      linkedList0.spliterator();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      treeList0.replaceAll(unaryOperator0);
      treeList0.addAll((Collection<? extends String>) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      treeList1.listIterator(0);
      int int0 = 1;
      treeList1.retainAll(treeList0);
      treeList1.get(1);
      treeList1.size();
      // Undeclared exception!
      try { 
        treeList0.subList(1069, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1069) > toIndex(3)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("V9`5x(tluta");
      linkedList0.add("V9`5x(tluta");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer1);
      treeList0.forEach(consumer0);
      linkedList0.spliterator();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      treeList0.replaceAll(unaryOperator0);
      treeList0.addAll((Collection<? extends String>) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      treeList1.listIterator(0);
      int int0 = 1;
      treeList1.retainAll(treeList0);
      treeList1.get(1);
      treeList1.size();
      // Undeclared exception!
      try { 
        treeList0.subList(1069, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1069) > toIndex(2)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 0);
      treeList_TreeListIterator0.hasNext();
      TreeList<String> treeList1 = new TreeList<String>();
      TreeList<String> treeList2 = new TreeList<String>(treeList1);
      treeList2.listIterator(0);
      treeList2.indexOf(treeList_TreeListIterator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      treeList0.containsAll(linkedList0);
      treeList0.iterator();
      linkedList0.add("");
      linkedList0.add("dH8&~E");
      linkedList0.add("Q#");
      linkedList0.add("5];");
      treeList0.addAll((Collection<? extends String>) linkedList0);
      // Undeclared exception!
      try { 
        treeList0.get((-3881));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-3881, size=4
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("i<,s1qGx[ijqR93]h~j");
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.add(0, (Object) "Kut");
      treeList0.removeAll(linkedList0);
      treeList0.add((Object) "]9f($z+j}aua _-@");
      linkedList0.add("]9f($z+j}aua _-@");
      int int0 = (-236);
      // Undeclared exception!
      try { 
        treeList0.get((-236));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-236, size=2
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      treeList0.add((Object) "=ug>0G<@~TO\"uyo");
      treeList0.remove((Object) "=ug>0G<@~TO\"uyo");
      Integer integer0 = new Integer((-70));
      treeList0.contains(integer0);
      TreeList<String> treeList1 = new TreeList<String>();
      treeList1.removeAll(treeList0);
      // Undeclared exception!
      try { 
        treeList1.add((-70), "=ug>0G<@~TO\"uyo");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-70, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      int int0 = 0;
      int int1 = (-1849);
      TreeList<String> treeList1 = new TreeList<String>();
      TreeList<String> treeList2 = new TreeList<String>(treeList1);
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList2, (-1849));
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      Collection<Integer> collection0 = null;
      // Undeclared exception!
      try { 
        treeList0.addAll((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList<Object> treeList1 = new TreeList<Object>();
      treeList1.size();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      treeList0.add(0, (Object) null);
      treeList0.listIterator();
      TreeList<Object> treeList1 = new TreeList<Object>();
      int int0 = 0;
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList1, 0);
      Integer integer0 = new Integer(44);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.set(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 3690);
      treeList_TreeListIterator0.previousIndex();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 2);
      treeList_TreeListIterator0.nextIndex();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      treeList0.clear();
      TreeList<Integer> treeList1 = new TreeList<Integer>(treeList0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      treeList1.add(integer0);
      TreeList<Integer> treeList2 = new TreeList<Integer>(treeList1);
      treeList2.listIterator(0);
      treeList2.lastIndexOf((Object) null);
      treeList2.remove((Object) treeList0);
      treeList1.lastIndexOf((Object) null);
      treeList2.toArray();
      TreeList<String> treeList3 = new TreeList<String>();
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList3, 0);
      treeList_TreeListIterator0.add("org.apache.commons.collections4.list.TreeList");
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No element at index 1.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      TreeList<Integer> treeList1 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList1, 1835);
      treeList_TreeListIterator0.checkModCount();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      treeList0.clear();
      TreeList<Integer> treeList1 = new TreeList<Integer>();
      TreeList<Integer> treeList2 = new TreeList<Integer>(treeList1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) treeList0;
      objectArray0[1] = (Object) treeList1;
      treeList2.toArray(objectArray0);
      // Undeclared exception!
      try { 
        treeList2.get((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-1, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer[] integerArray0 = new Integer[5];
      int int0 = (-2217);
      Integer integer0 = new Integer((-2217));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1014);
      treeList0.lastIndexOf("3:Dm");
      integerArray0[4] = integer4;
      treeList0.toArray(integerArray0);
      TreeList<String> treeList1 = new TreeList<String>();
      treeList0.addAll((Collection<?>) treeList1);
      TreeList<Integer> treeList2 = new TreeList<Integer>();
      TreeList<Integer> treeList3 = new TreeList<Integer>(treeList2);
      treeList2.addAll((Collection<? extends Integer>) treeList3);
      treeList1.toArray();
      treeList0.toArray();
      // Undeclared exception!
      try { 
        treeList1.add(1014, "3:Dm");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:1014, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      Integer integer0 = new Integer(1);
      treeList0.remove((Object) integer0);
      // Undeclared exception!
      try { 
        treeList0.get((-2256));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-2256, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.toArray();
      TreeList<Integer> treeList1 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList1, 0);
      Integer integer0 = new Integer((-5148));
      treeList1.add(integer0);
      Integer integer1 = new Integer((-5148));
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.set(integer1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      // Undeclared exception!
      try { 
        treeList1.add(44, (Object) treeList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:44, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      treeList0.toArray();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      TreeList<Object> treeList1 = new TreeList<Object>();
      treeList0.addAll((Collection<?>) treeList1);
      treeList0.iterator();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      // Undeclared exception!
      try { 
        treeList0.remove(1161);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:1161, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TreeList<String> treeList0 = new TreeList<String>(linkedList0);
      TreeList<String> treeList1 = new TreeList<String>(treeList0);
      TreeList<String> treeList2 = new TreeList<String>(treeList1);
      TreeList<String> treeList3 = new TreeList<String>(treeList2);
      // Undeclared exception!
      try { 
        treeList3.remove(1537);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:1537, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList<Integer> treeList1 = new TreeList<Integer>();
      treeList0.addAll((Collection<? extends Integer>) treeList1);
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 2482);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, 2);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.clear();
      treeList0.clear();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      TreeList<Object> treeList1 = new TreeList<Object>();
      treeList1.contains(treeList0);
      // Undeclared exception!
      try { 
        treeList1.listIterator(2017);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:2017, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      treeList0.indexOf("");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("],o-9=vET}amX1]a;Ie");
      TreeList<String> treeList0 = new TreeList<String>(linkedList0);
      linkedList0.add(", faedelung ");
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, (-2428));
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.set("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, (-795));
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.set("No element at index ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, (-2638));
      treeList_TreeListIterator0.hasPrevious();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      TreeList<Object> treeList2 = new TreeList<Object>(treeList1);
      treeList2.containsAll(treeList0);
      treeList2.lastIndexOf(treeList1);
      treeList2.listIterator();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Collection<String> collection0 = null;
      TreeList<String> treeList0 = null;
      try {
        treeList0 = new TreeList<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TreeList<String> treeList0 = new TreeList<String>(linkedList0);
      int int0 = (-1683);
      // Undeclared exception!
      try { 
        treeList0.set((-1683), "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-1683, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 1006);
      treeList_TreeListIterator0.hasNext();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, 0);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Already at start of list.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.addAll((Collection<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      treeList1.indexOf(treeList0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      Integer integer0 = new Integer(408);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      treeList0.remove((Object) "");
      treeList0.add("");
      treeList0.iterator();
      linkedList0.add("");
      linkedList0.add("");
      treeList0.listIterator();
      linkedList0.offer("");
      treeList0.addAll((Collection<? extends String>) linkedList0);
      linkedList0.add("b");
      treeList0.addAll(1, (Collection<? extends String>) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>();
      int int0 = (-1643);
      // Undeclared exception!
      try { 
        treeList1.addAll((-1643), (Collection<?>) treeList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1643, Size: 0
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, 1668);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      treeList0.sort(comparator0);
      Integer integer0 = new Integer((-1622));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      treeList0.removeIf(predicate1);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.set(", size=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("i<,s1qGx[ijqR93]h~j");
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.add(0, (Object) "Kut");
      treeList0.removeAll(linkedList0);
      treeList0.add((Object) "]9f($z+j}aua _-@");
      linkedList0.add("]9f($z+j}aua _-@");
      treeList0.retainAll(linkedList0);
      int int0 = (-236);
      // Undeclared exception!
      try { 
        treeList0.get((-236));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-236, size=1
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      treeList0.clear();
      TreeList<Integer> treeList1 = new TreeList<Integer>(treeList0);
      Integer integer0 = new Integer(0);
      treeList1.add(integer0);
      TreeList<Integer> treeList2 = new TreeList<Integer>(treeList1);
      treeList2.listIterator(0);
      Integer integer1 = new Integer(0);
      treeList1.add(integer1);
      treeList2.lastIndexOf((Object) null);
      treeList2.remove((Object) treeList0);
      treeList1.lastIndexOf((Object) null);
      treeList2.toArray();
      TreeList<String> treeList3 = new TreeList<String>();
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList3, 0);
      treeList_TreeListIterator0.add("org.apache.commons.collections4.list.TreeList");
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No element at index 1.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.parallelStream();
      linkedList0.push("");
      treeList0.add("V9`5x(tluta");
      linkedList0.add("V9`5x(tluta");
      linkedList0.add("V9`5x(tluta");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.spliterator();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      treeList0.replaceAll(unaryOperator0);
      treeList0.addAll((Collection<? extends String>) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      ListIterator<Object> listIterator0 = treeList1.listIterator(0);
      int int0 = 1;
      treeList1.retainAll(treeList0);
      treeList1.get(1);
      treeList1.size();
      treeList1.toArray();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      treeList0.contains(listIterator0);
      treeList0.removeAll(treeList1);
      treeList1.toArray();
      // Undeclared exception!
      try { 
        treeList0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:0, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      treeList0.remove((Object) "");
      Integer integer0 = new Integer((-793));
      treeList0.add(0, (Object) integer0);
      TreeList<Integer> treeList1 = new TreeList<Integer>();
      TreeList<Integer> treeList2 = new TreeList<Integer>(treeList1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList2.forEach(consumer0);
      int int0 = (-243);
      // Undeclared exception!
      try { 
        treeList2.set((-243), integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-243, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      treeList0.add((Object) "=ug>0G<@~TO\"uyo");
      treeList0.remove((Object) "=ug>0G<@~TO\"uyo");
      TreeList<String> treeList1 = new TreeList<String>();
      treeList1.add("=ug>0G<@~TO\"uyo");
      int int0 = 1;
      treeList1.remove((Object) "x<{dF+#");
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList1, 1);
      treeList_TreeListIterator0.previous();
      treeList_TreeListIterator0.previousIndex();
      TreeList.TreeListIterator<Object> treeList_TreeListIterator1 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator1.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      // Undeclared exception!
      try { 
        treeList1.addAll((-5544), (Collection<?>) treeList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5544, Size: 0
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      int int0 = 44;
      // Undeclared exception!
      try { 
        treeList0.set(44, "5AWK@{UXKuPueh'E");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:44, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) linkedList0;
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) linkedList0;
      treeList0.toArray(objectArray0);
      boolean boolean0 = treeList0.contains(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      treeList0.addAll((Collection<? extends Integer>) linkedList0);
      int int0 = 0;
      treeList0.size();
      TreeList<String> treeList1 = new TreeList<String>();
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList1, 0);
      String string0 = "9sM>~Tk[L|";
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }
}
