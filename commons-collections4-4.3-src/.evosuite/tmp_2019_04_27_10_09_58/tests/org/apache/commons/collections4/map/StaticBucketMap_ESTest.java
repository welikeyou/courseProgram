/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:02:17 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.map.StaticBucketMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StaticBucketMap_ESTest extends StaticBucketMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StaticBucketMap<Integer, Object> staticBucketMap0 = new StaticBucketMap<Integer, Object>();
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertNotNull(staticBucketMap0);
      
      boolean boolean0 = staticBucketMap0.equals(staticBucketMap0);
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertTrue(boolean0);
      
      StaticBucketMap<String, Integer> staticBucketMap1 = new StaticBucketMap<String, Integer>(1060);
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertNotNull(staticBucketMap1);
      
      StaticBucketMap<Integer, String> staticBucketMap2 = new StaticBucketMap<Integer, String>(244);
      assertEquals(0, staticBucketMap2.size());
      assertTrue(staticBucketMap2.isEmpty());
      assertNotNull(staticBucketMap2);
      
      Collection<String> collection0 = staticBucketMap2.values();
      assertEquals(0, staticBucketMap2.size());
      assertTrue(staticBucketMap2.isEmpty());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StaticBucketMap<Integer, Object> staticBucketMap0 = new StaticBucketMap<Integer, Object>();
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertNotNull(staticBucketMap0);
      
      MapIterator<Integer, Object> mapIterator0 = staticBucketMap0.mapIterator();
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertNotNull(mapIterator0);
      
      Integer integer0 = new Integer((-18));
      assertEquals((-18), (int)integer0);
      assertNotNull(integer0);
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(staticBucketMap0).when(biFunction0).apply(any() , any());
      Collection<Object> collection0 = staticBucketMap0.values();
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertFalse(collection0.contains((-18)));
      assertNotNull(collection0);
      
      StaticBucketMap staticBucketMap1 = (StaticBucketMap)staticBucketMap0.compute(integer0, biFunction0);
      assertFalse(staticBucketMap0.isEmpty());
      assertEquals(1, staticBucketMap0.size());
      assertEquals(1, staticBucketMap1.size());
      assertFalse(staticBucketMap1.isEmpty());
      assertNotNull(staticBucketMap1);
      
      staticBucketMap0.hashCode();
      assertFalse(staticBucketMap0.isEmpty());
      assertEquals(1, staticBucketMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StaticBucketMap<Object, AbstractMap.SimpleEntry<Object, Object>> staticBucketMap0 = new StaticBucketMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(staticBucketMap0);
      
      Set<Object> set0 = staticBucketMap0.keySet();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      StaticBucketMap<Integer, Object> staticBucketMap1 = new StaticBucketMap<Integer, Object>(4536);
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertNotNull(staticBucketMap1);
      
      staticBucketMap1.hashCode();
      assertTrue(staticBucketMap1.isEmpty());
      
      StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, Object> staticBucketMap2 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      assertEquals(0, staticBucketMap2.size());
      assertTrue(staticBucketMap2.isEmpty());
      assertNotNull(staticBucketMap2);
      
      staticBucketMap2.hashCode();
      assertEquals(0, staticBucketMap2.size());
      assertTrue(staticBucketMap2.isEmpty());
      
      StaticBucketMap<Object, Integer> staticBucketMap3 = new StaticBucketMap<Object, Integer>();
      assertTrue(staticBucketMap3.isEmpty());
      assertEquals(0, staticBucketMap3.size());
      assertNotNull(staticBucketMap3);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      staticBucketMap3.putAll(hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(staticBucketMap3.isEmpty());
      assertEquals(0, staticBucketMap3.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      
      StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, Object> staticBucketMap4 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, Object>(252);
      assertTrue(staticBucketMap4.isEmpty());
      assertEquals(0, staticBucketMap4.size());
      assertNotNull(staticBucketMap4);
      
      Collection<Object> collection0 = staticBucketMap4.values();
      assertTrue(staticBucketMap4.isEmpty());
      assertEquals(0, staticBucketMap4.size());
      assertFalse(collection0.contains(252));
      assertNotNull(collection0);
      
      StaticBucketMap<Object, Object> staticBucketMap5 = new StaticBucketMap<Object, Object>(252);
      assertEquals(0, staticBucketMap5.size());
      assertTrue(staticBucketMap5.isEmpty());
      assertNotNull(staticBucketMap5);
      
      Collection<Object> collection1 = staticBucketMap5.values();
      assertFalse(collection1.equals((Object)collection0));
      assertEquals(0, staticBucketMap5.size());
      assertTrue(staticBucketMap5.isEmpty());
      assertFalse(collection1.contains(252));
      assertNotNull(collection1);
      assertNotSame(collection1, collection0);
      
      StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<Object, String>> staticBucketMap6 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<Object, String>>(4536);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StaticBucketMap<String, Integer> staticBucketMap0 = new StaticBucketMap<String, Integer>();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(staticBucketMap0);
      
      staticBucketMap0.clear();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      
      BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = staticBucketMap0.computeIfPresent("", biFunction0);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNull(integer0);
      
      staticBucketMap0.clear();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      
      StaticBucketMap<Integer, Integer> staticBucketMap1 = new StaticBucketMap<Integer, Integer>();
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertNotNull(staticBucketMap1);
      
      Integer integer1 = staticBucketMap1.get("");
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertNull(integer1);
      
      StaticBucketMap<Object, Object> staticBucketMap2 = new StaticBucketMap<Object, Object>();
      assertTrue(staticBucketMap2.isEmpty());
      assertEquals(0, staticBucketMap2.size());
      assertNotNull(staticBucketMap2);
      
      boolean boolean0 = staticBucketMap2.replace((Object) staticBucketMap0, (Object) staticBucketMap1, (Object) null);
      assertTrue(staticBucketMap0.isEmpty());
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap2.isEmpty());
      assertEquals(0, staticBucketMap2.size());
      assertFalse(boolean0);
      
      Set<Object> set0 = staticBucketMap2.keySet();
      assertTrue(staticBucketMap2.isEmpty());
      assertEquals(0, staticBucketMap2.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      
      StaticBucketMap<String, String> staticBucketMap3 = new StaticBucketMap<String, String>(0);
      assertTrue(staticBucketMap3.isEmpty());
      assertEquals(0, staticBucketMap3.size());
      assertNotNull(staticBucketMap3);
      
      BiFunction<String, String, String> biFunction1 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = staticBucketMap3.merge("", "org.apache.commons.collections4.map.StaticBucketMap$KeySet", biFunction1);
      assertFalse(staticBucketMap3.isEmpty());
      assertEquals(1, staticBucketMap3.size());
      assertEquals("org.apache.commons.collections4.map.StaticBucketMap$KeySet", string0);
      assertNotNull(string0);
      
      String string1 = staticBucketMap3.put("", "org.apache.commons.collections4.map.AbstractIterableMap");
      assertFalse(staticBucketMap3.isEmpty());
      assertEquals(2, staticBucketMap3.size());
      assertNull(string1);
      
      StaticBucketMap<Integer, Object> staticBucketMap4 = new StaticBucketMap<Integer, Object>();
      assertEquals(0, staticBucketMap4.size());
      assertTrue(staticBucketMap4.isEmpty());
      assertNotNull(staticBucketMap4);
      
      MapIterator<Integer, Object> mapIterator0 = staticBucketMap4.mapIterator();
      assertEquals(0, staticBucketMap4.size());
      assertTrue(staticBucketMap4.isEmpty());
      assertNotNull(mapIterator0);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      Object object0 = staticBucketMap4.get(integer2);
      assertEquals(0, staticBucketMap4.size());
      assertTrue(staticBucketMap4.isEmpty());
      assertNull(object0);
      
      StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> staticBucketMap5 = new StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(0);
      assertEquals(0, staticBucketMap5.size());
      assertTrue(staticBucketMap5.isEmpty());
      assertNotNull(staticBucketMap5);
      
      boolean boolean1 = staticBucketMap5.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertEquals(0, staticBucketMap5.size());
      assertTrue(staticBucketMap5.isEmpty());
      assertTrue(boolean1);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "");
      assertNotNull(mockThread0);
      
      staticBucketMap0.atomic(mockThread0);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      StaticBucketMap<HashMap<Object, String>, Integer> staticBucketMap6 = new StaticBucketMap<HashMap<Object, String>, Integer>();
      assertEquals(0, staticBucketMap6.size());
      assertTrue(staticBucketMap6.isEmpty());
      assertNotNull(staticBucketMap6);
      
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      BiFunction<Object, Object, Integer> biFunction2 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction2).apply(any() , any());
      Integer integer3 = staticBucketMap6.compute(hashMap1, biFunction2);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertEquals(0, staticBucketMap6.size());
      assertTrue(staticBucketMap6.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(integer3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      
      staticBucketMap6.hashCode();
      assertEquals(0, staticBucketMap6.size());
      assertTrue(staticBucketMap6.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StaticBucketMap<Integer, Object> staticBucketMap0 = new StaticBucketMap<Integer, Object>();
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertNotNull(staticBucketMap0);
      
      StaticBucketMap<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<Object, String>> staticBucketMap1 = new StaticBucketMap<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<Object, String>>(0);
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertNotNull(staticBucketMap1);
      
      StaticBucketMap<String, String> staticBucketMap2 = new StaticBucketMap<String, String>(0);
      assertEquals(0, staticBucketMap2.size());
      assertTrue(staticBucketMap2.isEmpty());
      assertNotNull(staticBucketMap2);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("]Qh").when(biFunction0).apply(anyString() , any());
      String string0 = staticBucketMap2.compute("]Qh", biFunction0);
      assertEquals(1, staticBucketMap2.size());
      assertFalse(staticBucketMap2.isEmpty());
      assertEquals("]Qh", string0);
      assertNotNull(string0);
      
      boolean boolean0 = staticBucketMap2.replace("]Qh", "]Qh", "");
      assertEquals(1, staticBucketMap2.size());
      assertFalse(staticBucketMap2.isEmpty());
      assertFalse(boolean0);
      
      boolean boolean1 = staticBucketMap2.containsValue(staticBucketMap0);
      assertTrue(boolean1 == boolean0);
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertEquals(1, staticBucketMap2.size());
      assertFalse(staticBucketMap2.isEmpty());
      assertFalse(boolean1);
      
      StaticBucketMap<HashMap<Object, Integer>, Object> staticBucketMap3 = new StaticBucketMap<HashMap<Object, Integer>, Object>(0);
      assertTrue(staticBucketMap3.isEmpty());
      assertEquals(0, staticBucketMap3.size());
      assertNotNull(staticBucketMap3);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup1, "org.apache.commons.collections4.map.AbstractIterableMap");
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "]Qh", 891L);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotNull(mockThread2);
      
      staticBucketMap3.atomic(mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertTrue(staticBucketMap3.isEmpty());
      assertEquals(0, staticBucketMap3.size());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StaticBucketMap<String, Object> staticBucketMap0 = new StaticBucketMap<String, Object>((-2857));
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(staticBucketMap0);
      
      StaticBucketMap<Object, Object> staticBucketMap1 = new StaticBucketMap<Object, Object>();
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertNotNull(staticBucketMap1);
      
      staticBucketMap1.clear();
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      StaticBucketMap staticBucketMap2 = (StaticBucketMap)staticBucketMap1.merge(staticBucketMap0, staticBucketMap0, biFunction0);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertFalse(staticBucketMap1.isEmpty());
      assertEquals(1, staticBucketMap1.size());
      assertEquals(0, staticBucketMap2.size());
      assertTrue(staticBucketMap2.isEmpty());
      assertNotNull(staticBucketMap2);
      
      StaticBucketMap staticBucketMap3 = (StaticBucketMap)staticBucketMap1.remove((Object) staticBucketMap0);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap3.size());
      assertTrue(staticBucketMap3.isEmpty());
      assertNotNull(staticBucketMap3);
      assertSame(staticBucketMap3, staticBucketMap2);
      
      StaticBucketMap<Integer, Object> staticBucketMap4 = new StaticBucketMap<Integer, Object>();
      assertTrue(staticBucketMap4.isEmpty());
      assertEquals(0, staticBucketMap4.size());
      assertNotNull(staticBucketMap4);
      
      boolean boolean0 = staticBucketMap4.isEmpty();
      assertTrue(staticBucketMap4.isEmpty());
      assertEquals(0, staticBucketMap4.size());
      assertTrue(boolean0);
      
      StaticBucketMap<AbstractMap.SimpleEntry<String, Integer>, Integer> staticBucketMap5 = new StaticBucketMap<AbstractMap.SimpleEntry<String, Integer>, Integer>();
      assertEquals(0, staticBucketMap5.size());
      assertTrue(staticBucketMap5.isEmpty());
      assertNotNull(staticBucketMap5);
      
      Integer integer0 = staticBucketMap5.replace((AbstractMap.SimpleEntry<String, Integer>) null, (Integer) null);
      assertEquals(0, staticBucketMap5.size());
      assertTrue(staticBucketMap5.isEmpty());
      assertNull(integer0);
      
      staticBucketMap5.clear();
      assertEquals(0, staticBucketMap5.size());
      assertTrue(staticBucketMap5.isEmpty());
      
      Integer integer1 = new Integer((-2857));
      assertEquals((-2857), (int)integer1);
      assertNotNull(integer1);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("", integer1);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, Object>> comparator1 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
      assertNotNull(comparator1);
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      Integer integer2 = new Integer((-2857));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals((-2857), (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = staticBucketMap5.put(abstractMap_SimpleEntry1, integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer2));
      assertEquals(1, staticBucketMap5.size());
      assertFalse(staticBucketMap5.isEmpty());
      assertNull(integer3);
      
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>> staticBucketMap6 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>(120);
      assertTrue(staticBucketMap6.isEmpty());
      assertEquals(0, staticBucketMap6.size());
      assertNotNull(staticBucketMap6);
      
      boolean boolean1 = staticBucketMap6.equals(staticBucketMap4);
      assertTrue(boolean1 == boolean0);
      assertTrue(staticBucketMap6.isEmpty());
      assertEquals(0, staticBucketMap6.size());
      assertTrue(staticBucketMap4.isEmpty());
      assertEquals(0, staticBucketMap4.size());
      assertTrue(boolean1);
      
      StaticBucketMap<String, Integer> staticBucketMap7 = new StaticBucketMap<String, Integer>();
      assertEquals(0, staticBucketMap7.size());
      assertTrue(staticBucketMap7.isEmpty());
      assertNotNull(staticBucketMap7);
      
      Collection<Integer> collection0 = staticBucketMap7.values();
      assertEquals(0, staticBucketMap7.size());
      assertTrue(staticBucketMap7.isEmpty());
      assertFalse(collection0.contains(integer1));
      assertNotNull(collection0);
      
      StaticBucketMap<Object, AbstractMap.SimpleEntry<String, String>> staticBucketMap8 = new StaticBucketMap<Object, AbstractMap.SimpleEntry<String, String>>();
      assertEquals(0, staticBucketMap8.size());
      assertTrue(staticBucketMap8.isEmpty());
      assertNotNull(staticBucketMap8);
      
      Integer integer4 = new Integer(120);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(120, (int)integer4);
      assertNotNull(integer4);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry2 = staticBucketMap8.get(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(0, staticBucketMap8.size());
      assertTrue(staticBucketMap8.isEmpty());
      assertNull(abstractMap_SimpleEntry2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Object, String>> staticBucketMap0 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Object, String>>((-2085));
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(staticBucketMap0);
      
      StaticBucketMap<Object, Object> staticBucketMap1 = new StaticBucketMap<Object, Object>((-2085));
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertNotNull(staticBucketMap1);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      StaticBucketMap staticBucketMap2 = (StaticBucketMap)staticBucketMap1.merge(staticBucketMap0, staticBucketMap0, biFunction0);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(1, staticBucketMap1.size());
      assertFalse(staticBucketMap1.isEmpty());
      assertTrue(staticBucketMap2.isEmpty());
      assertEquals(0, staticBucketMap2.size());
      assertNotNull(staticBucketMap2);
      
      StaticBucketMap staticBucketMap3 = (StaticBucketMap)staticBucketMap1.remove((Object) staticBucketMap0);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap3.size());
      assertTrue(staticBucketMap3.isEmpty());
      assertNotNull(staticBucketMap3);
      assertSame(staticBucketMap3, staticBucketMap2);
      
      StaticBucketMap<Object, String> staticBucketMap4 = new StaticBucketMap<Object, String>();
      assertTrue(staticBucketMap4.isEmpty());
      assertEquals(0, staticBucketMap4.size());
      assertNotNull(staticBucketMap4);
      
      StaticBucketMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleEntry<Object, Integer>> staticBucketMap5 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleEntry<Object, Integer>>((-2085));
      assertTrue(staticBucketMap5.isEmpty());
      assertEquals(0, staticBucketMap5.size());
      assertNotNull(staticBucketMap5);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = staticBucketMap5.get(staticBucketMap0);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertTrue(staticBucketMap5.isEmpty());
      assertEquals(0, staticBucketMap5.size());
      assertNull(abstractMap_SimpleEntry0);
      
      StaticBucketMap<String, Object> staticBucketMap6 = new StaticBucketMap<String, Object>();
      assertEquals(0, staticBucketMap6.size());
      assertTrue(staticBucketMap6.isEmpty());
      assertNotNull(staticBucketMap6);
      
      staticBucketMap1.putAll(staticBucketMap6);
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap6.size());
      assertTrue(staticBucketMap6.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StaticBucketMap<HashMap<Object, String>, Object> staticBucketMap0 = new StaticBucketMap<HashMap<Object, String>, Object>(15);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(staticBucketMap0);
      
      StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> staticBucketMap1 = new StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertNotNull(staticBucketMap1);
      
      Object object0 = staticBucketMap1.remove((Object) staticBucketMap0);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertNull(object0);
      
      StaticBucketMap staticBucketMap2 = (StaticBucketMap)staticBucketMap0.getOrDefault((Object) null, staticBucketMap1);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap2.size());
      assertTrue(staticBucketMap2.isEmpty());
      assertNotNull(staticBucketMap2);
      
      Collection<Object> collection0 = staticBucketMap0.values();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertFalse(collection0.contains(15));
      assertNotNull(collection0);
      
      Set<HashMap<Object, String>> set0 = staticBucketMap0.keySet();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      StaticBucketMap<String, AbstractMap.SimpleEntry<Integer, Object>> staticBucketMap3 = new StaticBucketMap<String, AbstractMap.SimpleEntry<Integer, Object>>(15);
      assertEquals(0, staticBucketMap3.size());
      assertTrue(staticBucketMap3.isEmpty());
      assertNotNull(staticBucketMap3);
      
      staticBucketMap3.clear();
      assertEquals(0, staticBucketMap3.size());
      assertTrue(staticBucketMap3.isEmpty());
      
      boolean boolean0 = staticBucketMap3.isEmpty();
      assertEquals(0, staticBucketMap3.size());
      assertTrue(staticBucketMap3.isEmpty());
      assertTrue(boolean0);
      
      StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, Object> staticBucketMap4 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, Object>(15);
      assertTrue(staticBucketMap4.isEmpty());
      assertEquals(0, staticBucketMap4.size());
      assertNotNull(staticBucketMap4);
      
      staticBucketMap4.hashCode();
      assertTrue(staticBucketMap4.isEmpty());
      assertEquals(0, staticBucketMap4.size());
      
      StaticBucketMap<String, Object> staticBucketMap5 = new StaticBucketMap<String, Object>(15);
      assertEquals(0, staticBucketMap5.size());
      assertTrue(staticBucketMap5.isEmpty());
      assertNotNull(staticBucketMap5);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      staticBucketMap5.forEach(biConsumer0);
      assertEquals(0, staticBucketMap5.size());
      assertTrue(staticBucketMap5.isEmpty());
      
      Object object1 = staticBucketMap5.put("K.eKwKd-", staticBucketMap1);
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(1, staticBucketMap5.size());
      assertFalse(staticBucketMap5.isEmpty());
      assertNull(object1);
      
      StaticBucketMap<Object, AbstractMap.SimpleEntry<Object, Object>> staticBucketMap6 = new StaticBucketMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      assertTrue(staticBucketMap6.isEmpty());
      assertEquals(0, staticBucketMap6.size());
      assertNotNull(staticBucketMap6);
      
      Collection<AbstractMap.SimpleEntry<Object, Object>> collection1 = staticBucketMap6.values();
      assertTrue(staticBucketMap6.isEmpty());
      assertEquals(0, staticBucketMap6.size());
      assertNotNull(collection1);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = staticBucketMap6.equals(integer0);
      assertFalse(boolean1 == boolean0);
      assertTrue(staticBucketMap6.isEmpty());
      assertEquals(0, staticBucketMap6.size());
      assertFalse(boolean1);
      
      StaticBucketMap<Object, Object> staticBucketMap7 = new StaticBucketMap<Object, Object>(15);
      assertTrue(staticBucketMap7.isEmpty());
      assertEquals(0, staticBucketMap7.size());
      assertNotNull(staticBucketMap7);
      
      staticBucketMap7.putAll(staticBucketMap5);
      assertEquals(1, staticBucketMap7.size());
      assertFalse(staticBucketMap7.isEmpty());
      assertEquals(1, staticBucketMap5.size());
      assertFalse(staticBucketMap5.isEmpty());
      
      StaticBucketMap<HashMap<Integer, String>, String> staticBucketMap8 = new StaticBucketMap<HashMap<Integer, String>, String>();
      assertEquals(0, staticBucketMap8.size());
      assertNotNull(staticBucketMap8);
      
      boolean boolean2 = staticBucketMap8.isEmpty();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(staticBucketMap8.isEmpty());
      assertEquals(0, staticBucketMap8.size());
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StaticBucketMap<Integer, String> staticBucketMap0 = new StaticBucketMap<Integer, String>(823);
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertNotNull(staticBucketMap0);
      
      BiConsumer<Integer, String> biConsumer0 = (BiConsumer<Integer, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      staticBucketMap0.forEach(biConsumer0);
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      
      staticBucketMap0.clear();
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      
      StaticBucketMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> staticBucketMap1 = new StaticBucketMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertNotNull(staticBucketMap1);
      
      String string0 = "x";
      // Undeclared exception!
      try { 
        staticBucketMap0.putAll((Map<? extends Integer, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.StaticBucketMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StaticBucketMap<String, String> staticBucketMap0 = new StaticBucketMap<String, String>();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(staticBucketMap0);
      
      int int0 = staticBucketMap0.size();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, int0);
      
      StaticBucketMap<Integer, Integer> staticBucketMap1 = new StaticBucketMap<Integer, Integer>();
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertNotNull(staticBucketMap1);
      
      Set<Integer> set0 = staticBucketMap1.keySet();
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(int0));
      assertNotNull(set0);
      
      StaticBucketMap<Integer, Integer> staticBucketMap2 = new StaticBucketMap<Integer, Integer>();
      assertTrue(staticBucketMap2.equals((Object)staticBucketMap1));
      assertTrue(staticBucketMap2.isEmpty());
      assertEquals(0, staticBucketMap2.size());
      assertNotNull(staticBucketMap2);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = staticBucketMap2.put(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(staticBucketMap2.isEmpty());
      assertEquals(1, staticBucketMap2.size());
      assertNull(integer2);
      assertNotSame(staticBucketMap2, staticBucketMap1);
      
      Integer integer3 = staticBucketMap2.replace(integer0, integer0);
      assertFalse(staticBucketMap2.equals((Object)staticBucketMap1));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(staticBucketMap2.isEmpty());
      assertEquals(1, staticBucketMap2.size());
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      assertNotSame(staticBucketMap2, staticBucketMap1);
      
      staticBucketMap1.putAll(staticBucketMap2);
      assertTrue(staticBucketMap1.equals((Object)staticBucketMap2));
      assertTrue(staticBucketMap2.equals((Object)staticBucketMap1));
      assertFalse(staticBucketMap1.isEmpty());
      assertEquals(1, staticBucketMap1.size());
      assertFalse(staticBucketMap2.isEmpty());
      assertEquals(1, staticBucketMap2.size());
      assertNotSame(staticBucketMap1, staticBucketMap2);
      assertNotSame(staticBucketMap2, staticBucketMap1);
      
      StaticBucketMap<String, Object> staticBucketMap3 = new StaticBucketMap<String, Object>(0);
      assertTrue(staticBucketMap3.isEmpty());
      assertEquals(0, staticBucketMap3.size());
      assertNotNull(staticBucketMap3);
      
      boolean boolean0 = staticBucketMap3.isEmpty();
      assertTrue(staticBucketMap3.isEmpty());
      assertEquals(0, staticBucketMap3.size());
      assertTrue(boolean0);
      
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      Object object0 = staticBucketMap3.compute("org.apache.commons.collections4.map.AbstractIterableMap", biFunction0);
      assertTrue(staticBucketMap3.isEmpty());
      assertEquals(0, staticBucketMap3.size());
      assertNull(object0);
      
      Integer integer4 = new Integer(0);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      
      boolean boolean1 = staticBucketMap3.containsKey(integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, staticBucketMap3.size());
      assertFalse(boolean1);
      
      StaticBucketMap<HashMap<String, String>, String> staticBucketMap4 = new StaticBucketMap<HashMap<String, String>, String>();
      assertTrue(staticBucketMap4.isEmpty());
      assertEquals(0, staticBucketMap4.size());
      assertNotNull(staticBucketMap4);
      
      int int1 = staticBucketMap4.size();
      assertTrue(int1 == int0);
      assertTrue(staticBucketMap4.isEmpty());
      assertEquals(0, staticBucketMap4.size());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StaticBucketMap<Integer, HashMap<Object, String>> staticBucketMap0 = new StaticBucketMap<Integer, HashMap<Object, String>>(0);
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertNotNull(staticBucketMap0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<Object, String> hashMap1 = staticBucketMap0.putIfAbsent(integer0, hashMap0);
      assertEquals(1, staticBucketMap0.size());
      assertFalse(staticBucketMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(hashMap1);
      
      boolean boolean0 = staticBucketMap0.remove((Object) integer0, (Object) "BP6B!i7lZsf*>sxm@GK");
      assertEquals(1, staticBucketMap0.size());
      assertFalse(staticBucketMap0.isEmpty());
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(4439);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(4439, (int)integer1);
      assertNotNull(integer1);
      
      HashMap<Object, String> hashMap2 = staticBucketMap0.replace(integer1, (HashMap<Object, String>) null);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, staticBucketMap0.size());
      assertFalse(staticBucketMap0.isEmpty());
      assertNull(hashMap2);
      
      Integer integer2 = new Integer((-581));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-581), (int)integer2);
      assertNotNull(integer2);
      
      boolean boolean1 = staticBucketMap0.containsValue(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, staticBucketMap0.size());
      assertFalse(staticBucketMap0.isEmpty());
      assertFalse(boolean1);
      
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> staticBucketMap1 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>();
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertNotNull(staticBucketMap1);
      
      StaticBucketMap<AbstractMap.SimpleEntry<String, Object>, Integer> staticBucketMap2 = new StaticBucketMap<AbstractMap.SimpleEntry<String, Object>, Integer>();
      assertTrue(staticBucketMap2.isEmpty());
      assertEquals(0, staticBucketMap2.size());
      assertNotNull(staticBucketMap2);
      
      staticBucketMap2.clear();
      assertTrue(staticBucketMap2.isEmpty());
      assertEquals(0, staticBucketMap2.size());
      
      StaticBucketMap<Object, Object> staticBucketMap3 = new StaticBucketMap<Object, Object>();
      assertEquals(0, staticBucketMap3.size());
      assertTrue(staticBucketMap3.isEmpty());
      assertNotNull(staticBucketMap3);
      
      boolean boolean2 = staticBucketMap3.isEmpty();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, staticBucketMap3.size());
      assertTrue(staticBucketMap3.isEmpty());
      assertTrue(boolean2);
      
      StaticBucketMap<Object, AbstractMap.SimpleEntry<String, Object>> staticBucketMap4 = new StaticBucketMap<Object, AbstractMap.SimpleEntry<String, Object>>(0);
      assertEquals(0, staticBucketMap4.size());
      assertTrue(staticBucketMap4.isEmpty());
      assertNotNull(staticBucketMap4);
      
      boolean boolean3 = staticBucketMap4.containsValue("BP6B!i7lZsf*>sxm@GK");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(0, staticBucketMap4.size());
      assertTrue(staticBucketMap4.isEmpty());
      assertFalse(boolean3);
      
      StaticBucketMap<String, Object> staticBucketMap5 = new StaticBucketMap<String, Object>((-1021));
      assertEquals(0, staticBucketMap5.size());
      assertTrue(staticBucketMap5.isEmpty());
      assertNotNull(staticBucketMap5);
      
      // Undeclared exception!
      try { 
        staticBucketMap5.atomic((Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.StaticBucketMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StaticBucketMap<String, String> staticBucketMap0 = new StaticBucketMap<String, String>();
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertNotNull(staticBucketMap0);
      
      StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> staticBucketMap1 = new StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertNotNull(staticBucketMap1);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      staticBucketMap1.atomic(mockThread0);
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      int int0 = staticBucketMap1.size();
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StaticBucketMap<AbstractMap.SimpleEntry<Object, Integer>, Object> staticBucketMap0 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, Integer>, Object>(142);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(staticBucketMap0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StaticBucketMap<Object, AbstractMap.SimpleEntry<String, Object>> staticBucketMap0 = new StaticBucketMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertNotNull(staticBucketMap0);
      
      Integer integer0 = new Integer((-2564));
      assertEquals((-2564), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = staticBucketMap0.containsValue(integer0);
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertFalse(boolean0);
      
      StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> staticBucketMap1 = new StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>((-2564));
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertNotNull(staticBucketMap1);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = staticBucketMap1.get(staticBucketMap0);
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StaticBucketMap<String, Integer> staticBucketMap0 = new StaticBucketMap<String, Integer>();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(staticBucketMap0);
      
      Runnable runnable0 = null;
      // Undeclared exception!
      try { 
        staticBucketMap0.atomic((Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.StaticBucketMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      StaticBucketMap<Object, Object> staticBucketMap0 = new StaticBucketMap<Object, Object>(0);
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertNotNull(staticBucketMap0);
      
      StaticBucketMap<AbstractMap.SimpleEntry<String, Object>, String> staticBucketMap1 = new StaticBucketMap<AbstractMap.SimpleEntry<String, Object>, String>();
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertNotNull(staticBucketMap1);
      
      Runnable runnable0 = null;
      // Undeclared exception!
      try { 
        staticBucketMap1.atomic((Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.StaticBucketMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StaticBucketMap<Object, Integer> staticBucketMap0 = new StaticBucketMap<Object, Integer>();
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertNotNull(staticBucketMap0);
      
      boolean boolean0 = staticBucketMap0.equals((Object) null);
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertFalse(boolean0);
      
      staticBucketMap0.hashCode();
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> staticBucketMap0 = new StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(staticBucketMap0);
      
      staticBucketMap0.clear();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      
      StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, String> staticBucketMap1 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, String>();
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertNotNull(staticBucketMap1);
      
      Collection<String> collection0 = staticBucketMap1.values();
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2725;
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>> staticBucketMap0 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>(2725);
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(staticBucketMap0);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StaticBucketMap<Integer, AbstractMap.SimpleEntry<Integer, String>> staticBucketMap0 = new StaticBucketMap<Integer, AbstractMap.SimpleEntry<Integer, String>>(993);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(staticBucketMap0);
      
      MockThread mockThread0 = new MockThread("0FN^h95q[");
      assertNotNull(mockThread0);
      
      staticBucketMap0.atomic(mockThread0);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StaticBucketMap<Object, AbstractMap.SimpleEntry<String, Object>> staticBucketMap0 = new StaticBucketMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(staticBucketMap0);
      
      Integer integer0 = new Integer(244);
      assertEquals(244, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = staticBucketMap0.equals(integer0);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(244);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(244, (int)integer1);
      assertNotNull(integer1);
      
      boolean boolean1 = staticBucketMap0.containsValue(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertFalse(boolean1);
      
      StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> staticBucketMap1 = new StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(244);
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertNotNull(staticBucketMap1);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      staticBucketMap1.forEach(biConsumer0);
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = staticBucketMap1.get(staticBucketMap0);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StaticBucketMap<String, String> staticBucketMap0 = new StaticBucketMap<String, String>();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(staticBucketMap0);
      
      int int0 = staticBucketMap0.size();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, int0);
      
      StaticBucketMap<Integer, Integer> staticBucketMap1 = new StaticBucketMap<Integer, Integer>();
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertNotNull(staticBucketMap1);
      
      Set<Integer> set0 = staticBucketMap1.keySet();
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(int0));
      assertNotNull(set0);
      
      StaticBucketMap<Integer, Integer> staticBucketMap2 = new StaticBucketMap<Integer, Integer>();
      assertTrue(staticBucketMap2.equals((Object)staticBucketMap1));
      assertTrue(staticBucketMap2.isEmpty());
      assertEquals(0, staticBucketMap2.size());
      assertNotNull(staticBucketMap2);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(629);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(629, (int)integer1);
      assertNotNull(integer1);
      
      boolean boolean0 = staticBucketMap0.equals(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertFalse(boolean0);
      
      Integer integer2 = new Integer((-1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertEquals((-1), (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = staticBucketMap2.put(integer0, integer2);
      assertFalse(staticBucketMap2.equals((Object)staticBucketMap1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(1, staticBucketMap2.size());
      assertFalse(staticBucketMap2.isEmpty());
      assertNull(integer3);
      assertNotSame(staticBucketMap2, staticBucketMap1);
      
      Integer integer4 = staticBucketMap2.replace(integer0, integer0);
      assertFalse(staticBucketMap2.equals((Object)staticBucketMap1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(1, staticBucketMap2.size());
      assertFalse(staticBucketMap2.isEmpty());
      assertEquals((-1), (int)integer4);
      assertNotNull(integer4);
      assertNotSame(staticBucketMap2, staticBucketMap1);
      
      staticBucketMap1.putAll(staticBucketMap2);
      assertTrue(staticBucketMap2.equals((Object)staticBucketMap1));
      assertEquals(1, staticBucketMap1.size());
      assertFalse(staticBucketMap1.isEmpty());
      assertEquals(1, staticBucketMap2.size());
      assertFalse(staticBucketMap2.isEmpty());
      assertNotSame(staticBucketMap1, staticBucketMap2);
      assertNotSame(staticBucketMap2, staticBucketMap1);
      
      StaticBucketMap<String, Object> staticBucketMap3 = new StaticBucketMap<String, Object>(0);
      assertEquals(0, staticBucketMap3.size());
      assertTrue(staticBucketMap3.isEmpty());
      assertNotNull(staticBucketMap3);
      
      boolean boolean1 = staticBucketMap3.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertEquals(0, staticBucketMap3.size());
      assertTrue(staticBucketMap3.isEmpty());
      assertTrue(boolean1);
      
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(anyString() , any());
      Object object0 = staticBucketMap3.compute("org.apache.commons.collections4.map.AbstractIterableMap", biFunction0);
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)integer1));
      assertTrue(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)integer2));
      assertFalse(object0.equals((Object)integer4));
      assertFalse(staticBucketMap3.isEmpty());
      assertEquals(1, staticBucketMap3.size());
      assertEquals(0, object0);
      assertNotNull(object0);
      
      Integer integer5 = new Integer(0);
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)object0));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals(0, (int)integer5);
      assertNotNull(integer5);
      
      boolean boolean2 = staticBucketMap3.containsKey(integer5);
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)object0));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(staticBucketMap3.isEmpty());
      assertEquals(1, staticBucketMap3.size());
      assertFalse(boolean2);
      
      StaticBucketMap<HashMap<String, String>, String> staticBucketMap4 = new StaticBucketMap<HashMap<String, String>, String>();
      assertEquals(0, staticBucketMap4.size());
      assertTrue(staticBucketMap4.isEmpty());
      assertNotNull(staticBucketMap4);
      
      int int1 = staticBucketMap4.size();
      assertTrue(int1 == int0);
      assertEquals(0, staticBucketMap4.size());
      assertTrue(staticBucketMap4.isEmpty());
      assertEquals(0, int1);
      
      StaticBucketMap<Object, Integer> staticBucketMap5 = new StaticBucketMap<Object, Integer>((-1));
      assertEquals(0, staticBucketMap5.size());
      assertTrue(staticBucketMap5.isEmpty());
      assertNotNull(staticBucketMap5);
      
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, String>, HashMap<Object, Object>> staticBucketMap6 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, String>, HashMap<Object, Object>>();
      assertEquals(0, staticBucketMap6.size());
      assertTrue(staticBucketMap6.isEmpty());
      assertNotNull(staticBucketMap6);
      
      Object object1 = staticBucketMap6.get(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer5));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertEquals(0, staticBucketMap6.size());
      assertTrue(staticBucketMap6.isEmpty());
      assertNull(object1);
      
      boolean boolean3 = staticBucketMap5.containsKey((Object) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(0, staticBucketMap5.size());
      assertTrue(staticBucketMap5.isEmpty());
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StaticBucketMap<String, AbstractMap.SimpleEntry<Integer, Integer>> staticBucketMap0 = new StaticBucketMap<String, AbstractMap.SimpleEntry<Integer, Integer>>(1);
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(staticBucketMap0);
      
      MapIterator<String, AbstractMap.SimpleEntry<Integer, Integer>> mapIterator0 = staticBucketMap0.mapIterator();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(mapIterator0);
      
      Collection<AbstractMap.SimpleEntry<Integer, Integer>> collection0 = staticBucketMap0.values();
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(collection0);
      
      Collection<AbstractMap.SimpleEntry<Integer, Integer>> collection1 = staticBucketMap0.values();
      assertFalse(collection1.equals((Object)collection0));
      assertEquals(0, staticBucketMap0.size());
      assertTrue(staticBucketMap0.isEmpty());
      assertNotNull(collection1);
      assertNotSame(collection1, collection0);
      
      StaticBucketMap<Object, Integer> staticBucketMap1 = new StaticBucketMap<Object, Integer>();
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertNotNull(staticBucketMap1);
      
      Set<Map.Entry<Object, Integer>> set0 = (Set<Map.Entry<Object, Integer>>)staticBucketMap1.entrySet();
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      StaticBucketMap<HashMap<String, Integer>, Integer> staticBucketMap2 = new StaticBucketMap<HashMap<String, Integer>, Integer>(1);
      assertEquals(0, staticBucketMap2.size());
      assertTrue(staticBucketMap2.isEmpty());
      assertNotNull(staticBucketMap2);
      
      boolean boolean0 = staticBucketMap2.equals(staticBucketMap1);
      assertEquals(0, staticBucketMap1.size());
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap2.size());
      assertTrue(staticBucketMap2.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StaticBucketMap<String, Integer> staticBucketMap0 = new StaticBucketMap<String, Integer>();
      //  // Unstable assertion: assertEquals(0, staticBucketMap0.size());
      //  // Unstable assertion: assertTrue(staticBucketMap0.isEmpty());
      //  // Unstable assertion: assertNotNull(staticBucketMap0);
      
      staticBucketMap0.clear();
      //  // Unstable assertion: assertEquals(0, staticBucketMap0.size());
      //  // Unstable assertion: assertTrue(staticBucketMap0.isEmpty());
      
      BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = staticBucketMap0.computeIfPresent("", biFunction0);
      //  // Unstable assertion: assertEquals(0, staticBucketMap0.size());
      //  // Unstable assertion: assertTrue(staticBucketMap0.isEmpty());
      //  // Unstable assertion: assertNull(integer0);
      
      staticBucketMap0.clear();
      //  // Unstable assertion: assertEquals(0, staticBucketMap0.size());
      //  // Unstable assertion: assertTrue(staticBucketMap0.isEmpty());
      
      StaticBucketMap<Integer, Integer> staticBucketMap1 = new StaticBucketMap<Integer, Integer>();
      //  // Unstable assertion: assertTrue(staticBucketMap1.isEmpty());
      //  // Unstable assertion: assertEquals(0, staticBucketMap1.size());
      //  // Unstable assertion: assertNotNull(staticBucketMap1);
      
      Integer integer1 = staticBucketMap1.get("");
      //  // Unstable assertion: assertTrue(staticBucketMap1.isEmpty());
      //  // Unstable assertion: assertEquals(0, staticBucketMap1.size());
      //  // Unstable assertion: assertNull(integer1);
      
      StaticBucketMap<String, String> staticBucketMap2 = new StaticBucketMap<String, String>(0);
      //  // Unstable assertion: assertEquals(0, staticBucketMap2.size());
      //  // Unstable assertion: assertTrue(staticBucketMap2.isEmpty());
      //  // Unstable assertion: assertNotNull(staticBucketMap2);
      
      BiFunction<String, String, String> biFunction1 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = staticBucketMap2.merge("", "org.apache.commons.collections4.map.StaticBucketMap$KeySet", biFunction1);
      //  // Unstable assertion: assertEquals(1, staticBucketMap2.size());
      //  // Unstable assertion: assertFalse(staticBucketMap2.isEmpty());
      //  // Unstable assertion: assertEquals("org.apache.commons.collections4.map.StaticBucketMap$KeySet", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      String string1 = staticBucketMap2.put("", "org.apache.commons.collections4.map.AbstractIterableMap");
      //  // Unstable assertion: assertEquals(2, staticBucketMap2.size());
      //  // Unstable assertion: assertFalse(staticBucketMap2.isEmpty());
      //  // Unstable assertion: assertNull(string1);
      
      StaticBucketMap<Integer, Object> staticBucketMap3 = new StaticBucketMap<Integer, Object>();
      //  // Unstable assertion: assertEquals(0, staticBucketMap3.size());
      //  // Unstable assertion: assertTrue(staticBucketMap3.isEmpty());
      //  // Unstable assertion: assertNotNull(staticBucketMap3);
      
      MapIterator<Integer, Object> mapIterator0 = staticBucketMap3.mapIterator();
      //  // Unstable assertion: assertEquals(0, staticBucketMap3.size());
      //  // Unstable assertion: assertTrue(staticBucketMap3.isEmpty());
      //  // Unstable assertion: assertNotNull(mapIterator0);
      
      Integer integer2 = new Integer(0);
      //  // Unstable assertion: assertEquals(0, (int)integer2);
      //  // Unstable assertion: assertNotNull(integer2);
      
      Object object0 = staticBucketMap3.get(integer2);
      //  // Unstable assertion: assertEquals(0, staticBucketMap3.size());
      //  // Unstable assertion: assertTrue(staticBucketMap3.isEmpty());
      //  // Unstable assertion: assertNull(object0);
      
      StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> staticBucketMap4 = new StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(0);
      //  // Unstable assertion: assertEquals(0, staticBucketMap4.size());
      //  // Unstable assertion: assertTrue(staticBucketMap4.isEmpty());
      //  // Unstable assertion: assertNotNull(staticBucketMap4);
      
      boolean boolean0 = staticBucketMap4.isEmpty();
      //  // Unstable assertion: assertEquals(0, staticBucketMap4.size());
      //  // Unstable assertion: assertTrue(staticBucketMap4.isEmpty());
      //  // Unstable assertion: assertTrue(boolean0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "");
      //  // Unstable assertion: assertNotNull(mockThread0);
      
      MockThread.dumpStack();
      staticBucketMap0.atomic(mockThread0);
      //  // Unstable assertion: assertEquals(0, staticBucketMap0.size());
      //  // Unstable assertion: assertTrue(staticBucketMap0.isEmpty());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      
      StaticBucketMap<HashMap<Object, String>, Integer> staticBucketMap5 = new StaticBucketMap<HashMap<Object, String>, Integer>();
      //  // Unstable assertion: assertTrue(staticBucketMap5.isEmpty());
      //  // Unstable assertion: assertEquals(0, staticBucketMap5.size());
      //  // Unstable assertion: assertNotNull(staticBucketMap5);
      
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      //  // Unstable assertion: assertEquals(0, hashMap0.size());
      //  // Unstable assertion: assertTrue(hashMap0.isEmpty());
      //  // Unstable assertion: assertNotNull(hashMap0);
      
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>(hashMap0);
      //  // Unstable assertion: assertTrue(hashMap1.equals((Object)hashMap0));
      //  // Unstable assertion: assertEquals(0, hashMap0.size());
      //  // Unstable assertion: assertTrue(hashMap0.isEmpty());
      //  // Unstable assertion: assertEquals(0, hashMap1.size());
      //  // Unstable assertion: assertTrue(hashMap1.isEmpty());
      //  // Unstable assertion: assertNotNull(hashMap1);
      
      String string2 = hashMap1.put("", (String) null);
      //  // Unstable assertion: assertFalse(hashMap0.equals((Object)hashMap1));
      //  // Unstable assertion: assertFalse(hashMap1.equals((Object)hashMap0));
      //  // Unstable assertion: assertEquals(0, hashMap0.size());
      //  // Unstable assertion: assertTrue(hashMap0.isEmpty());
      //  // Unstable assertion: assertEquals(1, hashMap1.size());
      //  // Unstable assertion: assertFalse(hashMap1.isEmpty());
      //  // Unstable assertion: assertNull(string2);
      //  // Unstable assertion: assertNotSame(hashMap0, hashMap1);
      //  // Unstable assertion: assertNotSame(hashMap1, hashMap0);
      
      BiFunction<Object, Object, Integer> biFunction2 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer3 = new Integer(0);
      //  // Unstable assertion: assertTrue(integer3.equals((Object)integer2));
      //  // Unstable assertion: assertEquals(0, (int)integer3);
      //  // Unstable assertion: assertNotNull(integer3);
      
      staticBucketMap5.hashCode();
      //  // Unstable assertion: assertTrue(staticBucketMap5.isEmpty());
      //  // Unstable assertion: assertEquals(0, staticBucketMap5.size());
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)staticBucketMap0.entrySet();
      //  // Unstable assertion: assertEquals(0, staticBucketMap0.size());
      //  // Unstable assertion: assertTrue(staticBucketMap0.isEmpty());
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertTrue(set0.isEmpty());
      //  // Unstable assertion: assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StaticBucketMap<HashMap<String, String>, Object> staticBucketMap0 = new StaticBucketMap<HashMap<String, String>, Object>();
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertNotNull(staticBucketMap0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put((String) null, "SI6NH8|D>");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      Object object0 = staticBucketMap0.replace(hashMap0, (Object) hashMap0);
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(object0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = staticBucketMap0.computeIfPresent(hashMap1, biFunction0);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(object1);
      assertNotSame(hashMap1, hashMap0);
      
      staticBucketMap0.hashCode();
      assertTrue(staticBucketMap0.isEmpty());
      assertEquals(0, staticBucketMap0.size());
      
      StaticBucketMap<String, Integer> staticBucketMap1 = new StaticBucketMap<String, Integer>();
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      assertNotNull(staticBucketMap1);
      
      staticBucketMap1.hashCode();
      assertTrue(staticBucketMap1.isEmpty());
      assertEquals(0, staticBucketMap1.size());
      
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, String>> staticBucketMap2 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertEquals(0, staticBucketMap2.size());
      assertTrue(staticBucketMap2.isEmpty());
      assertNotNull(staticBucketMap2);
      
      MapIterator<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, String>> mapIterator0 = staticBucketMap2.mapIterator();
      assertEquals(0, staticBucketMap2.size());
      assertTrue(staticBucketMap2.isEmpty());
      assertNotNull(mapIterator0);
      
      int int0 = staticBucketMap2.size();
      assertEquals(0, staticBucketMap2.size());
      assertTrue(staticBucketMap2.isEmpty());
      assertEquals(0, int0);
      
      StaticBucketMap<Integer, String> staticBucketMap3 = new StaticBucketMap<Integer, String>();
      assertEquals(0, staticBucketMap3.size());
      assertNotNull(staticBucketMap3);
      
      boolean boolean0 = staticBucketMap3.equals(staticBucketMap2);
      assertEquals(0, staticBucketMap2.size());
      assertTrue(staticBucketMap2.isEmpty());
      assertTrue(staticBucketMap3.isEmpty());
      assertEquals(0, staticBucketMap3.size());
      assertTrue(boolean0);
      
      StaticBucketMap<Object, HashMap<String, Integer>> staticBucketMap4 = new StaticBucketMap<Object, HashMap<String, Integer>>();
      assertTrue(staticBucketMap4.isEmpty());
      assertEquals(0, staticBucketMap4.size());
      assertNotNull(staticBucketMap4);
      
      int int1 = staticBucketMap4.hashCode();
      assertTrue(int1 == int0);
      assertTrue(staticBucketMap4.isEmpty());
      assertEquals(0, staticBucketMap4.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StaticBucketMap<Integer, AbstractMap.SimpleEntry<Object, String>> staticBucketMap0 = new StaticBucketMap<Integer, AbstractMap.SimpleEntry<Object, String>>();
      StaticBucketMap<Object, String> staticBucketMap1 = new StaticBucketMap<Object, String>();
      staticBucketMap1.remove((Object) staticBucketMap0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      staticBucketMap1.putAll(hashMap0);
      hashMap0.values();
      StaticBucketMap<Object, Integer> staticBucketMap2 = new StaticBucketMap<Object, Integer>();
      staticBucketMap2.remove((Object) hashMap0);
      int int0 = (-140);
      StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> staticBucketMap3 = new StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<Integer, Object>>((-140));
      String string0 = "org.apache.commons.collections4.map.AbstractIterableMap";
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      staticBucketMap3.forEach(biConsumer0);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>((Map.Entry<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> staticBucketMap0 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>();
      Integer integer0 = new Integer(0);
      staticBucketMap0.getOrDefault(integer0, "");
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      staticBucketMap0.forEach(biConsumer0);
      StaticBucketMap<Object, Integer> staticBucketMap1 = new StaticBucketMap<Object, Integer>();
      staticBucketMap1.isEmpty();
      StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, Integer> staticBucketMap2 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, Integer>(0);
      boolean boolean0 = staticBucketMap2.containsValue(staticBucketMap0);
      StaticBucketMap<String, String> staticBucketMap3 = new StaticBucketMap<String, String>(0);
      boolean boolean1 = staticBucketMap3.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }
}
