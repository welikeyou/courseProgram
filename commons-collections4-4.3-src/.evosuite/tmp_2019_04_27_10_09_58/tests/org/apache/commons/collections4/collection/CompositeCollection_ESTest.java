/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:19:36 GMT 2019
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.apache.commons.collections4.collection.CompositeCollection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompositeCollection_ESTest extends CompositeCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Collection<Collection<Object>>[] collectionArray0 = (Collection<Collection<Object>>[]) Array.newInstance(Collection.class, 6);
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      collectionArray0[0] = (Collection<Collection<Object>>) linkedList0;
      LinkedList<Collection<Object>> linkedList1 = new LinkedList<Collection<Object>>();
      collectionArray0[1] = (Collection<Collection<Object>>) linkedList1;
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      List<Collection<Object>> list0 = compositeCollection0.getCollections();
      collectionArray0[2] = (Collection<Collection<Object>>) list0;
      CompositeCollection<Collection<Object>> compositeCollection1 = new CompositeCollection<Collection<Object>>(linkedList1, collectionArray0[0]);
      collectionArray0[3] = (Collection<Collection<Object>>) compositeCollection1;
      CompositeCollection<Collection<Object>> compositeCollection2 = new CompositeCollection<Collection<Object>>(linkedList0, collectionArray0[1]);
      collectionArray0[4] = (Collection<Collection<Object>>) compositeCollection2;
      List<Collection<Object>> list1 = compositeCollection0.getCollections();
      collectionArray0[5] = (Collection<Collection<Object>>) list1;
      CompositeCollection<Collection<Object>> compositeCollection3 = new CompositeCollection<Collection<Object>>(collectionArray0);
      CompositeCollection<Collection<Object>> compositeCollection4 = new CompositeCollection<Collection<Object>>(list1, list0);
      CompositeCollection<Collection<Object>> compositeCollection5 = new CompositeCollection<Collection<Object>>(compositeCollection3, compositeCollection4);
      CompositeCollection<Collection<Object>> compositeCollection6 = new CompositeCollection<Collection<Object>>(compositeCollection5, compositeCollection3);
      // Undeclared exception!
      try { 
        compositeCollection6.retainAll(compositeCollection4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 3);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      collectionArray0[0] = (Collection<Integer>) linkedList0;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      collectionArray0[1] = (Collection<Integer>) linkedList1;
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Collection<Integer> collection0 = new CompositeCollection<Integer>(collectionArray0[1], linkedList1);
      collectionArray0[2] = collection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0);
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(compositeCollection1, collectionArray0[0]);
      Collection<Integer> collection1 = compositeCollection2.toCollection();
      compositeCollection1.size();
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      compositeCollection1.addComposited(collectionArray0[1], collectionArray0[1]);
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(collection1);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Integer integer1 = new Integer(1931);
      linkedList0.add(integer1);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      compositeCollection3.removeIf(predicate3);
      Collection<Integer> collection2 = compositeCollection3.toCollection();
      compositeCollection1.containsAll(compositeCollection2);
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(collection2, compositeCollection2);
      compositeCollection2.removeAll(linkedList0);
      assertFalse(linkedList0.contains(1931));
      
      Object[] objectArray0 = compositeCollection0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>(linkedList0, linkedList0);
      linkedList0.add("shJ./BB[}yc1");
      linkedList0.add("shJ./BB[}yc1");
      linkedList0.add("add() is not supported on CompositeCollection without a CollectionMutator strategy");
      compositeCollection0.iterator();
      compositeCollection0.containsAll(linkedList0);
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 3);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>();
      Collection<Integer> collection0 = compositeCollection1.toCollection();
      collectionArray0[0] = collection0;
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(compositeCollection1, collection0);
      collectionArray0[1] = (Collection<Integer>) compositeCollection2;
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(collectionArray0);
      collectionArray0[2] = (Collection<Integer>) compositeCollection3;
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(compositeCollection1, compositeCollection1);
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>(compositeCollection4, collection0);
      compositeCollection5.clear();
      Collection<Object>[] collectionArray1 = (Collection<Object>[]) Array.newInstance(Collection.class, 6);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      CompositeCollection<Object> compositeCollection6 = new CompositeCollection<Object>(linkedList1);
      CompositeCollection<Object> compositeCollection7 = new CompositeCollection<Object>(compositeCollection6, linkedList1);
      collectionArray1[0] = (Collection<Object>) compositeCollection7;
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      collectionArray1[1] = (Collection<Object>) linkedList2;
      CompositeCollection<Object> compositeCollection8 = new CompositeCollection<Object>();
      collectionArray1[2] = (Collection<Object>) compositeCollection8;
      CompositeCollection<Object> compositeCollection9 = new CompositeCollection<Object>(linkedList1);
      collectionArray1[3] = (Collection<Object>) compositeCollection9;
      CompositeCollection<Object> compositeCollection10 = new CompositeCollection<Object>(compositeCollection6);
      collectionArray1[4] = (Collection<Object>) compositeCollection10;
      CompositeCollection<Object> compositeCollection11 = new CompositeCollection<Object>(compositeCollection10);
      collectionArray1[5] = (Collection<Object>) compositeCollection11;
      CompositeCollection<Object> compositeCollection12 = new CompositeCollection<Object>(collectionArray1);
      CompositeCollection<Object> compositeCollection13 = new CompositeCollection<Object>(compositeCollection12);
      compositeCollection13.size();
      boolean boolean0 = compositeCollection0.retainAll(compositeCollection5);
      assertFalse(linkedList0.contains("shJ./BB[}yc1"));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Collection<Object>[] collectionArray0 = (Collection<Object>[]) Array.newInstance(Collection.class, 7);
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>((Collection<Object>) null);
      collectionArray0[0] = (Collection<Object>) compositeCollection0;
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>((Collection<Object>) null);
      collectionArray0[1] = (Collection<Object>) compositeCollection1;
      CompositeCollection<Object> compositeCollection2 = new CompositeCollection<Object>(collectionArray0[0]);
      collectionArray0[2] = (Collection<Object>) compositeCollection2;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      collectionArray0[3] = (Collection<Object>) linkedList0;
      CompositeCollection<Object> compositeCollection3 = new CompositeCollection<Object>();
      collectionArray0[4] = (Collection<Object>) compositeCollection3;
      CompositeCollection<Object> compositeCollection4 = new CompositeCollection<Object>();
      collectionArray0[5] = (Collection<Object>) compositeCollection4;
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 3);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      collectionArray0[0] = (Collection<Integer>) linkedList0;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      collectionArray0[1] = (Collection<Integer>) linkedList1;
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Collection<Integer> collection0 = compositeCollection0.toCollection();
      collectionArray0[2] = collection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, collectionArray0[0]);
      Collection<Integer> collection1 = compositeCollection1.toCollection();
      int int0 = compositeCollection0.size();
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      compositeCollection0.addComposited(collectionArray0[1], collectionArray0[1]);
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(collection1);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      compositeCollection2.removeIf(predicate3);
      Collection<Integer> collection2 = compositeCollection2.toCollection();
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(collection2, compositeCollection1);
      compositeCollection1.removeAll(linkedList0);
      compositeCollection0.toArray();
      assertTrue(compositeCollection0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Collection<Object>[] collectionArray0 = (Collection<Object>[]) Array.newInstance(Collection.class, 2);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      collectionArray0[0] = (Collection<Object>) linkedList0;
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      collectionArray0[1] = (Collection<Object>) linkedList1;
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>(collectionArray0);
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(compositeCollection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>();
      CompositeCollection<String> compositeCollection1 = new CompositeCollection<String>(compositeCollection0);
      Collection<String>[] collectionArray0 = (Collection<String>[]) Array.newInstance(Collection.class, 9);
      collectionArray0[0] = (Collection<String>) compositeCollection0;
      collectionArray0[1] = (Collection<String>) compositeCollection1;
      collectionArray0[2] = (Collection<String>) compositeCollection0;
      collectionArray0[3] = (Collection<String>) compositeCollection0;
      collectionArray0[4] = (Collection<String>) compositeCollection1;
      CompositeCollection<String> compositeCollection2 = new CompositeCollection<String>(collectionArray0[4]);
      collectionArray0[5] = (Collection<String>) compositeCollection2;
      collectionArray0[6] = (Collection<String>) compositeCollection1;
      collectionArray0[7] = (Collection<String>) compositeCollection1;
      collectionArray0[8] = (Collection<String>) compositeCollection1;
      compositeCollection1.addComposited(collectionArray0);
      compositeCollection1.getCollections();
      Collection<Object>[] collectionArray1 = (Collection<Object>[]) Array.newInstance(Collection.class, 2);
      CompositeCollection<Object> compositeCollection3 = new CompositeCollection<Object>(collectionArray1);
      collectionArray1[0] = (Collection<Object>) compositeCollection3;
      CompositeCollection<Object> compositeCollection4 = new CompositeCollection<Object>();
      collectionArray1[1] = (Collection<Object>) compositeCollection4;
      CompositeCollection<Object> compositeCollection5 = new CompositeCollection<Object>(collectionArray1);
      CompositeCollection<Object> compositeCollection6 = new CompositeCollection<Object>(compositeCollection5, compositeCollection5);
      // Undeclared exception!
      try { 
        compositeCollection6.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 3);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      collectionArray0[0] = (Collection<Integer>) compositeCollection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0[0]);
      collectionArray0[1] = (Collection<Integer>) compositeCollection1;
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(collectionArray0[1]);
      collectionArray0[2] = (Collection<Integer>) compositeCollection2;
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(collectionArray0);
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(compositeCollection3);
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>(compositeCollection4);
      compositeCollection5.getMutator();
      CompositeCollection<Object> compositeCollection6 = new CompositeCollection<Object>();
      Collection<Object>[] collectionArray1 = (Collection<Object>[]) Array.newInstance(Collection.class, 1);
      collectionArray1[0] = (Collection<Object>) compositeCollection6;
      compositeCollection6.addComposited(collectionArray1);
      Collection<String>[] collectionArray2 = (Collection<String>[]) Array.newInstance(Collection.class, 7);
      CompositeCollection<String> compositeCollection7 = new CompositeCollection<String>(collectionArray2);
      CompositeCollection<String> compositeCollection8 = new CompositeCollection<String>(compositeCollection7);
      CompositeCollection<String> compositeCollection9 = new CompositeCollection<String>(compositeCollection8, compositeCollection7);
      collectionArray2[0] = (Collection<String>) compositeCollection9;
      CompositeCollection<String> compositeCollection10 = new CompositeCollection<String>(compositeCollection9);
      collectionArray2[1] = (Collection<String>) compositeCollection10;
      CompositeCollection<String> compositeCollection11 = new CompositeCollection<String>(collectionArray2);
      collectionArray2[2] = (Collection<String>) compositeCollection11;
      CompositeCollection<String> compositeCollection12 = new CompositeCollection<String>(collectionArray2);
      collectionArray2[3] = (Collection<String>) compositeCollection12;
      Collection<String>[] collectionArray3 = (Collection<String>[]) Array.newInstance(Collection.class, 7);
      collectionArray3[0] = (Collection<String>) compositeCollection7;
      collectionArray3[1] = (Collection<String>) compositeCollection12;
      collectionArray3[2] = (Collection<String>) compositeCollection9;
      collectionArray3[3] = (Collection<String>) compositeCollection10;
      collectionArray3[4] = (Collection<String>) compositeCollection7;
      collectionArray3[5] = (Collection<String>) compositeCollection11;
      collectionArray3[6] = (Collection<String>) compositeCollection7;
      CompositeCollection<String> compositeCollection13 = new CompositeCollection<String>(collectionArray3);
      collectionArray2[4] = (Collection<String>) compositeCollection13;
      CompositeCollection<String> compositeCollection14 = new CompositeCollection<String>(compositeCollection10, collectionArray3[0]);
      collectionArray2[5] = (Collection<String>) compositeCollection14;
      CompositeCollection<String> compositeCollection15 = new CompositeCollection<String>(collectionArray2);
      collectionArray2[6] = (Collection<String>) compositeCollection15;
      CompositeCollection<String> compositeCollection16 = new CompositeCollection<String>(collectionArray2);
      CompositeCollection<String> compositeCollection17 = new CompositeCollection<String>(compositeCollection16, collectionArray3[6]);
      // Undeclared exception!
      try { 
        compositeCollection17.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompositeCollection<LinkedList<Integer>> compositeCollection0 = new CompositeCollection<LinkedList<Integer>>();
      compositeCollection0.toCollection();
      compositeCollection0.parallelStream();
      Object[] objectArray0 = compositeCollection0.toArray();
      Collection<LinkedList<Integer>> collection0 = compositeCollection0.toCollection();
      CompositeCollection<String> compositeCollection1 = new CompositeCollection<String>();
      compositeCollection1.removeAll(collection0);
      compositeCollection1.retainAll(collection0);
      compositeCollection1.toArray(objectArray0);
      CompositeCollection<Object> compositeCollection2 = new CompositeCollection<Object>();
      CompositeCollection<Object> compositeCollection3 = new CompositeCollection<Object>(compositeCollection2, compositeCollection2);
      compositeCollection3.addComposited((Collection<Object>) compositeCollection2, (Collection<Object>) compositeCollection2);
      CompositeCollection<Object> compositeCollection4 = new CompositeCollection<Object>((Collection<Object>) null);
      compositeCollection3.addComposited((Collection<Object>) compositeCollection2, (Collection<Object>) compositeCollection4);
      // Undeclared exception!
      try { 
        compositeCollection2.addAll(collection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.addLast(object0);
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>(linkedList0, linkedList0);
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(compositeCollection0);
      compositeCollection0.toArray();
      CompositeCollection<Object> compositeCollection2 = new CompositeCollection<Object>(compositeCollection1);
      linkedList0.toArray();
      compositeCollection2.getCollections();
      compositeCollection2.iterator();
      compositeCollection0.getCollections();
      CompositeCollection<String> compositeCollection3 = new CompositeCollection<String>();
      compositeCollection0.removeAll(linkedList0);
      compositeCollection3.containsAll(compositeCollection1);
      Collection<String>[] collectionArray0 = (Collection<String>[]) Array.newInstance(Collection.class, 1);
      collectionArray0[0] = (Collection<String>) compositeCollection3;
      CompositeCollection<String> compositeCollection4 = new CompositeCollection<String>(collectionArray0);
      // Undeclared exception!
      try { 
        compositeCollection3.addAll(compositeCollection4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      compositeCollection0.getMutator();
      compositeCollection0.setMutator((CompositeCollection.CollectionMutator<Object>) null);
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(compositeCollection0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(linkedList0);
      Integer integer0 = new Integer(1336);
      List<Collection<Integer>> list0 = compositeCollection2.getCollections();
      linkedList0.add(integer0);
      compositeCollection1.removeAll(list0);
      // Undeclared exception!
      try { 
        compositeCollection2.addAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Collection<LinkedList<String>>[] collectionArray0 = (Collection<LinkedList<String>>[]) Array.newInstance(Collection.class, 7);
      CompositeCollection<LinkedList<String>> compositeCollection0 = new CompositeCollection<LinkedList<String>>(collectionArray0);
      collectionArray0[0] = (Collection<LinkedList<String>>) compositeCollection0;
      CompositeCollection<LinkedList<String>> compositeCollection1 = new CompositeCollection<LinkedList<String>>(collectionArray0);
      collectionArray0[1] = (Collection<LinkedList<String>>) compositeCollection1;
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      collectionArray0[2] = (Collection<LinkedList<String>>) linkedList0;
      CompositeCollection<LinkedList<String>> compositeCollection2 = new CompositeCollection<LinkedList<String>>(compositeCollection1, collectionArray0[1]);
      collectionArray0[3] = (Collection<LinkedList<String>>) compositeCollection2;
      CompositeCollection<LinkedList<String>> compositeCollection3 = new CompositeCollection<LinkedList<String>>();
      collectionArray0[4] = (Collection<LinkedList<String>>) compositeCollection3;
      // Undeclared exception!
      try { 
        compositeCollection1.retainAll(compositeCollection2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      compositeCollection0.removeComposited((Collection<Integer>) null);
      int int0 = compositeCollection0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(compositeCollection0);
      Collection<Object> collection0 = null;
      // Undeclared exception!
      try { 
        compositeCollection0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Collection<Object>[] collectionArray0 = (Collection<Object>[]) Array.newInstance(Collection.class, 3);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      collectionArray0[0] = (Collection<Object>) linkedList0;
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      collectionArray0[1] = (Collection<Object>) compositeCollection0;
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(linkedList0);
      collectionArray0[2] = (Collection<Object>) compositeCollection1;
      compositeCollection0.getCollections();
      CompositeCollection<Object> compositeCollection2 = new CompositeCollection<Object>(collectionArray0);
      compositeCollection2.isEmpty();
      CompositeCollection<Object> compositeCollection3 = new CompositeCollection<Object>(compositeCollection2);
      CompositeCollection<Object> compositeCollection4 = new CompositeCollection<Object>(compositeCollection3, compositeCollection2);
      compositeCollection4.iterator();
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>();
      compositeCollection5.isEmpty();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      CompositeCollection<String> compositeCollection6 = new CompositeCollection<String>(linkedList1, linkedList1);
      compositeCollection6.clear();
      compositeCollection5.clear();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) compositeCollection0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      compositeCollection0.removeIf(predicate3);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      assertFalse(compositeCollection1.equals((Object)compositeCollection0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Collection<String>[] collectionArray0 = (Collection<String>[]) Array.newInstance(Collection.class, 4);
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>(collectionArray0);
      collectionArray0[0] = (Collection<String>) compositeCollection0;
      CompositeCollection<String> compositeCollection1 = new CompositeCollection<String>(collectionArray0);
      collectionArray0[1] = (Collection<String>) compositeCollection1;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      collectionArray0[2] = (Collection<String>) linkedList0;
      CompositeCollection<String> compositeCollection2 = new CompositeCollection<String>(compositeCollection0);
      collectionArray0[3] = (Collection<String>) compositeCollection2;
      CompositeCollection<String> compositeCollection3 = new CompositeCollection<String>(collectionArray0);
      CompositeCollection<String> compositeCollection4 = new CompositeCollection<String>(compositeCollection3);
      // Undeclared exception!
      try { 
        compositeCollection4.contains(compositeCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>(linkedList0, linkedList0);
      linkedList0.add("shJ./BB[}yc1");
      linkedList0.add("add() is not supported on CompositeCollection without a CollectionMutator strategy");
      compositeCollection0.iterator();
      compositeCollection0.containsAll(linkedList0);
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 3);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>();
      Collection<Integer> collection0 = compositeCollection1.toCollection();
      collectionArray0[0] = collection0;
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(compositeCollection1, collection0);
      collectionArray0[1] = (Collection<Integer>) compositeCollection2;
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(collectionArray0);
      collectionArray0[2] = (Collection<Integer>) compositeCollection3;
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(collectionArray0);
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>(compositeCollection4, collection0);
      // Undeclared exception!
      try { 
        compositeCollection5.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Collection<String>[] collectionArray0 = (Collection<String>[]) Array.newInstance(Collection.class, 4);
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>(collectionArray0);
      collectionArray0[0] = (Collection<String>) compositeCollection0;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      collectionArray0[1] = (Collection<String>) linkedList0;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      collectionArray0[2] = (Collection<String>) linkedList1;
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList1.spliterator();
      collectionArray0[3] = (Collection<String>) linkedList2;
      CompositeCollection<String> compositeCollection1 = new CompositeCollection<String>(collectionArray0);
      // Undeclared exception!
      try { 
        compositeCollection1.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      compositeCollection0.isEmpty();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      compositeCollection0.addComposited((Collection<Object>) linkedList0, (Collection<Object>) linkedList0);
      compositeCollection0.getCollections();
      compositeCollection0.size();
      compositeCollection0.spliterator();
      compositeCollection0.addComposited((Collection<Object>) null, (Collection<Object>) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Collection<String>[] collectionArray0 = (Collection<String>[]) Array.newInstance(Collection.class, 3);
      collectionArray0[0] = (Collection<String>) linkedList1;
      collectionArray0[1] = (Collection<String>) linkedList1;
      collectionArray0[2] = (Collection<String>) linkedList1;
      CompositeCollection<String> compositeCollection1 = new CompositeCollection<String>(collectionArray0);
      CompositeCollection<String> compositeCollection2 = new CompositeCollection<String>(linkedList1, compositeCollection1);
      compositeCollection2.toCollection();
      Collection<Integer>[] collectionArray1 = (Collection<Integer>[]) Array.newInstance(Collection.class, 8);
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(collectionArray1);
      collectionArray1[0] = (Collection<Integer>) compositeCollection3;
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(collectionArray1);
      collectionArray1[1] = (Collection<Integer>) compositeCollection4;
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>(collectionArray1);
      collectionArray1[2] = (Collection<Integer>) compositeCollection5;
      CompositeCollection<Integer> compositeCollection6 = new CompositeCollection<Integer>(compositeCollection5);
      collectionArray1[3] = (Collection<Integer>) compositeCollection6;
      CompositeCollection<Integer> compositeCollection7 = new CompositeCollection<Integer>(collectionArray1[2], compositeCollection6);
      collectionArray1[4] = (Collection<Integer>) compositeCollection7;
      CompositeCollection<Integer> compositeCollection8 = new CompositeCollection<Integer>();
      collectionArray1[5] = (Collection<Integer>) compositeCollection8;
      CompositeCollection<Integer> compositeCollection9 = new CompositeCollection<Integer>(compositeCollection3);
      collectionArray1[6] = (Collection<Integer>) compositeCollection9;
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      collectionArray1[7] = (Collection<Integer>) linkedList2;
      CompositeCollection<Integer> compositeCollection10 = new CompositeCollection<Integer>(collectionArray1);
      CompositeCollection<Integer> compositeCollection11 = new CompositeCollection<Integer>(compositeCollection10);
      // Undeclared exception!
      try { 
        compositeCollection11.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>();
      compositeCollection0.size();
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>();
      // Undeclared exception!
      try { 
        compositeCollection1.add("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>(linkedList0, linkedList0);
      compositeCollection0.toCollection();
      compositeCollection0.getMutator();
      compositeCollection0.setMutator((CompositeCollection.CollectionMutator<Object>) null);
      Collection<LinkedList<Object>>[] collectionArray0 = (Collection<LinkedList<Object>>[]) Array.newInstance(Collection.class, 5);
      CompositeCollection<LinkedList<Object>> compositeCollection1 = new CompositeCollection<LinkedList<Object>>(collectionArray0);
      collectionArray0[0] = (Collection<LinkedList<Object>>) compositeCollection1;
      CompositeCollection<LinkedList<Object>> compositeCollection2 = new CompositeCollection<LinkedList<Object>>();
      collectionArray0[1] = (Collection<LinkedList<Object>>) compositeCollection2;
      CompositeCollection<LinkedList<Object>> compositeCollection3 = new CompositeCollection<LinkedList<Object>>();
      collectionArray0[2] = (Collection<LinkedList<Object>>) compositeCollection3;
      CompositeCollection<LinkedList<Object>> compositeCollection4 = new CompositeCollection<LinkedList<Object>>();
      collectionArray0[3] = (Collection<LinkedList<Object>>) compositeCollection4;
      LinkedList<LinkedList<Object>> linkedList1 = new LinkedList<LinkedList<Object>>();
      collectionArray0[4] = (Collection<LinkedList<Object>>) linkedList1;
      CompositeCollection<LinkedList<Object>> compositeCollection5 = new CompositeCollection<LinkedList<Object>>(collectionArray0);
      // Undeclared exception!
      try { 
        compositeCollection5.toCollection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      compositeCollection0.getMutator();
      compositeCollection0.setMutator((CompositeCollection.CollectionMutator<Object>) null);
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(compositeCollection0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(linkedList0);
      Integer integer0 = new Integer(1336);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        compositeCollection2.addAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Collection<String>[] collectionArray0 = (Collection<String>[]) Array.newInstance(Collection.class, 2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>(linkedList0, linkedList0);
      collectionArray0[0] = (Collection<String>) compositeCollection0;
      CompositeCollection<String> compositeCollection1 = new CompositeCollection<String>(linkedList0, linkedList0);
      linkedList0.add("remove() is not supported on CompositeCollection without a CollectionMutator strategy");
      collectionArray0[1] = (Collection<String>) compositeCollection1;
      CompositeCollection<String> compositeCollection2 = new CompositeCollection<String>(collectionArray0);
      compositeCollection2.iterator();
      boolean boolean0 = compositeCollection1.isEmpty();
      assertFalse(boolean0);
      
      compositeCollection2.addComposited(collectionArray0);
      compositeCollection2.getCollections();
      assertTrue(compositeCollection2.contains("remove() is not supported on CompositeCollection without a CollectionMutator strategy"));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>();
      CompositeCollection<Object> compositeCollection2 = new CompositeCollection<Object>(compositeCollection1);
      compositeCollection2.removeAll(compositeCollection1);
      boolean boolean0 = compositeCollection2.removeAll(compositeCollection1);
      boolean boolean1 = compositeCollection2.retainAll(compositeCollection0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Collection<String>[] collectionArray0 = (Collection<String>[]) Array.newInstance(Collection.class, 3);
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>();
      collectionArray0[0] = (Collection<String>) compositeCollection0;
      CompositeCollection<String> compositeCollection1 = new CompositeCollection<String>(collectionArray0);
      collectionArray0[1] = (Collection<String>) compositeCollection1;
      CompositeCollection<String> compositeCollection2 = new CompositeCollection<String>();
      collectionArray0[2] = (Collection<String>) compositeCollection2;
      CompositeCollection<String> compositeCollection3 = new CompositeCollection<String>(collectionArray0);
      // Undeclared exception!
      try { 
        compositeCollection3.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>((Collection<Object>) null, (Collection<Object>) null);
      // Undeclared exception!
      try { 
        compositeCollection0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>((Collection<Object>) null);
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(compositeCollection0, compositeCollection0);
      CompositeCollection<Object> compositeCollection2 = new CompositeCollection<Object>(compositeCollection1, compositeCollection1);
      compositeCollection2.addComposited((Collection<Object>) compositeCollection1);
      assertFalse(compositeCollection1.equals((Object)compositeCollection0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>((Collection<Object>) null);
      Collection<String>[] collectionArray0 = (Collection<String>[]) Array.newInstance(Collection.class, 9);
      Collection<String>[] collectionArray1 = (Collection<String>[]) Array.newInstance(Collection.class, 9);
      CompositeCollection<String> compositeCollection1 = new CompositeCollection<String>();
      collectionArray1[0] = (Collection<String>) compositeCollection1;
      CompositeCollection<String> compositeCollection2 = new CompositeCollection<String>();
      collectionArray1[1] = (Collection<String>) compositeCollection2;
      CompositeCollection<String> compositeCollection3 = new CompositeCollection<String>(collectionArray0);
      collectionArray1[2] = (Collection<String>) compositeCollection3;
      CompositeCollection<String> compositeCollection4 = new CompositeCollection<String>(collectionArray1[1], collectionArray1[2]);
      collectionArray1[3] = (Collection<String>) compositeCollection4;
      CompositeCollection<String> compositeCollection5 = new CompositeCollection<String>(collectionArray1);
      collectionArray1[4] = (Collection<String>) compositeCollection5;
      CompositeCollection<String> compositeCollection6 = new CompositeCollection<String>(compositeCollection2, collectionArray1[3]);
      collectionArray1[5] = (Collection<String>) compositeCollection6;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      collectionArray1[6] = (Collection<String>) linkedList0;
      CompositeCollection<String> compositeCollection7 = new CompositeCollection<String>(compositeCollection3, compositeCollection3);
      collectionArray1[7] = (Collection<String>) compositeCollection7;
      CompositeCollection<String> compositeCollection8 = new CompositeCollection<String>(collectionArray1);
      collectionArray1[8] = (Collection<String>) compositeCollection8;
      CompositeCollection<String> compositeCollection9 = new CompositeCollection<String>(collectionArray1);
      collectionArray0[0] = (Collection<String>) compositeCollection9;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      collectionArray0[1] = (Collection<String>) linkedList1;
      LinkedList<String> linkedList2 = new LinkedList<String>();
      collectionArray0[2] = (Collection<String>) linkedList2;
      CompositeCollection<String> compositeCollection10 = new CompositeCollection<String>(collectionArray1[6], collectionArray0[0]);
      CompositeCollection<String> compositeCollection11 = new CompositeCollection<String>(compositeCollection5, compositeCollection10);
      collectionArray0[3] = (Collection<String>) compositeCollection11;
      CompositeCollection<String> compositeCollection12 = new CompositeCollection<String>(collectionArray1);
      collectionArray0[4] = (Collection<String>) compositeCollection12;
      CompositeCollection<String> compositeCollection13 = new CompositeCollection<String>(compositeCollection6, (Collection<String>) null);
      CompositeCollection<String> compositeCollection14 = new CompositeCollection<String>(compositeCollection13);
      collectionArray0[5] = (Collection<String>) compositeCollection14;
      CompositeCollection<String> compositeCollection15 = new CompositeCollection<String>();
      collectionArray0[6] = (Collection<String>) compositeCollection15;
      CompositeCollection<String> compositeCollection16 = new CompositeCollection<String>(collectionArray1[1], collectionArray1[8]);
      collectionArray0[7] = (Collection<String>) compositeCollection16;
      CompositeCollection<String> compositeCollection17 = new CompositeCollection<String>(linkedList0);
      collectionArray0[8] = (Collection<String>) compositeCollection17;
      CompositeCollection<String> compositeCollection18 = new CompositeCollection<String>(collectionArray0);
      // Undeclared exception!
      try { 
        compositeCollection0.containsAll(compositeCollection18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0, linkedList0);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(linkedList0);
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection1);
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(compositeCollection2, compositeCollection1);
      compositeCollection3.getCollections();
      compositeCollection3.size();
      Collection<Integer> collection0 = compositeCollection3.toCollection();
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(collection0, collection0);
      compositeCollection4.iterator();
      CompositeCollection<Object> compositeCollection5 = new CompositeCollection<Object>();
      CompositeCollection<Object> compositeCollection6 = new CompositeCollection<Object>(compositeCollection5, compositeCollection5);
      CompositeCollection<Object> compositeCollection7 = new CompositeCollection<Object>(compositeCollection6, compositeCollection5);
      compositeCollection5.toCollection();
      CompositeCollection<Object> compositeCollection8 = new CompositeCollection<Object>(compositeCollection7, compositeCollection6);
      Collection<Object>[] collectionArray0 = (Collection<Object>[]) Array.newInstance(Collection.class, 7);
      collectionArray0[0] = (Collection<Object>) compositeCollection8;
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      collectionArray0[1] = (Collection<Object>) linkedList1;
      collectionArray0[2] = (Collection<Object>) compositeCollection6;
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      CompositeCollection<Object> compositeCollection9 = new CompositeCollection<Object>(collectionArray0[1], linkedList2);
      collectionArray0[3] = (Collection<Object>) compositeCollection9;
      collectionArray0[4] = (Collection<Object>) compositeCollection7;
      CompositeCollection<Object> compositeCollection10 = new CompositeCollection<Object>(linkedList1);
      compositeCollection10.clear();
      collectionArray0[5] = (Collection<Object>) compositeCollection10;
      collectionArray0[6] = (Collection<Object>) compositeCollection7;
      compositeCollection8.addComposited(collectionArray0);
      // Undeclared exception!
      try { 
        compositeCollection8.addComposited((Collection<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      Object object1 = new Object();
      linkedList0.add(object1);
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>(linkedList0);
      compositeCollection0.retainAll(linkedList0);
      compositeCollection0.iterator();
      CompositeCollection<LinkedList<String>> compositeCollection1 = new CompositeCollection<LinkedList<String>>((Collection<LinkedList<String>>) null);
      compositeCollection1.getMutator();
      compositeCollection0.toArray();
      linkedList0.parallelStream();
      compositeCollection0.iterator();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) null);
      compositeCollection0.removeComposited(linkedList1);
      Collection<String>[] collectionArray0 = (Collection<String>[]) Array.newInstance(Collection.class, 6);
      CompositeCollection<String> compositeCollection2 = new CompositeCollection<String>();
      collectionArray0[0] = (Collection<String>) compositeCollection2;
      CompositeCollection<String> compositeCollection3 = new CompositeCollection<String>();
      collectionArray0[1] = (Collection<String>) compositeCollection3;
      CompositeCollection<String> compositeCollection4 = new CompositeCollection<String>(collectionArray0);
      collectionArray0[2] = (Collection<String>) compositeCollection4;
      LinkedList<String> linkedList2 = new LinkedList<String>();
      collectionArray0[3] = (Collection<String>) linkedList2;
      CompositeCollection<String> compositeCollection5 = new CompositeCollection<String>(collectionArray0);
      collectionArray0[4] = (Collection<String>) compositeCollection5;
      LinkedList<String> linkedList3 = new LinkedList<String>();
      collectionArray0[5] = (Collection<String>) linkedList3;
      CompositeCollection<String> compositeCollection6 = new CompositeCollection<String>(collectionArray0);
      CompositeCollection<String> compositeCollection7 = new CompositeCollection<String>(compositeCollection6);
      // Undeclared exception!
      try { 
        compositeCollection0.containsAll(compositeCollection7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompositeCollection<LinkedList<String>> compositeCollection0 = new CompositeCollection<LinkedList<String>>();
      boolean boolean0 = compositeCollection0.isEmpty();
      CompositeCollection<String> compositeCollection1 = new CompositeCollection<String>();
      CompositeCollection<String> compositeCollection2 = new CompositeCollection<String>(compositeCollection1);
      boolean boolean1 = compositeCollection2.containsAll(compositeCollection1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>();
      compositeCollection0.toCollection();
      compositeCollection0.getMutator();
      CompositeCollection<LinkedList<String>> compositeCollection1 = null;
      try {
        compositeCollection1 = new CompositeCollection<LinkedList<String>>((Collection<LinkedList<String>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Collection<Object>[] collectionArray0 = (Collection<Object>[]) Array.newInstance(Collection.class, 2);
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(compositeCollection0, compositeCollection0);
      CompositeCollection<Object> compositeCollection2 = new CompositeCollection<Object>(compositeCollection1);
      CompositeCollection<Object> compositeCollection3 = new CompositeCollection<Object>(compositeCollection2, compositeCollection2);
      collectionArray0[0] = (Collection<Object>) compositeCollection3;
      CompositeCollection<Object> compositeCollection4 = new CompositeCollection<Object>(compositeCollection1);
      collectionArray0[1] = (Collection<Object>) compositeCollection4;
      CompositeCollection<Object> compositeCollection5 = new CompositeCollection<Object>(collectionArray0);
      boolean boolean0 = compositeCollection5.contains(compositeCollection3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Collection<Object>[] collectionArray0 = (Collection<Object>[]) Array.newInstance(Collection.class, 2);
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>(collectionArray0);
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(compositeCollection0);
      compositeCollection0.spliterator();
      collectionArray0[0] = (Collection<Object>) compositeCollection1;
      // Undeclared exception!
      try { 
        compositeCollection0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Collection<String>[] collectionArray0 = (Collection<String>[]) Array.newInstance(Collection.class, 8);
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>();
      CompositeCollection<String> compositeCollection1 = new CompositeCollection<String>(compositeCollection0);
      collectionArray0[0] = (Collection<String>) compositeCollection1;
      CompositeCollection<String> compositeCollection2 = new CompositeCollection<String>(compositeCollection0, collectionArray0[0]);
      collectionArray0[1] = (Collection<String>) compositeCollection2;
      CompositeCollection<String> compositeCollection3 = new CompositeCollection<String>(collectionArray0);
      collectionArray0[2] = (Collection<String>) compositeCollection3;
      CompositeCollection<String> compositeCollection4 = new CompositeCollection<String>(collectionArray0);
      collectionArray0[3] = (Collection<String>) compositeCollection4;
      CompositeCollection<String> compositeCollection5 = new CompositeCollection<String>((Collection<String>) null);
      collectionArray0[4] = (Collection<String>) compositeCollection5;
      CompositeCollection<String> compositeCollection6 = new CompositeCollection<String>(collectionArray0[3], compositeCollection5);
      collectionArray0[5] = (Collection<String>) compositeCollection6;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      collectionArray0[6] = (Collection<String>) linkedList0;
      CompositeCollection<String> compositeCollection7 = new CompositeCollection<String>(collectionArray0[2]);
      collectionArray0[7] = (Collection<String>) compositeCollection7;
      CompositeCollection<String> compositeCollection8 = new CompositeCollection<String>(collectionArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        compositeCollection8.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompositeCollection<LinkedList<Object>> compositeCollection0 = new CompositeCollection<LinkedList<Object>>();
      compositeCollection0.getCollections();
      compositeCollection0.toArray();
      CompositeCollection<LinkedList<Object>> compositeCollection1 = new CompositeCollection<LinkedList<Object>>();
      // Undeclared exception!
      try { 
        compositeCollection0.addAll(compositeCollection1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 0);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(collectionArray0);
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      CompositeCollection<LinkedList<Object>> compositeCollection1 = new CompositeCollection<LinkedList<Object>>(linkedList0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        compositeCollection1.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>(linkedList1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "r7H2h[k]3BVmd`Hk1H";
      stringArray0[2] = "addAll() is not supported on CompositeCollection without a CollectionMutator strategy";
      stringArray0[3] = "org.apache.commons.collections4.iterators.AbstractEmptyIterator";
      String[] stringArray1 = compositeCollection0.toArray(stringArray0);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>();
      CompositeCollection<String> compositeCollection1 = new CompositeCollection<String>(compositeCollection0);
      compositeCollection1.contains((Object) null);
      Collection<Object>[] collectionArray0 = (Collection<Object>[]) Array.newInstance(Collection.class, 0);
      CompositeCollection<Object> compositeCollection2 = new CompositeCollection<Object>(collectionArray0);
      CompositeCollection<Object> compositeCollection3 = new CompositeCollection<Object>(compositeCollection2);
      // Undeclared exception!
      try { 
        compositeCollection3.toArray((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(compositeCollection0);
      CompositeCollection<Object> compositeCollection2 = new CompositeCollection<Object>(compositeCollection1);
      CompositeCollection<Object> compositeCollection3 = new CompositeCollection<Object>(compositeCollection1, compositeCollection2);
      int int0 = compositeCollection3.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>(linkedList0);
      CompositeCollection.CollectionMutator<String> compositeCollection_CollectionMutator0 = compositeCollection0.getMutator();
      assertNull(compositeCollection_CollectionMutator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Collection<Object>[] collectionArray0 = (Collection<Object>[]) Array.newInstance(Collection.class, 0);
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>(collectionArray0);
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(collectionArray0);
      compositeCollection0.addComposited((Collection<Object>) compositeCollection1, (Collection<Object>) compositeCollection1);
      assertFalse(compositeCollection0.equals((Object)compositeCollection1));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>(linkedList0, linkedList0);
      compositeCollection0.retainAll(linkedList0);
      LinkedList<CompositeCollection<Object>> linkedList1 = new LinkedList<CompositeCollection<Object>>();
      CompositeCollection<CompositeCollection<Object>> compositeCollection1 = new CompositeCollection<CompositeCollection<Object>>(linkedList1, linkedList1);
      List<Collection<CompositeCollection<Object>>> list0 = compositeCollection1.getCollections();
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 0);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      // Undeclared exception!
      try { 
        compositeCollection0.addAll((Collection<? extends Integer>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Object object0 = new Object();
      boolean boolean0 = compositeCollection0.contains(object0);
      assertFalse(boolean0);
      
      Object[] objectArray0 = compositeCollection0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompositeCollection<LinkedList<String>> compositeCollection0 = new CompositeCollection<LinkedList<String>>((Collection<LinkedList<String>>) null, (Collection<LinkedList<String>>) null);
      // Undeclared exception!
      try { 
        compositeCollection0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>();
      CompositeCollection<String> compositeCollection1 = new CompositeCollection<String>(compositeCollection0);
      CompositeCollection<String> compositeCollection2 = new CompositeCollection<String>(compositeCollection1, compositeCollection0);
      compositeCollection1.clear();
      // Undeclared exception!
      try { 
        compositeCollection2.add((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<CompositeCollection<Integer>> linkedList0 = new LinkedList<CompositeCollection<Integer>>();
      CompositeCollection<CompositeCollection<Integer>> compositeCollection0 = new CompositeCollection<CompositeCollection<Integer>>(linkedList0);
      LinkedList<CompositeCollection<Integer>> linkedList1 = new LinkedList<CompositeCollection<Integer>>();
      compositeCollection0.iterator();
      CompositeCollection<CompositeCollection<Integer>> compositeCollection1 = new CompositeCollection<CompositeCollection<Integer>>(compositeCollection0, linkedList1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(linkedList2, linkedList2);
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(compositeCollection2, compositeCollection2);
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(compositeCollection3);
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>(compositeCollection3, compositeCollection4);
      Object object0 = new Object();
      compositeCollection4.contains(object0);
      CompositeCollection<Integer> compositeCollection6 = new CompositeCollection<Integer>(compositeCollection5);
      compositeCollection6.removeAll(linkedList2);
      // Undeclared exception!
      try { 
        compositeCollection1.add(compositeCollection6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Collection<String>[] collectionArray0 = (Collection<String>[]) Array.newInstance(Collection.class, 3);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      collectionArray0[1] = (Collection<String>) linkedList0;
      LinkedList<Object>[] linkedListArray0 = (LinkedList<Object>[]) Array.newInstance(LinkedList.class, 2);
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>(collectionArray0);
      // Undeclared exception!
      try { 
        compositeCollection0.addAll(collectionArray0[2]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompositeCollection<String> compositeCollection0 = new CompositeCollection<String>();
      CompositeCollection<String> compositeCollection1 = new CompositeCollection<String>(compositeCollection0, compositeCollection0);
      compositeCollection0.getCollections();
      CompositeCollection<String> compositeCollection2 = new CompositeCollection<String>(compositeCollection1);
      compositeCollection0.stream();
      compositeCollection1.removeComposited(compositeCollection0);
      compositeCollection2.clear();
      compositeCollection1.getCollections();
      compositeCollection0.toArray();
      compositeCollection2.getMutator();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 7);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      collectionArray0[0] = (Collection<Integer>) linkedList0;
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(collectionArray0[0], collectionArray0[0]);
      collectionArray0[1] = (Collection<Integer>) compositeCollection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(compositeCollection1, linkedList0);
      collectionArray0[2] = (Collection<Integer>) compositeCollection2;
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(compositeCollection1);
      Collection<Integer> collection0 = compositeCollection3.toCollection();
      collectionArray0[3] = collection0;
      compositeCollection3.size();
      Collection<Integer> collection1 = compositeCollection0.toCollection();
      collectionArray0[4] = collection1;
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Collection<Object>[] collectionArray0 = (Collection<Object>[]) Array.newInstance(Collection.class, 7);
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>(collectionArray0[0]);
      collectionArray0[5] = (Collection<Object>) compositeCollection0;
      // Undeclared exception!
      try { 
        compositeCollection0.addAll(collectionArray0[5]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 3);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      collectionArray0[0] = (Collection<Integer>) linkedList0;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      collectionArray0[1] = (Collection<Integer>) linkedList1;
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0[1], linkedList1);
      collectionArray0[2] = (Collection<Integer>) compositeCollection1;
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(collectionArray0);
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(compositeCollection2, collectionArray0[0]);
      Collection<Integer> collection0 = compositeCollection3.toCollection();
      compositeCollection2.size();
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      compositeCollection2.addComposited(collectionArray0[1], collectionArray0[1]);
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(collection0);
      Object object0 = new Object();
      Integer integer1 = new Integer(1931);
      linkedList0.iterator();
      linkedList0.add(integer1);
      Collection<Integer> collection1 = compositeCollection1.toCollection();
      compositeCollection2.containsAll(compositeCollection3);
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>(collection1, compositeCollection3);
      compositeCollection3.removeAll(linkedList0);
      assertFalse(linkedList0.contains(1931));
      
      Object[] objectArray0 = compositeCollection0.toArray();
      LinkedList<CompositeCollection<Integer>> linkedList2 = new LinkedList<CompositeCollection<Integer>>();
      CompositeCollection<CompositeCollection<Integer>> compositeCollection6 = new CompositeCollection<CompositeCollection<Integer>>(linkedList2);
      compositeCollection6.toArray();
      CompositeCollection<String> compositeCollection7 = new CompositeCollection<String>();
      Object[] objectArray1 = compositeCollection7.toArray(objectArray0);
      assertSame(objectArray0, objectArray1);
  }
}
