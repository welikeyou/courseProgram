/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:26:08 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.map.DefaultedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultedMap_ESTest extends DefaultedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      int int0 = 1108;
      Integer integer0 = new Integer(1108);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) hashMap0, (Equator<Object>) null);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      hashMap0.put(integer0, nullIsFalsePredicate0);
      ConstantTransformer<Object, HashMap<Integer, Object>> constantTransformer0 = new ConstantTransformer<Object, HashMap<Integer, Object>>(hashMap0);
      Transformer<Boolean, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      DefaultedMap<Boolean, Transformer<Object, HashMap<Integer, Object>>> defaultedMap0 = new DefaultedMap<Boolean, Transformer<Object, HashMap<Integer, Object>>>((Transformer<Object, HashMap<Integer, Object>>) constantTransformer0);
      DefaultedMap<Predicate<Object>, Object> defaultedMap1 = new DefaultedMap<Predicate<Object>, Object>((Object) null);
      Integer integer1 = new Integer((-2649));
      ConstantTransformer.constantTransformer(integer1);
      DefaultedMap<Predicate<Object>, Object> defaultedMap2 = DefaultedMap.defaultedMap((Map<Predicate<Object>, Object>) defaultedMap1, (Object) predicate0);
      defaultedMap1.map = (Map<Predicate<Object>, Object>) defaultedMap2;
      // Undeclared exception!
      try { 
        defaultedMap1.get(transformer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Boolean> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Boolean>>) linkedList0);
      DefaultedMap<Integer, Object> defaultedMap0 = DefaultedMap.defaultedMap((Map<Integer, Object>) hashMap0, (Object) predicate0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-228));
      defaultedMap0.remove((Object) integer0);
      defaultedMap0.forEach(biConsumer0);
      Integer integer1 = new Integer(0);
      hashMap0.put(integer1, defaultedMap0);
   //   DefaultedMap.defaultedMap((Map<Integer, HashMap<Predicate, String>>) hashMap0, (HashMap<Predicate, String>) hashMap0);
   //   DefaultedMap.defaultedMap((Map<Integer, HashMap<HashMap<Integer, Object>, Transformer>>) hashMap0, (HashMap<HashMap<Integer, Object>, Transformer>) hashMap0);
      HashMap<String, Transformer<Object, HashMap<Integer, Object>>> hashMap1 = new HashMap<String, Transformer<Object, HashMap<Integer, Object>>>();
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<String, Transformer<Object, HashMap<Integer, Object>>>) hashMap1, (Transformer<? super String, ? extends Transformer<Object, HashMap<Integer, Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "OAl9YS]l?~";
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("OAl9YS]l?~");
      DefaultedMap<Integer, Object> defaultedMap0 = new DefaultedMap<Integer, Object>((Transformer<? super Integer, ?>) constantTransformer0);
      Transformer<Integer, HashMap<Integer, Object>> transformer0 = InvokerTransformer.invokerTransformer("OAl9YS]l?~");
      DefaultedMap<Integer, Object> defaultedMap1 = new DefaultedMap<Integer, Object>(defaultedMap0, transformer0);
      DefaultedMap<Integer, Object> defaultedMap2 = new DefaultedMap<Integer, Object>(defaultedMap1, constantTransformer0);
      defaultedMap2.get("OAl9YS]l?~");
      //DefaultedMap.defaultedMap((Map<HashMap<Transformer, Integer>, String>) defaultedMap2, (Transformer<? super HashMap<Transformer, Integer>, ? extends String>) constantTransformer0);
      DefaultedMap<String, Object> defaultedMap3 = new DefaultedMap<String, Object>((Transformer<? super String, ?>) constantTransformer0);
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Transformer<Object, HashMap<Integer, Object>>, String>) null, (Transformer<? super Transformer<Object, HashMap<Integer, Object>>, ? extends String>) constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultedMap<Transformer<Object, HashMap<Integer, Object>>, Object> defaultedMap0 = null;
      try {
        defaultedMap0 = new DefaultedMap<Transformer<Object, HashMap<Integer, Object>>, Object>((Transformer<? super Transformer<Object, HashMap<Integer, Object>>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DefaultedMap<Integer, Integer> defaultedMap0 = new DefaultedMap<Integer, Integer>(integer0);
      Factory<Integer> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Transformer<Integer, Object>, Integer>) null, (Factory<? extends Integer>) factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultedMap<Integer, String> defaultedMap0 = new DefaultedMap<Integer, String>("org.apache.commons.collections4.map.DefaultedMap");
      DefaultedMap<Integer, String> defaultedMap1 = DefaultedMap.defaultedMap((Map<Integer, String>) defaultedMap0, "L86]u^>/.yu");
      DefaultedMap<Integer, String> defaultedMap2 = null;
      try {
        defaultedMap2 = new DefaultedMap<Integer, String>(defaultedMap1, (Transformer<? super Integer, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(1450);
      Integer integer0 = new Integer(1450);
      hashMap0.put("", integer0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("ExceptionTransformer invoked", classArray0, (Object[]) null);
      InvokerTransformer.invokerTransformer("ExceptionTransformer invoked");
      DefaultedMap<String, Integer> defaultedMap0 = new DefaultedMap<String, Integer>(hashMap0, invokerTransformer0);
      DefaultedMap<Object, Object> defaultedMap1 = new DefaultedMap<Object, Object>(class0);
      Object object0 = defaultedMap1.get("");
      // Undeclared exception!
      try { 
        defaultedMap0.get(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'ExceptionTransformer invoked' on 'class java.lang.Class' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<Object> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<String, Object> transformer0 = FactoryTransformer.factoryTransformer((Factory<?>) factory0);
      DefaultedMap<String, Object> defaultedMap0 = new DefaultedMap<String, Object>(hashMap0, transformer0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Integer, Integer>) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(732);
      DefaultedMap<String, Integer> defaultedMap0 = new DefaultedMap<String, Integer>(integer0);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      Predicate<String> predicate0 = NullPredicate.nullPredicate();
      defaultedMap0.put("", (Integer) null);
      ConstantTransformer.constantTransformer((Object) predicate0);
      DefaultedMap.defaultedMap((Map<String, Integer>) defaultedMap0, (Transformer<? super String, ? extends Integer>) constantTransformer0);
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      PredicateTransformer<Transformer<Transformer<Object, HashMap<Integer, Object>>, String>> predicateTransformer0 = new PredicateTransformer<Transformer<Transformer<Object, HashMap<Integer, Object>>, String>>(predicate1);
      Transformer<Transformer<Object, HashMap<Integer, Object>>, String> transformer0 = null;
      Boolean boolean0 = predicateTransformer0.transform((Transformer<Transformer<Object, HashMap<Integer, Object>>, String>) null);
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<String, Object>) null, (Object) boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Object, Object>(0, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<HashMap<Boolean, Transformer<Object, HashMap<Integer, Object>>>, String> hashMap0 = new HashMap<HashMap<Boolean, Transformer<Object, HashMap<Integer, Object>>>, String>();
      DefaultedMap.defaultedMap((Map<HashMap<Boolean, Transformer<Object, HashMap<Integer, Object>>>, String>) hashMap0, "/f$3cX[ccg");
      Class<String> class0 = String.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      InstantiateFactory<String> instantiateFactory0 = null;
      try {
        instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultedMap<String, Integer> defaultedMap0 = null;
      try {
        defaultedMap0 = new DefaultedMap<String, Integer>((Transformer<? super String, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      DefaultedMap<Transformer<HashMap<Integer, Object>, String>, Object> defaultedMap0 = new DefaultedMap<Transformer<HashMap<Integer, Object>, String>, Object>(transformer0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Integer> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Integer>>) linkedList0);
      DefaultedMap<String, Predicate<Integer>> defaultedMap1 = new DefaultedMap<String, Predicate<Integer>>(predicate0);
      DefaultedMap.defaultedMap((Map<String, Predicate<Integer>>) defaultedMap1, predicate0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      InvokerTransformer<Object, Transformer<Object, HashMap<Integer, Object>>> invokerTransformer0 = new InvokerTransformer<Object, Transformer<Object, HashMap<Integer, Object>>>("+P&Q#YS+uJE-NgqI", classArray0, classArray0);
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Boolean, Transformer<Object, HashMap<Integer, Object>>>) null, (Transformer<? super Boolean, ? extends Transformer<Object, HashMap<Integer, Object>>>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultedMap<Integer, String> defaultedMap0 = new DefaultedMap<Integer, String>("8ox+W3gSj{Tn6Kg>gA");
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      ConstantTransformer<Object, HashMap<Integer, Object>> constantTransformer0 = new ConstantTransformer<Object, HashMap<Integer, Object>>(hashMap0);
      DefaultedMap<Object, Transformer<Object, HashMap<Integer, Object>>> defaultedMap1 = new DefaultedMap<Object, Transformer<Object, HashMap<Integer, Object>>>((Transformer<Object, HashMap<Integer, Object>>) constantTransformer0);
      Transformer<Object, Transformer<Object, HashMap<Integer, Object>>> transformer0 = null;
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Object, Transformer<Object, HashMap<Integer, Object>>>) defaultedMap1, (Transformer<? super Object, ? extends Transformer<Object, HashMap<Integer, Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultedMap<Predicate<Object>, String> defaultedMap0 = new DefaultedMap<Predicate<Object>, String>("1m2");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) defaultedMap0, (Equator<Object>) defaultEquator0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate1, predicate1);
      AndPredicate.andPredicate((Predicate<? super String>) predicate0, (Predicate<? super String>) andPredicate0);
      defaultedMap0.replace((Predicate<Object>) andPredicate0, "", "");
      Integer integer0 = new Integer(512);
      defaultedMap0.get(integer0);
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Integer, Integer>) null, (Factory<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultedMap<Predicate<Object>, HashMap<Object, Object>> defaultedMap0 = new DefaultedMap<Predicate<Object>, HashMap<Object, Object>>((HashMap<Object, Object>) null);
      HashMap<Transformer<Predicate<String>, Transformer<Object, HashMap<Integer, Object>>>, Object> hashMap0 = new HashMap<Transformer<Predicate<String>, Transformer<Object, HashMap<Integer, Object>>>, Object>();
      Transformer<Predicate<String>, Transformer<Object, HashMap<Integer, Object>>> transformer0 = ConstantTransformer.nullTransformer();
      hashMap0.put(transformer0, defaultedMap0);
      Predicate<String> predicate0 = FalsePredicate.falsePredicate();
      DefaultedMap.defaultedMap((Map<Transformer<Predicate<String>, Transformer<Object, HashMap<Integer, Object>>>, Object>) hashMap0, (Object) predicate0);
      HashMap<Predicate<Object>, HashMap<Object, Object>> hashMap1 = new HashMap<Predicate<Object>, HashMap<Object, Object>>();
      Predicate<Object> predicate1 = null;
      hashMap1.put((Predicate<Object>) null, (HashMap<Object, Object>) null);
      defaultedMap0.map = (Map<Predicate<Object>, HashMap<Object, Object>>) hashMap1;
      defaultedMap0.get((Object) null);
      DefaultedMap<String, Object> defaultedMap1 = new DefaultedMap<String, Object>(defaultedMap0.map);
      Transformer<Object, String> transformer1 = null;
      DefaultedMap<String, Object> defaultedMap2 = null;
      try {
        defaultedMap2 = new DefaultedMap<String, Object>(defaultedMap1, (Transformer<? super String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }
}
