/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:11:38 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.apache.commons.collections4.map.CompositeMap;
import org.apache.commons.collections4.map.EmptyMapMutator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompositeMap_ESTest extends CompositeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Map<Object, AbstractMap.SimpleEntry<String, Object>>[] mapArray0 = (Map<Object, AbstractMap.SimpleEntry<String, Object>>[]) Array.newInstance(Map.class, 0);
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap0 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(mapArray0);
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap1 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(compositeMap0, compositeMap0);
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap2 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(compositeMap1, compositeMap1);
      compositeMap1.removeComposited((Map<Object, AbstractMap.SimpleEntry<String, Object>>) null);
      Integer integer0 = new Integer(0);
      compositeMap2.get(integer0);
      CompositeMap<Integer, String> compositeMap3 = new CompositeMap<Integer, String>();
      CompositeMap<Integer, String> compositeMap4 = new CompositeMap<Integer, String>();
      EmptyMapMutator<Integer, String> emptyMapMutator0 = new EmptyMapMutator<Integer, String>();
      CompositeMap<Integer, String> compositeMap5 = new CompositeMap<Integer, String>(compositeMap4, compositeMap4, emptyMapMutator0);
      Integer integer1 = new Integer(0);
      CompositeMap<Integer, String> compositeMap6 = new CompositeMap<Integer, String>(compositeMap5, compositeMap3);
      CompositeMap<Integer, String> compositeMap7 = new CompositeMap<Integer, String>(compositeMap6, compositeMap5);
      compositeMap7.keySet();
      Map<String, Object>[] mapArray1 = (Map<String, Object>[]) Array.newInstance(Map.class, 4);
      CompositeMap<String, Object> compositeMap8 = new CompositeMap<String, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      EmptyMapMutator<String, Object> emptyMapMutator1 = new EmptyMapMutator<String, Object>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      CompositeMap<AbstractMap.SimpleEntry<Object, Object>, Object> compositeMap9 = new CompositeMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      EmptyMapMutator<AbstractMap.SimpleEntry<Object, Object>, Object> emptyMapMutator2 = new EmptyMapMutator<AbstractMap.SimpleEntry<Object, Object>, Object>();
      CompositeMap<AbstractMap.SimpleEntry<Object, Object>, Object> compositeMap10 = new CompositeMap<AbstractMap.SimpleEntry<Object, Object>, Object>(compositeMap9, compositeMap9, emptyMapMutator2);
      compositeMap10.isEmpty();
      compositeMap8.forEach(biConsumer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      Integer integer0 = new Integer(0);
      Map<Object, HashMap<Integer, String>>[] mapArray0 = (Map<Object, HashMap<Integer, String>>[]) Array.newInstance(Map.class, 4);
      CompositeMap<Object, HashMap<Integer, String>> compositeMap0 = new CompositeMap<Object, HashMap<Integer, String>>();
      mapArray0[0] = (Map<Object, HashMap<Integer, String>>) compositeMap0;
      HashMap<Object, HashMap<Integer, String>> hashMap1 = new HashMap<Object, HashMap<Integer, String>>();
      mapArray0[1] = (Map<Object, HashMap<Integer, String>>) hashMap1;
      Map<Object, HashMap<Integer, String>>[] mapArray1 = (Map<Object, HashMap<Integer, String>>[]) Array.newInstance(Map.class, 0);
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      hashMap1.put(mapArray0[1], hashMap2);
      EmptyMapMutator<Object, HashMap<Integer, String>> emptyMapMutator0 = new EmptyMapMutator<Object, HashMap<Integer, String>>();
      CompositeMap<Object, HashMap<Integer, String>> compositeMap1 = new CompositeMap<Object, HashMap<Integer, String>>(mapArray1, emptyMapMutator0);
      mapArray0[2] = (Map<Object, HashMap<Integer, String>>) compositeMap1;
      HashMap<Object, HashMap<Integer, String>> hashMap3 = new HashMap<Object, HashMap<Integer, String>>(0);
      mapArray0[3] = (Map<Object, HashMap<Integer, String>>) hashMap3;
      CompositeMap<Object, HashMap<Integer, String>> compositeMap2 = null;
      try {
        compositeMap2 = new CompositeMap<Object, HashMap<Integer, String>>(mapArray0, emptyMapMutator0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Map<String, Integer>[] mapArray0 = (Map<String, Integer>[]) Array.newInstance(Map.class, 1);
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(mapArray0);
      mapArray0[0] = (Map<String, Integer>) compositeMap0;
      // Undeclared exception!
      try { 
        compositeMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Map<String, Integer>[] mapArray0 = (Map<String, Integer>[]) Array.newInstance(Map.class, 1);
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(mapArray0);
      mapArray0[0] = (Map<String, Integer>) compositeMap0;
      Integer integer0 = new Integer((-32));
      Integer integer1 = new Integer((-32));
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      // Undeclared exception!
      try { 
        compositeMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Map<String, Integer>[] mapArray0 = (Map<String, Integer>[]) Array.newInstance(Map.class, 1);
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(mapArray0);
      mapArray0[0] = (Map<String, Integer>) compositeMap0;
      Integer integer0 = new Integer((-32));
      Integer integer1 = new Integer((-32));
      // Undeclared exception!
      try { 
        compositeMap0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(0);
      String string0 = "";
      Integer integer0 = new Integer(0);
      hashMap0.put("", integer0);
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(hashMap0, hashMap0, emptyMapMutator0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(hashMap0);
      Map<Object, Object>[] mapArray0 = (Map<Object, Object>[]) Array.newInstance(Map.class, 2);
      mapArray0[0] = (Map<Object, Object>) hashMap1;
      // Undeclared exception!
      try { 
        compositeMap0.entrySet();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Map<String, Integer>[] mapArray0 = (Map<String, Integer>[]) Array.newInstance(Map.class, 1);
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(mapArray0);
      // Undeclared exception!
      try { 
        compositeMap0.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Map<AbstractMap.SimpleImmutableEntry<Object, Object>, EmptyMapMutator<Object, String>>[] mapArray0 = (Map<AbstractMap.SimpleImmutableEntry<Object, Object>, EmptyMapMutator<Object, String>>[]) Array.newInstance(Map.class, 1);
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Object, Object>, EmptyMapMutator<Object, String>> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Object, Object>, EmptyMapMutator<Object, String>>();
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, EmptyMapMutator<Object, String>> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, EmptyMapMutator<Object, String>>(mapArray0, emptyMapMutator0);
      mapArray0[0] = (Map<AbstractMap.SimpleImmutableEntry<Object, Object>, EmptyMapMutator<Object, String>>) compositeMap0;
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, EmptyMapMutator<Object, String>> compositeMap1 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, EmptyMapMutator<Object, String>>(mapArray0);
      // Undeclared exception!
      try { 
        compositeMap1.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmptyMapMutator<EmptyMapMutator<String, String>, HashMap<Object, Object>> emptyMapMutator0 = new EmptyMapMutator<EmptyMapMutator<String, String>, HashMap<Object, Object>>();
      LinkedList<EmptyMapMutator<String, String>> linkedList0 = new LinkedList<EmptyMapMutator<String, String>>();
      Map<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>[] mapArray0 = (Map<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>[]) Array.newInstance(Map.class, 0);
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> emptyMapMutator1 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>();
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>(mapArray0, emptyMapMutator1);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("org.apache.commons.collections4.list.UnmodifiableList", "org.apache.commons.collections4.list.UnmodifiableList");
      Integer integer0 = new Integer(26);
      // Undeclared exception!
      try { 
        compositeMap0.put(abstractMap_SimpleImmutableEntry0, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.map.EmptyMapMutator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Map<String, Integer>[] mapArray0 = (Map<String, Integer>[]) Array.newInstance(Map.class, 1);
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(mapArray0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        compositeMap0.addComposited(compositeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Map<HashMap<String, String>, HashMap<Object, Object>>[] mapArray0 = (Map<HashMap<String, String>, HashMap<Object, Object>>[]) Array.newInstance(Map.class, 3);
      HashMap<HashMap<String, String>, HashMap<Object, Object>> hashMap0 = new HashMap<HashMap<String, String>, HashMap<Object, Object>>();
      mapArray0[0] = (Map<HashMap<String, String>, HashMap<Object, Object>>) hashMap0;
      Map<HashMap<String, String>, HashMap<Object, Object>>[] mapArray1 = (Map<HashMap<String, String>, HashMap<Object, Object>>[]) Array.newInstance(Map.class, 6);
      mapArray1[0] = (Map<HashMap<String, String>, HashMap<Object, Object>>) hashMap0;
      mapArray1[1] = (Map<HashMap<String, String>, HashMap<Object, Object>>) hashMap0;
      CompositeMap<HashMap<String, String>, HashMap<Object, Object>> compositeMap0 = new CompositeMap<HashMap<String, String>, HashMap<Object, Object>>(hashMap0, mapArray1[1]);
      mapArray1[2] = (Map<HashMap<String, String>, HashMap<Object, Object>>) compositeMap0;
      mapArray1[3] = (Map<HashMap<String, String>, HashMap<Object, Object>>) hashMap0;
      mapArray1[4] = (Map<HashMap<String, String>, HashMap<Object, Object>>) hashMap0;
      mapArray1[5] = (Map<HashMap<String, String>, HashMap<Object, Object>>) hashMap0;
      CompositeMap<HashMap<String, String>, HashMap<Object, Object>> compositeMap1 = new CompositeMap<HashMap<String, String>, HashMap<Object, Object>>(mapArray1);
      mapArray0[1] = (Map<HashMap<String, String>, HashMap<Object, Object>>) compositeMap1;
      EmptyMapMutator<HashMap<String, String>, HashMap<Object, Object>> emptyMapMutator0 = new EmptyMapMutator<HashMap<String, String>, HashMap<Object, Object>>();
      CompositeMap<HashMap<String, String>, HashMap<Object, Object>> compositeMap2 = new CompositeMap<HashMap<String, String>, HashMap<Object, Object>>(mapArray1[2], mapArray1[4], emptyMapMutator0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      emptyMapMutator0.put(compositeMap2, mapArray1, hashMap1, hashMap2);
      CompositeMap<HashMap<String, String>, HashMap<Object, Object>> compositeMap3 = null;
      try {
        compositeMap3 = new CompositeMap<HashMap<String, String>, HashMap<Object, Object>>(compositeMap2, mapArray1[2], emptyMapMutator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Map<CompositeMap<Object, String>, AbstractMap.SimpleEntry<String, String>>[] mapArray0 = (Map<CompositeMap<Object, String>, AbstractMap.SimpleEntry<String, String>>[]) Array.newInstance(Map.class, 1);
      CompositeMap<CompositeMap<Object, String>, AbstractMap.SimpleEntry<String, String>> compositeMap0 = new CompositeMap<CompositeMap<Object, String>, AbstractMap.SimpleEntry<String, String>>(mapArray0);
      mapArray0[0] = (Map<CompositeMap<Object, String>, AbstractMap.SimpleEntry<String, String>>) compositeMap0;
      CompositeMap<CompositeMap<Object, String>, AbstractMap.SimpleEntry<String, String>> compositeMap1 = new CompositeMap<CompositeMap<Object, String>, AbstractMap.SimpleEntry<String, String>>(mapArray0);
      EmptyMapMutator<CompositeMap<Object, String>, AbstractMap.SimpleEntry<String, String>> emptyMapMutator0 = new EmptyMapMutator<CompositeMap<Object, String>, AbstractMap.SimpleEntry<String, String>>();
      // Undeclared exception!
      try { 
        compositeMap1.removeComposited(compositeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<HashMap<Object, Object>, String> hashMap0 = new HashMap<HashMap<Object, Object>, String>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(hashMap1, "");
      EmptyMapMutator<HashMap<Object, Object>, String> emptyMapMutator0 = new EmptyMapMutator<HashMap<Object, Object>, String>();
      CompositeMap<HashMap<Object, Object>, String> compositeMap0 = new CompositeMap<HashMap<Object, Object>, String>(hashMap0, hashMap0, emptyMapMutator0);
      Map<HashMap<Object, Object>, String>[] mapArray0 = (Map<HashMap<Object, Object>, String>[]) Array.newInstance(Map.class, 6);
      mapArray0[0] = (Map<HashMap<Object, Object>, String>) compositeMap0;
      mapArray0[1] = (Map<HashMap<Object, Object>, String>) compositeMap0;
      mapArray0[0] = (Map<HashMap<Object, Object>, String>) hashMap0;
      mapArray0[3] = (Map<HashMap<Object, Object>, String>) hashMap0;
      mapArray0[4] = (Map<HashMap<Object, Object>, String>) compositeMap0;
      CompositeMap<HashMap<Object, Object>, String> compositeMap1 = new CompositeMap<HashMap<Object, Object>, String>();
      mapArray0[5] = (Map<HashMap<Object, Object>, String>) compositeMap1;
      emptyMapMutator0.putAll(compositeMap0, mapArray0, compositeMap1);
      CompositeMap<HashMap<Object, Object>, String> compositeMap2 = new CompositeMap<HashMap<Object, Object>, String>(hashMap0, hashMap0, emptyMapMutator0);
      compositeMap2.isEmpty();
      EmptyMapMutator<AbstractMap.SimpleEntry<Object, Integer>, String> emptyMapMutator1 = new EmptyMapMutator<AbstractMap.SimpleEntry<Object, Integer>, String>();
      Map<AbstractMap.SimpleEntry<Object, Integer>, String>[] mapArray1 = (Map<AbstractMap.SimpleEntry<Object, Integer>, String>[]) Array.newInstance(Map.class, 2);
      CompositeMap<AbstractMap.SimpleEntry<Object, Integer>, String> compositeMap3 = null;
      try {
        compositeMap3 = new CompositeMap<AbstractMap.SimpleEntry<Object, Integer>, String>(mapArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Map<EmptyMapMutator<String, String>, AbstractMap.SimpleEntry<Object, String>>[] mapArray0 = (Map<EmptyMapMutator<String, String>, AbstractMap.SimpleEntry<Object, String>>[]) Array.newInstance(Map.class, 1);
      CompositeMap<EmptyMapMutator<String, String>, AbstractMap.SimpleEntry<Object, String>> compositeMap0 = new CompositeMap<EmptyMapMutator<String, String>, AbstractMap.SimpleEntry<Object, String>>(mapArray0);
      mapArray0[0] = (Map<EmptyMapMutator<String, String>, AbstractMap.SimpleEntry<Object, String>>) compositeMap0;
      EmptyMapMutator<EmptyMapMutator<String, String>, AbstractMap.SimpleEntry<Object, String>> emptyMapMutator0 = new EmptyMapMutator<EmptyMapMutator<String, String>, AbstractMap.SimpleEntry<Object, String>>();
      CompositeMap<EmptyMapMutator<String, String>, AbstractMap.SimpleEntry<Object, String>> compositeMap1 = new CompositeMap<EmptyMapMutator<String, String>, AbstractMap.SimpleEntry<Object, String>>(mapArray0, emptyMapMutator0);
      Map<Integer, String>[] mapArray1 = (Map<Integer, String>[]) Array.newInstance(Map.class, 8);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      mapArray1[0] = (Map<Integer, String>) hashMap0;
      CompositeMap<Integer, String> compositeMap2 = new CompositeMap<Integer, String>(hashMap0, mapArray1[0]);
      mapArray1[1] = (Map<Integer, String>) compositeMap2;
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      mapArray1[2] = (Map<Integer, String>) hashMap1;
      CompositeMap<Integer, String> compositeMap3 = new CompositeMap<Integer, String>();
      mapArray1[3] = (Map<Integer, String>) compositeMap3;
      CompositeMap<Integer, String> compositeMap4 = new CompositeMap<Integer, String>();
      mapArray1[4] = (Map<Integer, String>) compositeMap4;
      Map<Integer, String>[] mapArray2 = (Map<Integer, String>[]) Array.newInstance(Map.class, 7);
      mapArray2[0] = (Map<Integer, String>) compositeMap4;
      mapArray2[1] = (Map<Integer, String>) hashMap1;
      mapArray2[2] = (Map<Integer, String>) hashMap1;
      mapArray2[3] = (Map<Integer, String>) compositeMap4;
      mapArray2[4] = (Map<Integer, String>) hashMap1;
      mapArray2[5] = (Map<Integer, String>) hashMap0;
      mapArray2[6] = (Map<Integer, String>) compositeMap4;
      CompositeMap<Integer, String> compositeMap5 = new CompositeMap<Integer, String>(mapArray2);
      mapArray1[5] = (Map<Integer, String>) compositeMap5;
      CompositeMap<Integer, String> compositeMap6 = new CompositeMap<Integer, String>();
      mapArray1[6] = (Map<Integer, String>) compositeMap6;
      CompositeMap<Integer, String> compositeMap7 = new CompositeMap<Integer, String>(mapArray2[2], mapArray1[0]);
      mapArray1[7] = (Map<Integer, String>) compositeMap7;
      CompositeMap<Integer, String> compositeMap8 = new CompositeMap<Integer, String>(mapArray1);
      // Undeclared exception!
      try { 
        compositeMap1.remove((Object) compositeMap8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(0);
      String string0 = "";
      Integer integer0 = new Integer(1);
      hashMap0.put("", integer0);
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(hashMap0, hashMap0, emptyMapMutator0);
      // Undeclared exception!
      try { 
        compositeMap0.keySet();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(0);
      Integer integer0 = new Integer(1);
      hashMap0.put("", integer0);
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(hashMap0, hashMap0, emptyMapMutator0);
      compositeMap0.addComposited(hashMap0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      compositeMap0.compute("", biFunction0);
      Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>[] mapArray0 = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>[]) Array.newInstance(Map.class, 1);
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>(mapArray0);
      Map<Integer, CompositeMap<Object, String>>[] mapArray1 = (Map<Integer, CompositeMap<Object, String>>[]) Array.newInstance(Map.class, 2);
      CompositeMap<Integer, CompositeMap<Object, String>> compositeMap2 = new CompositeMap<Integer, CompositeMap<Object, String>>();
      EmptyMapMutator<Integer, CompositeMap<Object, String>> emptyMapMutator1 = new EmptyMapMutator<Integer, CompositeMap<Object, String>>();
      CompositeMap<Integer, CompositeMap<Object, String>> compositeMap3 = new CompositeMap<Integer, CompositeMap<Object, String>>(compositeMap2, compositeMap2, emptyMapMutator1);
      CompositeMap<Integer, CompositeMap<Object, String>> compositeMap4 = new CompositeMap<Integer, CompositeMap<Object, String>>(compositeMap3, compositeMap2);
      mapArray1[0] = (Map<Integer, CompositeMap<Object, String>>) compositeMap4;
      CompositeMap<Integer, CompositeMap<Object, String>> compositeMap5 = null;
      try {
        compositeMap5 = new CompositeMap<Integer, CompositeMap<Object, String>>(mapArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Map<String, Integer>[] mapArray0 = (Map<String, Integer>[]) Array.newInstance(Map.class, 1);
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>();
      compositeMap0.mapIterator();
      CompositeMap<String, Integer> compositeMap1 = new CompositeMap<String, Integer>(mapArray0, emptyMapMutator0);
      Collection<Integer> collection0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        compositeMap1.put("", integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.EmptyMapMutator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Map<String, Integer>[] mapArray0 = (Map<String, Integer>[]) Array.newInstance(Map.class, 1);
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      Map<String, Integer>[] mapArray1 = (Map<String, Integer>[]) Array.newInstance(Map.class, 7);
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>();
      String string0 = "";
      Integer integer0 = new Integer(1203);
      Integer integer1 = null;
      CompositeMap<Integer, AbstractMap.SimpleEntry<Integer, String>> compositeMap1 = new CompositeMap<Integer, AbstractMap.SimpleEntry<Integer, String>>();
      Map<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>[] mapArray2 = (Map<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>[]) Array.newInstance(Map.class, 1);
      EmptyMapMutator<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> emptyMapMutator1 = new EmptyMapMutator<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      CompositeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap2 = new CompositeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>(mapArray2, emptyMapMutator1);
      mapArray2[0] = (Map<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>) compositeMap2;
      CompositeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap3 = new CompositeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>(mapArray2, emptyMapMutator1);
      // Undeclared exception!
      try { 
        compositeMap3.get(mapArray2[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Map<Object, Integer>[] mapArray0 = (Map<Object, Integer>[]) Array.newInstance(Map.class, 2);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      CompositeMap<Object, Integer> compositeMap0 = new CompositeMap<Object, Integer>(hashMap0, hashMap0, (CompositeMap.MapMutator<Object, Integer>) null);
      mapArray0[0] = (Map<Object, Integer>) compositeMap0;
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      mapArray0[1] = (Map<Object, Integer>) hashMap1;
      CompositeMap<Object, Integer> compositeMap1 = new CompositeMap<Object, Integer>(mapArray0);
      CompositeMap<Object, Integer> compositeMap2 = new CompositeMap<Object, Integer>(compositeMap1, hashMap1, (CompositeMap.MapMutator<Object, Integer>) null);
      compositeMap2.values();
      Map<Object, HashMap<String, Object>>[] mapArray1 = (Map<Object, HashMap<String, Object>>[]) Array.newInstance(Map.class, 5);
      CompositeMap<Object, HashMap<String, Object>> compositeMap3 = new CompositeMap<Object, HashMap<String, Object>>();
      mapArray1[0] = (Map<Object, HashMap<String, Object>>) compositeMap3;
      CompositeMap<Object, HashMap<String, Object>> compositeMap4 = new CompositeMap<Object, HashMap<String, Object>>();
      mapArray1[1] = (Map<Object, HashMap<String, Object>>) compositeMap4;
      Map<Object, HashMap<String, Object>>[] mapArray2 = (Map<Object, HashMap<String, Object>>[]) Array.newInstance(Map.class, 0);
      CompositeMap<Object, HashMap<String, Object>> compositeMap5 = new CompositeMap<Object, HashMap<String, Object>>(mapArray2);
      mapArray1[2] = (Map<Object, HashMap<String, Object>>) compositeMap5;
      HashMap<Object, HashMap<String, Object>> hashMap2 = new HashMap<Object, HashMap<String, Object>>();
      mapArray1[3] = (Map<Object, HashMap<String, Object>>) hashMap2;
      HashMap<Object, HashMap<String, Object>> hashMap3 = new HashMap<Object, HashMap<String, Object>>();
      mapArray1[4] = (Map<Object, HashMap<String, Object>>) hashMap3;
      EmptyMapMutator<Object, HashMap<String, Object>> emptyMapMutator0 = new EmptyMapMutator<Object, HashMap<String, Object>>();
      CompositeMap<Object, HashMap<String, Object>> compositeMap6 = new CompositeMap<Object, HashMap<String, Object>>(mapArray1, emptyMapMutator0);
      Collection<HashMap<String, Object>> collection0 = compositeMap6.values();
      assertNotNull(collection0);
      
      Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>[] mapArray3 = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>[]) Array.newInstance(Map.class, 8);
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> compositeMap7 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Object, String>, Object> emptyMapMutator1 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> compositeMap8 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(compositeMap7, compositeMap7, emptyMapMutator1);
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> compositeMap9 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(compositeMap8, compositeMap8);
      mapArray3[0] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>) compositeMap9;
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap4 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      mapArray3[1] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>) hashMap4;
      Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>[] mapArray4 = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>[]) Array.newInstance(Map.class, 5);
      mapArray4[0] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>) compositeMap8;
      mapArray4[1] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>) compositeMap8;
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> compositeMap10 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      mapArray4[2] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>) compositeMap10;
      mapArray4[3] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>) compositeMap8;
      mapArray4[4] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>) compositeMap9;
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> compositeMap11 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(mapArray4);
      mapArray3[2] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>) compositeMap11;
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> compositeMap12 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(mapArray4[3], mapArray4[4]);
      mapArray3[3] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>) compositeMap12;
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> compositeMap13 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(compositeMap12, mapArray4[0]);
      mapArray3[4] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>) compositeMap13;
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> compositeMap14 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(mapArray3[0], hashMap4, emptyMapMutator1);
      mapArray3[5] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>) compositeMap14;
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> compositeMap15 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(mapArray3[0], mapArray4[3], emptyMapMutator1);
      mapArray3[6] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>) compositeMap15;
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> compositeMap16 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(mapArray4[4], mapArray3[0]);
      mapArray3[7] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>) compositeMap16;
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> compositeMap17 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(mapArray3, emptyMapMutator1);
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> compositeMap18 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(compositeMap17, compositeMap16, emptyMapMutator1);
      // Undeclared exception!
      compositeMap18.removeComposited(compositeMap11);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Map<String, Integer>[] mapArray0 = (Map<String, Integer>[]) Array.newInstance(Map.class, 1);
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      Map<String, Integer>[] mapArray1 = (Map<String, Integer>[]) Array.newInstance(Map.class, 7);
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>();
      compositeMap0.mapIterator();
      mapArray1[2] = (Map<String, Integer>) compositeMap0;
      CompositeMap<String, Integer> compositeMap1 = new CompositeMap<String, Integer>(mapArray0, emptyMapMutator0);
      // Undeclared exception!
      try { 
        compositeMap1.values();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      Integer integer0 = new Integer(0);
      Map<Object, HashMap<Integer, String>>[] mapArray0 = (Map<Object, HashMap<Integer, String>>[]) Array.newInstance(Map.class, 4);
      CompositeMap<Object, HashMap<Integer, String>> compositeMap0 = new CompositeMap<Object, HashMap<Integer, String>>();
      mapArray0[0] = (Map<Object, HashMap<Integer, String>>) compositeMap0;
      HashMap<Object, HashMap<Integer, String>> hashMap1 = new HashMap<Object, HashMap<Integer, String>>();
      mapArray0[1] = (Map<Object, HashMap<Integer, String>>) hashMap1;
      Map<Object, HashMap<Integer, String>>[] mapArray1 = (Map<Object, HashMap<Integer, String>>[]) Array.newInstance(Map.class, 0);
      EmptyMapMutator<Object, HashMap<Integer, String>> emptyMapMutator0 = new EmptyMapMutator<Object, HashMap<Integer, String>>();
      CompositeMap<Object, HashMap<Integer, String>> compositeMap1 = new CompositeMap<Object, HashMap<Integer, String>>(mapArray1, emptyMapMutator0);
      mapArray0[2] = (Map<Object, HashMap<Integer, String>>) compositeMap1;
      HashMap<Object, HashMap<Integer, String>> hashMap2 = new HashMap<Object, HashMap<Integer, String>>(0);
      mapArray0[3] = (Map<Object, HashMap<Integer, String>>) hashMap2;
      CompositeMap<Object, HashMap<Integer, String>> compositeMap2 = new CompositeMap<Object, HashMap<Integer, String>>(mapArray0, emptyMapMutator0);
      CompositeMap<Object, HashMap<Integer, String>> compositeMap3 = new CompositeMap<Object, HashMap<Integer, String>>(compositeMap2, compositeMap0);
      CompositeMap<Object, HashMap<Integer, String>> compositeMap4 = new CompositeMap<Object, HashMap<Integer, String>>(compositeMap3, compositeMap2);
      boolean boolean0 = compositeMap4.containsValue("The collection must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<Object, Object>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<Object, Object>>();
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<Object, Object>> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<Object, Object>>();
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "bF");
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleEntry0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(abstractMap_SimpleImmutableEntry0, hashMap1);
      CompositeMap<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<Object, Object>> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<Object, Object>>(hashMap0, hashMap0, emptyMapMutator0);
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      compositeMap0.remove((Object) hashMap2);
      compositeMap0.removeComposited(hashMap0);
      assertEquals(1, compositeMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap0, hashMap0, emptyMapMutator0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>((Object) null, (Object) null);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      compositeMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      Map<AbstractMap.SimpleEntry<String, String>, String>[] mapArray0 = (Map<AbstractMap.SimpleEntry<String, String>, String>[]) Array.newInstance(Map.class, 9);
      CompositeMap<AbstractMap.SimpleEntry<String, String>, String> compositeMap1 = null;
      try {
        compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<String, String>, String>(mapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap0.put(hashMap1, hashMap1);
      CompositeMap<HashMap<Object, Integer>, Object> compositeMap0 = null;
      try {
        compositeMap0 = new CompositeMap<HashMap<Object, Integer>, Object>(hashMap0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key collision adding Map to CompositeMap
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EmptyMapMutator<Integer, Object> emptyMapMutator0 = new EmptyMapMutator<Integer, Object>();
      Map<Integer, Object>[] mapArray0 = (Map<Integer, Object>[]) Array.newInstance(Map.class, 1);
      CompositeMap<Integer, String> compositeMap0 = new CompositeMap<Integer, String>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(compositeMap0);
      mapArray0[0] = (Map<Integer, Object>) hashMap0;
      Integer integer0 = new Integer((-3965));
      HashMap<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>();
      EmptyMapMutator<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>> emptyMapMutator1 = new EmptyMapMutator<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>();
      CompositeMap<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>();
      Map<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>[] mapArray1 = (Map<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>[]) Array.newInstance(Map.class, 9);
      mapArray1[0] = (Map<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>) hashMap1;
      mapArray1[1] = (Map<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>) compositeMap1;
      mapArray1[2] = (Map<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>) hashMap1;
      mapArray1[3] = (Map<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>) hashMap1;
      mapArray1[4] = (Map<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>) compositeMap1;
      mapArray1[5] = (Map<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>) compositeMap1;
      mapArray1[6] = (Map<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>) compositeMap1;
      mapArray1[7] = (Map<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>) compositeMap1;
      mapArray1[8] = (Map<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>) hashMap1;
      emptyMapMutator1.putAll(compositeMap1, mapArray1, mapArray1[4]);
      CompositeMap<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>> compositeMap2 = new CompositeMap<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>(hashMap1, hashMap1, emptyMapMutator1);
      compositeMap2.get(emptyMapMutator0);
      CompositeMap<Integer, Object> compositeMap3 = new CompositeMap<Integer, Object>();
      Integer integer1 = new Integer((-3965));
      EmptyMapMutator<Object, Object> emptyMapMutator2 = new EmptyMapMutator<Object, Object>();
      emptyMapMutator0.put(compositeMap3, mapArray0, integer1, emptyMapMutator2);
      hashMap0.put(integer0, (Object) null);
      CompositeMap<Integer, Object> compositeMap4 = new CompositeMap<Integer, Object>(mapArray0, emptyMapMutator0);
      emptyMapMutator0.putAll(compositeMap4, mapArray0, compositeMap4);
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap5 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap6 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(compositeMap5, compositeMap5, (CompositeMap.MapMutator<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>) null);
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap7 = null;
      try {
        compositeMap7 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>((Map<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompositeMap<Object, AbstractMap.SimpleEntry<Object, Integer>> compositeMap0 = new CompositeMap<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      compositeMap0.remove((Object) "He8)\":yZ?uWh-z", (Object) "He8)\":yZ?uWh-z");
      CompositeMap<Object, AbstractMap.SimpleEntry<Object, Integer>> compositeMap1 = new CompositeMap<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      compositeMap0.removeComposited(compositeMap1);
      CompositeMap<Integer, HashMap<Object, Object>> compositeMap2 = new CompositeMap<Integer, HashMap<Object, Object>>();
      EmptyMapMutator<Integer, HashMap<Object, Object>> emptyMapMutator0 = new EmptyMapMutator<Integer, HashMap<Object, Object>>();
      CompositeMap<Integer, HashMap<Object, Object>> compositeMap3 = new CompositeMap<Integer, HashMap<Object, Object>>(compositeMap2, compositeMap2, emptyMapMutator0);
      compositeMap3.entrySet();
      Map<Integer, HashMap<String, Object>>[] mapArray0 = (Map<Integer, HashMap<String, Object>>[]) Array.newInstance(Map.class, 1);
      HashMap<Integer, HashMap<String, Object>> hashMap0 = new HashMap<Integer, HashMap<String, Object>>();
      mapArray0[0] = (Map<Integer, HashMap<String, Object>>) hashMap0;
      Integer integer0 = new Integer(12);
      hashMap0.put(integer0, (HashMap<String, Object>) null);
      EmptyMapMutator<Integer, HashMap<String, Object>> emptyMapMutator1 = new EmptyMapMutator<Integer, HashMap<String, Object>>();
      CompositeMap<Integer, HashMap<String, Object>> compositeMap4 = new CompositeMap<Integer, HashMap<String, Object>>(mapArray0, emptyMapMutator1);
      compositeMap4.size();
      Map<AbstractMap.SimpleImmutableEntry<Object, String>, HashMap<Object, Object>>[] mapArray1 = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, HashMap<Object, Object>>[]) Array.newInstance(Map.class, 9);
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, HashMap<Object, Object>> compositeMap5 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, HashMap<Object, Object>>();
      mapArray1[0] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, HashMap<Object, Object>>) compositeMap5;
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, HashMap<Object, Object>> compositeMap6 = null;
      try {
        compositeMap6 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, HashMap<Object, Object>>(mapArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>>();
      compositeMap0.hashCode();
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "cOrf)");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry1);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry2 = (AbstractMap.SimpleEntry<Object, String>) mock(AbstractMap.SimpleEntry.class, new ViolatedAssumptionAnswer());
      compositeMap0.replace(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleEntry2, abstractMap_SimpleEntry2);
      compositeMap0.setMutator(emptyMapMutator0);
      compositeMap0.clear();
      CompositeMap<AbstractMap.SimpleEntry<String, Integer>, Integer> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<String, Integer>, Integer>();
      Integer integer0 = new Integer((-953));
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<String, Integer>("", integer0);
      compositeMap1.replace(abstractMap_SimpleEntry3, integer0);
      compositeMap1.containsValue((Object) null);
      CompositeMap<String, String> compositeMap2 = new CompositeMap<String, String>();
      EmptyMapMutator<String, String> emptyMapMutator1 = new EmptyMapMutator<String, String>();
      CompositeMap<String, String> compositeMap3 = new CompositeMap<String, String>(compositeMap2, compositeMap2, emptyMapMutator1);
      // Undeclared exception!
      try { 
        compositeMap3.put("", "cOrf)");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(0);
      Integer integer0 = new Integer(1);
      hashMap0.put("", integer0);
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(hashMap0, hashMap0, emptyMapMutator0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      compositeMap0.compute("", biFunction0);
      Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>[] mapArray0 = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>[]) Array.newInstance(Map.class, 1);
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>(mapArray0);
      Map<Integer, CompositeMap<Object, String>>[] mapArray1 = (Map<Integer, CompositeMap<Object, String>>[]) Array.newInstance(Map.class, 2);
      CompositeMap<Integer, CompositeMap<Object, String>> compositeMap2 = new CompositeMap<Integer, CompositeMap<Object, String>>();
      EmptyMapMutator<Integer, CompositeMap<Object, String>> emptyMapMutator1 = new EmptyMapMutator<Integer, CompositeMap<Object, String>>();
      CompositeMap<Integer, CompositeMap<Object, String>> compositeMap3 = new CompositeMap<Integer, CompositeMap<Object, String>>(compositeMap2, compositeMap2, emptyMapMutator1);
      CompositeMap<Integer, CompositeMap<Object, String>> compositeMap4 = new CompositeMap<Integer, CompositeMap<Object, String>>(compositeMap3, compositeMap2);
      mapArray1[0] = (Map<Integer, CompositeMap<Object, String>>) compositeMap4;
      CompositeMap<Integer, CompositeMap<Object, String>> compositeMap5 = null;
      try {
        compositeMap5 = new CompositeMap<Integer, CompositeMap<Object, String>>(mapArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(0);
      Integer integer0 = new Integer(1);
      hashMap0.put("", integer0);
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(hashMap0, hashMap0, emptyMapMutator0);
      Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>[] mapArray0 = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>[]) Array.newInstance(Map.class, 1);
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>(mapArray0);
      EmptyMapMutator<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>> emptyMapMutator1 = new EmptyMapMutator<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>();
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>> compositeMap2 = null;
      try {
        compositeMap2 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>(compositeMap1, compositeMap1, emptyMapMutator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      EmptyMapMutator<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>> emptyMapMutator0 = new EmptyMapMutator<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>> compositeMap0 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0, hashMap0, emptyMapMutator0);
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>> compositeMap1 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(compositeMap0, hashMap0, emptyMapMutator0);
      Map<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>>[] mapArray0 = (Map<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>>[]) Array.newInstance(Map.class, 1);
      mapArray0[0] = (Map<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) compositeMap1;
      Integer integer0 = new Integer((-766));
      Integer integer1 = new Integer((-766));
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer1);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      emptyMapMutator0.put(compositeMap1, mapArray0, "eA|_\"_$l_g1>]TX^", abstractMap_SimpleImmutableEntry0);
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>> compositeMap2 = null;
      try {
        compositeMap2 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(compositeMap1, hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompositeMap<AbstractMap.SimpleEntry<String, Object>, Integer> compositeMap0 = new CompositeMap<AbstractMap.SimpleEntry<String, Object>, Integer>();
      EmptyMapMutator<AbstractMap.SimpleEntry<String, Object>, Integer> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleEntry<String, Object>, Integer>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("2wh<-jv8", emptyMapMutator0);
      Integer integer0 = new Integer(1481);
      // Undeclared exception!
      try { 
        emptyMapMutator0.put(compositeMap0, (Map<AbstractMap.SimpleEntry<String, Object>, Integer>[]) null, abstractMap_SimpleEntry0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.EmptyMapMutator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>();
      compositeMap0.hashCode();
      compositeMap0.isEmpty();
      HashMap<String, AbstractMap.SimpleEntry<Integer, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Integer, Object>>();
      CompositeMap.MapMutator<String, AbstractMap.SimpleEntry<Integer, Object>> compositeMap_MapMutator0 = null;
      String string0 = "9GXEY";
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, "9GXEY");
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleImmutableEntry0);
      hashMap0.put("9GXEY", abstractMap_SimpleEntry1);
      CompositeMap<String, AbstractMap.SimpleEntry<Integer, Object>> compositeMap1 = null;
      try {
        compositeMap1 = new CompositeMap<String, AbstractMap.SimpleEntry<Integer, Object>>(hashMap0, hashMap0, (CompositeMap.MapMutator<String, AbstractMap.SimpleEntry<Integer, Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key collision adding Map to CompositeMap
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      CompositeMap<HashMap<Object, Integer>, Object> compositeMap0 = new CompositeMap<HashMap<Object, Integer>, Object>(hashMap0, hashMap0);
      boolean boolean0 = compositeMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Map<String, Integer>[] mapArray0 = (Map<String, Integer>[]) Array.newInstance(Map.class, 4);
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>();
      mapArray0[0] = (Map<String, Integer>) compositeMap0;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      mapArray0[1] = (Map<String, Integer>) hashMap0;
      Integer integer0 = new Integer(1799);
      hashMap0.put("org.apache.commons.collections4.map.EmptyMapMutator", integer0);
      CompositeMap<String, Integer> compositeMap1 = new CompositeMap<String, Integer>();
      mapArray0[2] = (Map<String, Integer>) compositeMap1;
      compositeMap1.addComposited(hashMap0);
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      CompositeMap<String, Integer> compositeMap2 = new CompositeMap<String, Integer>(hashMap0, compositeMap0, emptyMapMutator0);
      mapArray0[3] = (Map<String, Integer>) compositeMap2;
      CompositeMap<String, Integer> compositeMap3 = null;
      try {
        compositeMap3 = new CompositeMap<String, Integer>(mapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key collision adding Map to CompositeMap
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EmptyMapMutator<AbstractMap.SimpleEntry<Integer, Object>, String> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleEntry<Integer, Object>, String>();
      Map<AbstractMap.SimpleEntry<String, Object>, Integer>[] mapArray0 = (Map<AbstractMap.SimpleEntry<String, Object>, Integer>[]) Array.newInstance(Map.class, 1);
      CompositeMap<AbstractMap.SimpleEntry<String, Object>, Integer> compositeMap0 = new CompositeMap<AbstractMap.SimpleEntry<String, Object>, Integer>(mapArray0);
      mapArray0[0] = (Map<AbstractMap.SimpleEntry<String, Object>, Integer>) compositeMap0;
      EmptyMapMutator<AbstractMap.SimpleEntry<String, Object>, Integer> emptyMapMutator1 = new EmptyMapMutator<AbstractMap.SimpleEntry<String, Object>, Integer>();
      CompositeMap<AbstractMap.SimpleEntry<String, Object>, Integer> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<String, Object>, Integer>(mapArray0, emptyMapMutator1);
      // Undeclared exception!
      try { 
        compositeMap1.containsValue(emptyMapMutator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>();
      compositeMap0.containsValue((Object) null);
      Map<String, Integer>[] mapArray0 = (Map<String, Integer>[]) Array.newInstance(Map.class, 6);
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      CompositeMap<String, Integer> compositeMap1 = null;
      try {
        compositeMap1 = new CompositeMap<String, Integer>(mapArray0, emptyMapMutator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      CompositeMap<String, AbstractMap.SimpleEntry<Object, Object>> compositeMap0 = new CompositeMap<String, AbstractMap.SimpleEntry<Object, Object>>(hashMap0, hashMap0);
      compositeMap0.equals(hashMap0);
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>();
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> compositeMap1 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>();
      emptyMapMutator0.resolveCollision(compositeMap1, compositeMap1, compositeMap1, (Collection<AbstractMap.SimpleImmutableEntry<String, Integer>>) null);
      Map<String, AbstractMap.SimpleEntry<Object, String>>[] mapArray0 = (Map<String, AbstractMap.SimpleEntry<Object, String>>[]) Array.newInstance(Map.class, 5);
      HashMap<String, AbstractMap.SimpleEntry<Object, String>> hashMap1 = new HashMap<String, AbstractMap.SimpleEntry<Object, String>>();
      mapArray0[0] = (Map<String, AbstractMap.SimpleEntry<Object, String>>) hashMap1;
      EmptyMapMutator<String, AbstractMap.SimpleEntry<Object, String>> emptyMapMutator1 = new EmptyMapMutator<String, AbstractMap.SimpleEntry<Object, String>>();
      CompositeMap<String, AbstractMap.SimpleEntry<Object, String>> compositeMap2 = new CompositeMap<String, AbstractMap.SimpleEntry<Object, String>>(hashMap1, mapArray0[0], emptyMapMutator1);
      mapArray0[1] = (Map<String, AbstractMap.SimpleEntry<Object, String>>) compositeMap2;
      CompositeMap<String, AbstractMap.SimpleEntry<Object, String>> compositeMap3 = null;
      try {
        compositeMap3 = new CompositeMap<String, AbstractMap.SimpleEntry<Object, String>>(mapArray0, emptyMapMutator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EmptyMapMutator<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> emptyMapMutator0 = new EmptyMapMutator<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> compositeMap0 = null;
      try {
        compositeMap0 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>((Map<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>) null, (Map<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>) null, emptyMapMutator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompositeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, HashMap<String, Object>> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, HashMap<String, Object>>();
      Integer integer0 = new Integer(0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      compositeMap0.getOrDefault(integer0, hashMap0);
      compositeMap0.size();
      Map<Integer, String>[] mapArray0 = (Map<Integer, String>[]) Array.newInstance(Map.class, 1);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      mapArray0[0] = (Map<Integer, String>) hashMap1;
      EmptyMapMutator<Integer, String> emptyMapMutator0 = new EmptyMapMutator<Integer, String>();
      CompositeMap<Integer, String> compositeMap1 = new CompositeMap<Integer, String>(mapArray0, emptyMapMutator0);
      emptyMapMutator0.putAll(compositeMap1, mapArray0, mapArray0[0]);
      CompositeMap<Integer, String> compositeMap2 = new CompositeMap<Integer, String>(mapArray0, emptyMapMutator0);
      compositeMap2.putAll(mapArray0[0]);
      CompositeMap<HashMap<Object, Object>, String> compositeMap3 = null;
      try {
        compositeMap3 = new CompositeMap<HashMap<Object, Object>, String>((Map<HashMap<Object, Object>, String>) null, (Map<HashMap<Object, Object>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<String, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<String, Integer>>();
      CompositeMap<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<String, Integer>> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<String, Integer>>(hashMap0, hashMap0, (CompositeMap.MapMutator<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<String, Integer>>) null);
      compositeMap0.remove((Object) null, (Object) hashMap0);
      compositeMap0.addComposited(hashMap0);
      CompositeMap<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<String, Integer>> compositeMap1 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<String, Integer>>(compositeMap0, compositeMap0, (CompositeMap.MapMutator<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<String, Integer>>) null);
      Map<String, AbstractMap.SimpleEntry<String, String>>[] mapArray0 = (Map<String, AbstractMap.SimpleEntry<String, String>>[]) Array.newInstance(Map.class, 0);
      CompositeMap<String, AbstractMap.SimpleEntry<String, String>> compositeMap2 = new CompositeMap<String, AbstractMap.SimpleEntry<String, String>>(mapArray0, (CompositeMap.MapMutator<String, AbstractMap.SimpleEntry<String, String>>) null);
      CompositeMap<String, AbstractMap.SimpleEntry<String, String>> compositeMap3 = new CompositeMap<String, AbstractMap.SimpleEntry<String, String>>(compositeMap2, compositeMap2, (CompositeMap.MapMutator<String, AbstractMap.SimpleEntry<String, String>>) null);
      compositeMap3.values();
      Map<AbstractMap.SimpleEntry<Object, String>, Object>[] mapArray1 = (Map<AbstractMap.SimpleEntry<Object, String>, Object>[]) Array.newInstance(Map.class, 5);
      EmptyMapMutator<AbstractMap.SimpleEntry<Object, String>, Object> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleEntry<Object, String>, Object>();
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, Object> compositeMap4 = null;
      try {
        compositeMap4 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, Object>(mapArray1, emptyMapMutator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Map<Object, AbstractMap.SimpleEntry<String, Object>>[] mapArray0 = (Map<Object, AbstractMap.SimpleEntry<String, Object>>[]) Array.newInstance(Map.class, 0);
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap0 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(mapArray0);
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap1 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(compositeMap0, compositeMap0);
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap2 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(compositeMap1, compositeMap1);
      compositeMap1.removeComposited(compositeMap2);
      Integer integer0 = new Integer(0);
      compositeMap2.get(integer0);
      CompositeMap<Integer, String> compositeMap3 = new CompositeMap<Integer, String>();
      CompositeMap<Integer, String> compositeMap4 = new CompositeMap<Integer, String>(compositeMap3, compositeMap3);
      EmptyMapMutator<Integer, String> emptyMapMutator0 = new EmptyMapMutator<Integer, String>();
      CompositeMap<Integer, String> compositeMap5 = new CompositeMap<Integer, String>(compositeMap4, compositeMap4, emptyMapMutator0);
      CompositeMap<Integer, String> compositeMap6 = new CompositeMap<Integer, String>(compositeMap5, compositeMap3);
      CompositeMap<Integer, String> compositeMap7 = new CompositeMap<Integer, String>(compositeMap6, compositeMap5);
      compositeMap7.keySet();
      Map<String, Object>[] mapArray1 = (Map<String, Object>[]) Array.newInstance(Map.class, 4);
      CompositeMap<String, Object> compositeMap8 = new CompositeMap<String, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      EmptyMapMutator<String, Object> emptyMapMutator1 = new EmptyMapMutator<String, Object>();
      CompositeMap<String, Object> compositeMap9 = new CompositeMap<String, Object>(compositeMap8, hashMap0, emptyMapMutator1);
      CompositeMap<String, Object> compositeMap10 = new CompositeMap<String, Object>(compositeMap9, hashMap0);
      CompositeMap<String, Object> compositeMap11 = new CompositeMap<String, Object>(compositeMap10, compositeMap10);
      CompositeMap<String, Object> compositeMap12 = new CompositeMap<String, Object>(compositeMap11, compositeMap10);
      mapArray1[0] = (Map<String, Object>) compositeMap12;
      EmptyMapMutator<String, Object> emptyMapMutator2 = new EmptyMapMutator<String, Object>();
      CompositeMap<String, Object> compositeMap13 = null;
      try {
        compositeMap13 = new CompositeMap<String, Object>(mapArray1, emptyMapMutator2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EmptyMapMutator<Object, String> emptyMapMutator0 = new EmptyMapMutator<Object, String>();
      Map<Object, Object>[] mapArray0 = (Map<Object, Object>[]) Array.newInstance(Map.class, 0);
      EmptyMapMutator<Object, Object> emptyMapMutator1 = new EmptyMapMutator<Object, Object>();
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>(mapArray0, emptyMapMutator1);
      Set<Object> set0 = compositeMap0.keySet();
      emptyMapMutator0.resolveCollision((CompositeMap<Object, String>) null, (Map<Object, String>) null, (Map<Object, String>) null, set0);
      Map<String, AbstractMap.SimpleEntry<String, Integer>>[] mapArray1 = (Map<String, AbstractMap.SimpleEntry<String, Integer>>[]) Array.newInstance(Map.class, 5);
      HashMap<String, AbstractMap.SimpleEntry<String, Integer>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<String, Integer>>();
      mapArray1[0] = (Map<String, AbstractMap.SimpleEntry<String, Integer>>) hashMap0;
      EmptyMapMutator<String, AbstractMap.SimpleEntry<String, Integer>> emptyMapMutator2 = new EmptyMapMutator<String, AbstractMap.SimpleEntry<String, Integer>>();
      CompositeMap<String, AbstractMap.SimpleEntry<String, Integer>> compositeMap1 = null;
      try {
        compositeMap1 = new CompositeMap<String, AbstractMap.SimpleEntry<String, Integer>>(mapArray1, emptyMapMutator2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Map<Object, String>[] mapArray0 = (Map<Object, String>[]) Array.newInstance(Map.class, 0);
      CompositeMap<Object, String> compositeMap0 = new CompositeMap<Object, String>(mapArray0);
      EmptyMapMutator<Object, String> emptyMapMutator0 = new EmptyMapMutator<Object, String>();
      CompositeMap<Object, String> compositeMap1 = new CompositeMap<Object, String>(mapArray0, emptyMapMutator0);
      compositeMap0.addComposited(compositeMap1);
      CompositeMap<Object, String> compositeMap2 = new CompositeMap<Object, String>(compositeMap0, compositeMap0);
      compositeMap2.size();
      Map<String, AbstractMap.SimpleImmutableEntry<Object, Object>>[] mapArray1 = (Map<String, AbstractMap.SimpleImmutableEntry<Object, Object>>[]) Array.newInstance(Map.class, 4);
      EmptyMapMutator<String, AbstractMap.SimpleImmutableEntry<Object, Object>> emptyMapMutator1 = new EmptyMapMutator<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> compositeMap3 = null;
      try {
        compositeMap3 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>(mapArray1, emptyMapMutator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EmptyMapMutator<Integer, Object> emptyMapMutator0 = new EmptyMapMutator<Integer, Object>();
      Map<Integer, Object>[] mapArray0 = (Map<Integer, Object>[]) Array.newInstance(Map.class, 1);
      CompositeMap<Integer, String> compositeMap0 = new CompositeMap<Integer, String>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(compositeMap0);
      mapArray0[0] = (Map<Integer, Object>) hashMap0;
      Integer integer0 = new Integer((-3965));
      HashMap<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>();
      EmptyMapMutator<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>> emptyMapMutator1 = new EmptyMapMutator<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>();
      CompositeMap<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<Integer, Object>, HashMap<String, String>>(hashMap1, hashMap1, emptyMapMutator1);
      compositeMap1.get(emptyMapMutator0);
      hashMap0.put(integer0, (Object) null);
      CompositeMap<Integer, Object> compositeMap2 = new CompositeMap<Integer, Object>(mapArray0, emptyMapMutator0);
      emptyMapMutator0.putAll(compositeMap2, mapArray0, compositeMap2);
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap3 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap4 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(compositeMap3, compositeMap3, (CompositeMap.MapMutator<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>) null);
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap5 = null;
      try {
        compositeMap5 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>((Map<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompositeMap<String, Object> compositeMap0 = new CompositeMap<String, Object>();
      CompositeMap<String, Object> compositeMap1 = new CompositeMap<String, Object>(compositeMap0, compositeMap0, (CompositeMap.MapMutator<String, Object>) null);
      compositeMap1.equals((Object) null);
      CompositeMap<String, Object> compositeMap2 = new CompositeMap<String, Object>(compositeMap1, compositeMap0);
      compositeMap2.setMutator((CompositeMap.MapMutator<String, Object>) null);
      // Undeclared exception!
      try { 
        compositeMap2.putAll(compositeMap1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Map<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>[] mapArray0 = (Map<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>[]) Array.newInstance(Map.class, 9);
      EmptyMapMutator<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> emptyMapMutator0 = new EmptyMapMutator<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> compositeMap0 = null;
      try {
        compositeMap0 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>(mapArray0, emptyMapMutator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompositeMap<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap0 = new CompositeMap<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      compositeMap0.entrySet();
      EmptyMapMutator<Integer, String> emptyMapMutator0 = new EmptyMapMutator<Integer, String>();
      Map<Integer, String>[] mapArray0 = (Map<Integer, String>[]) Array.newInstance(Map.class, 6);
      CompositeMap<Integer, String> compositeMap1 = new CompositeMap<Integer, String>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>(compositeMap1);
      CompositeMap<Integer, String> compositeMap2 = new CompositeMap<Integer, String>(hashMap0, compositeMap1);
      mapArray0[0] = (Map<Integer, String>) compositeMap2;
      CompositeMap<Integer, String> compositeMap3 = new CompositeMap<Integer, String>(mapArray0[0], compositeMap2);
      mapArray0[1] = (Map<Integer, String>) compositeMap3;
      CompositeMap<Integer, String> compositeMap4 = new CompositeMap<Integer, String>();
      mapArray0[2] = (Map<Integer, String>) compositeMap4;
      CompositeMap<Integer, String> compositeMap5 = new CompositeMap<Integer, String>(hashMap0, compositeMap3, emptyMapMutator0);
      mapArray0[3] = (Map<Integer, String>) compositeMap5;
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      mapArray0[4] = (Map<Integer, String>) hashMap1;
      CompositeMap<Integer, String> compositeMap6 = null;
      try {
        compositeMap6 = new CompositeMap<Integer, String>(mapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>> compositeMap0 = null;
      try {
        compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>>((Map<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>>) null, (Map<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      CompositeMap<Object, AbstractMap.SimpleEntry<Object, Object>> compositeMap0 = new CompositeMap<Object, AbstractMap.SimpleEntry<Object, Object>>(hashMap0, hashMap0);
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = compositeMap0.remove((Object) integer0);
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompositeMap<String, HashMap<String, Object>> compositeMap0 = new CompositeMap<String, HashMap<String, Object>>();
      CompositeMap<String, HashMap<String, Object>> compositeMap1 = new CompositeMap<String, HashMap<String, Object>>(compositeMap0, compositeMap0, (CompositeMap.MapMutator<String, HashMap<String, Object>>) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.replace("", (Object) null);
      compositeMap1.replace("", hashMap0, hashMap0);
      CompositeMap<HashMap<String, Integer>, HashMap<Integer, Object>> compositeMap2 = new CompositeMap<HashMap<String, Integer>, HashMap<Integer, Object>>();
      Set<Map.Entry<HashMap<String, Integer>, HashMap<Integer, Object>>> set0 = (Set<Map.Entry<HashMap<String, Integer>, HashMap<Integer, Object>>>)compositeMap2.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> compositeMap1 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      compositeMap0.removeComposited(compositeMap1);
      boolean boolean0 = compositeMap0.containsKey("");
      assertFalse(boolean0);
      
      CompositeMap<Integer, String> compositeMap2 = new CompositeMap<Integer, String>();
      int int0 = compositeMap2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompositeMap<HashMap<String, String>, Integer> compositeMap0 = new CompositeMap<HashMap<String, String>, Integer>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        compositeMap0.put((HashMap<String, String>) null, integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>();
      compositeMap0.values();
      CompositeMap<Object, Object> compositeMap1 = new CompositeMap<Object, Object>(compositeMap0, compositeMap0);
      compositeMap1.hashCode();
      EmptyMapMutator<Object, HashMap<String, Object>> emptyMapMutator0 = new EmptyMapMutator<Object, HashMap<String, Object>>();
      HashMap<Object, HashMap<String, Object>> hashMap0 = new HashMap<Object, HashMap<String, Object>>();
      Map<Object, CompositeMap<String, Object>>[] mapArray0 = (Map<Object, CompositeMap<String, Object>>[]) Array.newInstance(Map.class, 2);
      CompositeMap.MapMutator<Object, CompositeMap<String, Object>> compositeMap_MapMutator0 = null;
      CompositeMap<Object, CompositeMap<String, Object>> compositeMap2 = null;
      try {
        compositeMap2 = new CompositeMap<Object, CompositeMap<String, Object>>(mapArray0, (CompositeMap.MapMutator<Object, CompositeMap<String, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(hashMap0, hashMap0, (CompositeMap.MapMutator<String, Integer>) null);
      CompositeMap<String, Integer> compositeMap1 = new CompositeMap<String, Integer>(compositeMap0, compositeMap0);
      CompositeMap<String, Integer> compositeMap2 = new CompositeMap<String, Integer>(compositeMap1, compositeMap0, (CompositeMap.MapMutator<String, Integer>) null);
      compositeMap2.clear();
      assertNotSame(compositeMap1, compositeMap2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EmptyMapMutator<HashMap<Object, Integer>, String> emptyMapMutator0 = new EmptyMapMutator<HashMap<Object, Integer>, String>();
      CompositeMap<HashMap<Object, Integer>, String> compositeMap0 = new CompositeMap<HashMap<Object, Integer>, String>();
      LinkedList<HashMap<Object, Integer>> linkedList0 = new LinkedList<HashMap<Object, Integer>>();
      emptyMapMutator0.resolveCollision(compositeMap0, compositeMap0, compositeMap0, linkedList0);
      Map<Integer, String>[] mapArray0 = (Map<Integer, String>[]) Array.newInstance(Map.class, 0);
      CompositeMap<Integer, String> compositeMap1 = new CompositeMap<Integer, String>(mapArray0);
      EmptyMapMutator<Integer, String> emptyMapMutator1 = new EmptyMapMutator<Integer, String>();
      CompositeMap<Integer, String> compositeMap2 = new CompositeMap<Integer, String>(compositeMap1, compositeMap1, emptyMapMutator1);
      boolean boolean0 = compositeMap2.containsKey("|5:@$fsj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<Integer, HashMap<Integer, String>> hashMap0 = new HashMap<Integer, HashMap<Integer, String>>();
      EmptyMapMutator<Integer, HashMap<Integer, String>> emptyMapMutator0 = new EmptyMapMutator<Integer, HashMap<Integer, String>>();
      CompositeMap<Integer, HashMap<Integer, String>> compositeMap0 = new CompositeMap<Integer, HashMap<Integer, String>>(hashMap0, hashMap0, emptyMapMutator0);
      Set<Map.Entry<Integer, HashMap<Integer, String>>> set0 = (Set<Map.Entry<Integer, HashMap<Integer, String>>>)compositeMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompositeMap<HashMap<String, Object>, Object> compositeMap0 = new CompositeMap<HashMap<String, Object>, Object>();
      compositeMap0.clear();
      assertTrue(compositeMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleEntry<Integer, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Integer, Object>>();
      Integer integer0 = new Integer((-4588));
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, (Object) null);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleImmutableEntry0);
      abstractMap_SimpleEntry1.setValue("");
      hashMap0.put("", abstractMap_SimpleEntry1);
      CompositeMap<String, AbstractMap.SimpleEntry<Integer, Object>> compositeMap0 = null;
      try {
        compositeMap0 = new CompositeMap<String, AbstractMap.SimpleEntry<Integer, Object>>(hashMap0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key collision adding Map to CompositeMap
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      Integer integer0 = new Integer(0);
      Map<Object, HashMap<Integer, String>>[] mapArray0 = (Map<Object, HashMap<Integer, String>>[]) Array.newInstance(Map.class, 4);
      CompositeMap<Object, HashMap<Integer, String>> compositeMap0 = new CompositeMap<Object, HashMap<Integer, String>>();
      mapArray0[0] = (Map<Object, HashMap<Integer, String>>) compositeMap0;
      Map<Object, HashMap<Integer, String>>[] mapArray1 = (Map<Object, HashMap<Integer, String>>[]) Array.newInstance(Map.class, 0);
      EmptyMapMutator<Object, HashMap<Integer, String>> emptyMapMutator0 = new EmptyMapMutator<Object, HashMap<Integer, String>>();
      CompositeMap<Object, HashMap<Integer, String>> compositeMap1 = new CompositeMap<Object, HashMap<Integer, String>>(mapArray1, emptyMapMutator0);
      mapArray0[2] = (Map<Object, HashMap<Integer, String>>) compositeMap1;
      HashMap<Object, HashMap<Integer, String>> hashMap1 = new HashMap<Object, HashMap<Integer, String>>(0);
      mapArray0[3] = (Map<Object, HashMap<Integer, String>>) hashMap1;
      CompositeMap<Object, HashMap<Integer, String>> compositeMap2 = new CompositeMap<Object, HashMap<Integer, String>>(compositeMap1, compositeMap0);
      CompositeMap<Object, HashMap<Integer, String>> compositeMap3 = new CompositeMap<Object, HashMap<Integer, String>>(compositeMap2, compositeMap0);
      compositeMap2.clear();
      compositeMap3.containsValue("The collection must not be null");
      Map<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<String, String>>[] mapArray2 = (Map<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<String, String>>[]) Array.newInstance(Map.class, 6);
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<String, String>> compositeMap4 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<String, String>>();
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<String, String>> emptyMapMutator1 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<String, String>>();
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<String, String>> compositeMap5 = null;
      try {
        compositeMap5 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<String, String>>(mapArray2[0], mapArray2[0], emptyMapMutator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      EmptyMapMutator<Object, Object> emptyMapMutator1 = new EmptyMapMutator<Object, Object>();
      Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>[] mapArray0 = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>[]) Array.newInstance(Map.class, 3);
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>> compositeMap0 = null;
      try {
        compositeMap0 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>(mapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(0);
      Integer integer0 = new Integer(0);
      hashMap0.put("", integer0);
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(hashMap0, hashMap0, emptyMapMutator0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(hashMap0);
      Map<Object, Object>[] mapArray0 = (Map<Object, Object>[]) Array.newInstance(Map.class, 2);
      mapArray0[0] = (Map<Object, Object>) hashMap1;
      mapArray0[1] = (Map<Object, Object>) hashMap1;
      EmptyMapMutator<Object, Object> emptyMapMutator1 = new EmptyMapMutator<Object, Object>();
      CompositeMap<Object, Object> compositeMap1 = new CompositeMap<Object, Object>(mapArray0, emptyMapMutator1);
      compositeMap1.isEmpty();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      compositeMap0.compute("", biFunction0);
      Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>[] mapArray1 = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>[]) Array.newInstance(Map.class, 1);
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>> compositeMap2 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>>(mapArray1);
      Map<Integer, CompositeMap<Object, String>>[] mapArray2 = (Map<Integer, CompositeMap<Object, String>>[]) Array.newInstance(Map.class, 2);
      CompositeMap<Integer, CompositeMap<Object, String>> compositeMap3 = new CompositeMap<Integer, CompositeMap<Object, String>>();
      EmptyMapMutator<Integer, CompositeMap<Object, String>> emptyMapMutator2 = new EmptyMapMutator<Integer, CompositeMap<Object, String>>();
      CompositeMap<Integer, CompositeMap<Object, String>> compositeMap4 = new CompositeMap<Integer, CompositeMap<Object, String>>(compositeMap3, compositeMap3, emptyMapMutator2);
      CompositeMap<Integer, CompositeMap<Object, String>> compositeMap5 = new CompositeMap<Integer, CompositeMap<Object, String>>(compositeMap4, compositeMap3);
      mapArray2[0] = (Map<Integer, CompositeMap<Object, String>>) compositeMap5;
      CompositeMap<Integer, CompositeMap<Object, String>> compositeMap6 = null;
      try {
        compositeMap6 = new CompositeMap<Integer, CompositeMap<Object, String>>(mapArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Map<Object, AbstractMap.SimpleEntry<String, Object>>[] mapArray0 = (Map<Object, AbstractMap.SimpleEntry<String, Object>>[]) Array.newInstance(Map.class, 0);
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap0 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(mapArray0);
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap1 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(compositeMap0, compositeMap0);
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap2 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      
      compositeMap1.removeComposited((Map<Object, AbstractMap.SimpleEntry<String, Object>>) null);
      CompositeMap<Integer, String> compositeMap3 = new CompositeMap<Integer, String>();
      CompositeMap<Integer, String> compositeMap4 = new CompositeMap<Integer, String>();
      EmptyMapMutator<Integer, String> emptyMapMutator0 = new EmptyMapMutator<Integer, String>();
      CompositeMap<Integer, String> compositeMap5 = new CompositeMap<Integer, String>();
      Integer integer0 = new Integer(0);
      CompositeMap<Integer, String> compositeMap6 = new CompositeMap<Integer, String>(compositeMap5, compositeMap3);
      CompositeMap<Integer, String> compositeMap7 = new CompositeMap<Integer, String>(compositeMap6, compositeMap5);
      compositeMap7.keySet();
      Map<String, Object>[] mapArray1 = (Map<String, Object>[]) Array.newInstance(Map.class, 4);
      CompositeMap<String, Object> compositeMap8 = new CompositeMap<String, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      CompositeMap<AbstractMap.SimpleEntry<Object, Object>, Object> compositeMap9 = new CompositeMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      EmptyMapMutator<AbstractMap.SimpleEntry<Object, Object>, Object> emptyMapMutator1 = new EmptyMapMutator<AbstractMap.SimpleEntry<Object, Object>, Object>();
      CompositeMap<AbstractMap.SimpleEntry<Object, Object>, Object> compositeMap10 = new CompositeMap<AbstractMap.SimpleEntry<Object, Object>, Object>(compositeMap9, compositeMap9, emptyMapMutator1);
      boolean boolean0 = compositeMap10.isEmpty();
      assertTrue(boolean0);
      
      compositeMap8.forEach(biConsumer0);
      assertTrue(compositeMap8.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Map<Object, AbstractMap.SimpleEntry<String, Object>>[] mapArray0 = (Map<Object, AbstractMap.SimpleEntry<String, Object>>[]) Array.newInstance(Map.class, 0);
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap0 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(mapArray0);
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap1 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(compositeMap0, compositeMap0);
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap2 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(compositeMap1, compositeMap1);
      compositeMap1.removeComposited(compositeMap2);
      compositeMap0.removeComposited(compositeMap2);
      Integer integer0 = new Integer(0);
      compositeMap2.get(integer0);
      CompositeMap<Integer, String> compositeMap3 = new CompositeMap<Integer, String>();
      CompositeMap<Integer, String> compositeMap4 = new CompositeMap<Integer, String>(compositeMap3, compositeMap3);
      compositeMap3.keySet();
      Map<String, Object>[] mapArray1 = (Map<String, Object>[]) Array.newInstance(Map.class, 4);
      CompositeMap<String, Object> compositeMap5 = new CompositeMap<String, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      EmptyMapMutator<String, Object> emptyMapMutator0 = new EmptyMapMutator<String, Object>();
      CompositeMap<String, Object> compositeMap6 = new CompositeMap<String, Object>(compositeMap5, hashMap0, emptyMapMutator0);
      CompositeMap<String, Object> compositeMap7 = new CompositeMap<String, Object>(compositeMap6, hashMap0);
      CompositeMap<String, Object> compositeMap8 = new CompositeMap<String, Object>(compositeMap7, compositeMap7);
      CompositeMap<String, Object> compositeMap9 = new CompositeMap<String, Object>(compositeMap8, compositeMap7);
      mapArray1[0] = (Map<String, Object>) compositeMap8;
      EmptyMapMutator<String, Object> emptyMapMutator1 = new EmptyMapMutator<String, Object>();
      CompositeMap<String, Object> compositeMap10 = null;
      try {
        compositeMap10 = new CompositeMap<String, Object>(mapArray1, emptyMapMutator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Map<String, Integer>[] mapArray0 = (Map<String, Integer>[]) Array.newInstance(Map.class, 1);
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(mapArray0);
      String string0 = "{3*>s_+=b8y";
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      Map<String, Integer>[] mapArray1 = (Map<String, Integer>[]) Array.newInstance(Map.class, 7);
      mapArray1[0] = (Map<String, Integer>) compositeMap0;
      // Undeclared exception!
      try { 
        emptyMapMutator0.putAll(compositeMap0, mapArray1, mapArray1[0]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Map<String, Integer>[] mapArray0 = (Map<String, Integer>[]) Array.newInstance(Map.class, 1);
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(mapArray0);
      mapArray0[0] = (Map<String, Integer>) compositeMap0;
      Integer integer0 = new Integer((-32));
      Integer integer1 = new Integer((-32));
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      Map<String, Integer>[] mapArray1 = (Map<String, Integer>[]) Array.newInstance(Map.class, 7);
      mapArray1[0] = (Map<String, Integer>) compositeMap0;
      // Undeclared exception!
      try { 
        emptyMapMutator0.putAll(compositeMap0, mapArray1, mapArray1[0]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      CompositeMap<Object, AbstractMap.SimpleEntry<Object, Object>> compositeMap0 = new CompositeMap<Object, AbstractMap.SimpleEntry<Object, Object>>(hashMap0, hashMap0);
      Integer integer0 = new Integer(17);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = compositeMap0.remove((Object) integer0);
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CompositeMap<Object, String> compositeMap0 = new CompositeMap<Object, String>();
      EmptyMapMutator<Object, String> emptyMapMutator0 = new EmptyMapMutator<Object, String>();
      compositeMap0.equals(emptyMapMutator0);
      EmptyMapMutator<Object, String> emptyMapMutator1 = new EmptyMapMutator<Object, String>();
      CompositeMap<Object, String> compositeMap1 = new CompositeMap<Object, String>(compositeMap0, compositeMap0, emptyMapMutator1);
      Map<EmptyMapMutator<Integer, Object>, Integer>[] mapArray0 = (Map<EmptyMapMutator<Integer, Object>, Integer>[]) Array.newInstance(Map.class, 7);
      HashMap<EmptyMapMutator<Integer, Object>, Integer> hashMap0 = new HashMap<EmptyMapMutator<Integer, Object>, Integer>(2147483645);
      CompositeMap<EmptyMapMutator<Integer, Object>, Integer> compositeMap2 = null;
      try {
        compositeMap2 = new CompositeMap<EmptyMapMutator<Integer, Object>, Integer>(mapArray0, (CompositeMap.MapMutator<EmptyMapMutator<Integer, Object>, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>>();
      compositeMap0.hashCode();
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = (AbstractMap.SimpleEntry<Object, String>) mock(AbstractMap.SimpleEntry.class, new ViolatedAssumptionAnswer());
      compositeMap0.setMutator(emptyMapMutator0);
      compositeMap0.clear();
      Integer integer0 = new Integer((-953));
      CompositeMap<String, String> compositeMap1 = new CompositeMap<String, String>();
      EmptyMapMutator<String, String> emptyMapMutator1 = new EmptyMapMutator<String, String>();
      // Undeclared exception!
      try { 
        compositeMap1.put("", "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Map<AbstractMap.SimpleEntry<String, Object>, HashMap<String, Object>>[] mapArray0 = (Map<AbstractMap.SimpleEntry<String, Object>, HashMap<String, Object>>[]) Array.newInstance(Map.class, 2);
      CompositeMap<AbstractMap.SimpleEntry<String, Object>, HashMap<String, Object>> compositeMap0 = new CompositeMap<AbstractMap.SimpleEntry<String, Object>, HashMap<String, Object>>();
      EmptyMapMutator<AbstractMap.SimpleEntry<String, Object>, HashMap<String, Object>> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleEntry<String, Object>, HashMap<String, Object>>();
      CompositeMap<AbstractMap.SimpleEntry<String, Object>, HashMap<String, Object>> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<String, Object>, HashMap<String, Object>>(compositeMap0, compositeMap0, emptyMapMutator0);
      mapArray0[0] = (Map<AbstractMap.SimpleEntry<String, Object>, HashMap<String, Object>>) compositeMap1;
      mapArray0[1] = (Map<AbstractMap.SimpleEntry<String, Object>, HashMap<String, Object>>) compositeMap0;
      CompositeMap<AbstractMap.SimpleEntry<String, Object>, HashMap<String, Object>> compositeMap2 = new CompositeMap<AbstractMap.SimpleEntry<String, Object>, HashMap<String, Object>>(mapArray0);
      CompositeMap<AbstractMap.SimpleEntry<String, Object>, HashMap<String, Object>> compositeMap3 = new CompositeMap<AbstractMap.SimpleEntry<String, Object>, HashMap<String, Object>>(compositeMap2, compositeMap2);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      compositeMap3.keySet();
      EmptyMapMutator<Object, Integer> emptyMapMutator1 = new EmptyMapMutator<Object, Integer>();
      EmptyMapMutator<Object, Integer> emptyMapMutator2 = new EmptyMapMutator<Object, Integer>();
      Map<AbstractMap.SimpleEntry<Integer, Object>, String>[] mapArray1 = (Map<AbstractMap.SimpleEntry<Integer, Object>, String>[]) Array.newInstance(Map.class, 2);
      CompositeMap<AbstractMap.SimpleEntry<Integer, Object>, String> compositeMap4 = new CompositeMap<AbstractMap.SimpleEntry<Integer, Object>, String>();
      CompositeMap<AbstractMap.SimpleEntry<Integer, Object>, String> compositeMap5 = new CompositeMap<AbstractMap.SimpleEntry<Integer, Object>, String>(compositeMap4, compositeMap4);
      EmptyMapMutator<Object, Object> emptyMapMutator3 = new EmptyMapMutator<Object, Object>();
      Map<Integer, String>[] mapArray2 = (Map<Integer, String>[]) Array.newInstance(Map.class, 0);
      EmptyMapMutator<Integer, String> emptyMapMutator4 = new EmptyMapMutator<Integer, String>();
      CompositeMap<Integer, String> compositeMap6 = new CompositeMap<Integer, String>(mapArray2, emptyMapMutator4);
      CompositeMap<Integer, String> compositeMap7 = new CompositeMap<Integer, String>(compositeMap6, compositeMap6, emptyMapMutator4);
      compositeMap7.hashCode();
      compositeMap5.getOrDefault(emptyMapMutator3, "Iterator contains no elements");
      mapArray1[1] = (Map<AbstractMap.SimpleEntry<Integer, Object>, String>) compositeMap5;
      compositeMap5.size();
      CompositeMap<Object, Object> compositeMap8 = null;
      try {
        compositeMap8 = new CompositeMap<Object, Object>((Map<Object, Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
