/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:39:10 GMT 2019
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NonePredicate_ESTest extends NonePredicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        NonePredicate.nonePredicate((Predicate<? super AllPredicate<FalsePredicate>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        NonePredicate.nonePredicate((Collection<? extends Predicate<? super Boolean>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 6);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("%/Uvs3C!jBQY", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[0] = predicate0;
      NonePredicate<Integer> nonePredicate0 = new NonePredicate<Integer>(predicateArray0);
      // Undeclared exception!
      try { 
        nonePredicate0.evaluate(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '%/Uvs3C!jBQY' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) anyPredicate0;
      NonePredicate<NonePredicate<String>> nonePredicate0 = new NonePredicate<NonePredicate<String>>(predicateArray0);
      // Undeclared exception!
      nonePredicate0.evaluate((NonePredicate<String>) null);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[0] = predicate0;
      NonePredicate<EqualPredicate<Boolean>> nonePredicate0 = new NonePredicate<EqualPredicate<Boolean>>(predicateArray0);
      PredicateTransformer<FalsePredicate<InstanceofPredicate>> predicateTransformer0 = new PredicateTransformer<FalsePredicate<InstanceofPredicate>>(predicate0);
      FalsePredicate<InstanceofPredicate> falsePredicate0 = (FalsePredicate<InstanceofPredicate>) mock(FalsePredicate.class, new ViolatedAssumptionAnswer());
      Boolean boolean0 = predicateTransformer0.transform(falsePredicate0);
      DefaultEquator<Boolean> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Boolean> equalPredicate0 = new EqualPredicate<Boolean>(boolean0, defaultEquator0);
      boolean boolean1 = nonePredicate0.evaluate(equalPredicate0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      NonePredicate<NonePredicate<String>> nonePredicate0 = new NonePredicate<NonePredicate<String>>(predicateArray0);
      // Undeclared exception!
      try { 
        nonePredicate0.evaluate((NonePredicate<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<EqualPredicate<Integer>> nonePredicate0 = new NonePredicate<EqualPredicate<Integer>>(predicateArray0);
      Integer integer0 = new Integer(0);
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>(integer0);
      boolean boolean0 = nonePredicate0.evaluate(equalPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<NotPredicate<Integer>> predicate0 = NonePredicate.nonePredicate((Predicate<? super NotPredicate<Integer>>[]) predicateArray0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      Predicate<ExceptionPredicate<Object>> predicate1 = NonePredicate.nonePredicate((Predicate<? super ExceptionPredicate<Object>>[]) predicateArray0);
      assertNotNull(predicate1);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      Predicate<AnyPredicate<Integer>> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super AnyPredicate<Integer>>>) linkedList0);
      assertNotNull(predicate0);
  }
}
