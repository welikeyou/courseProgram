/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:05:22 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BoundedIterator_ESTest extends BoundedIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      BoundedIterator<String> boundedIterator0 = new BoundedIterator<String>(iterator0, 2400L, 1L);
      boundedIterator0.next();
      Iterator<Object> iterator1 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, false).when(iterator1).hasNext();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(iterator1).next();
      long long0 = 673L;
      BoundedIterator<Object> boundedIterator1 = new BoundedIterator<Object>(iterator1, 673L, 1055L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boundedIterator1.forEachRemaining(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boundedIterator1.hasNext();
      boundedIterator1.forEachRemaining(consumer1);
      // Undeclared exception!
      try { 
        boundedIterator1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can not be called before calling next()
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, false).when(iterator0).hasNext();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(iterator0).next();
      long long0 = 673L;
      BoundedIterator<Object> boundedIterator0 = new BoundedIterator<Object>(iterator0, 673L, 1055L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boundedIterator0.forEachRemaining(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boundedIterator0.hasNext();
      boundedIterator0.forEachRemaining(consumer1);
      // Undeclared exception!
      try { 
        boundedIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can not be called before calling next()
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(iterator0).hasNext();
      doReturn("remove() can not be called before calling next()", "remove() can not be called before calling next()", (Object) null, (Object) null, (Object) null).when(iterator0).next();
      long long0 = 5921L;
      BoundedIterator<String> boundedIterator0 = new BoundedIterator<String>(iterator0, 5921L, 5921L);
      BoundedIterator<Object> boundedIterator1 = new BoundedIterator<Object>(boundedIterator0, 5921L, 5921L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(3040);
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn(integer0, integer0).when(iterator0).next();
      BoundedIterator<Integer> boundedIterator0 = new BoundedIterator<Integer>(iterator0, 0L, 1393L);
      boundedIterator0.hasNext();
      boundedIterator0.next();
      boundedIterator0.next();
      boundedIterator0.remove();
      boundedIterator0.remove();
      boundedIterator0.hasNext();
      boundedIterator0.remove();
      boundedIterator0.remove();
      boundedIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      BoundedIterator<Object> boundedIterator0 = new BoundedIterator<Object>(iterator0, 0L, 0L);
      boundedIterator0.hasNext();
      // Undeclared exception!
      try { 
        boundedIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      BoundedIterator<Object> boundedIterator0 = new BoundedIterator<Object>(iterator0, 0L, 0L);
      // Undeclared exception!
      try { 
        boundedIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can not be called before calling next()
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      BoundedIterator<String> boundedIterator0 = null;
      try {
        boundedIterator0 = new BoundedIterator<String>(iterator0, 0L, (-1949L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BoundedIterator<String> boundedIterator0 = null;
      try {
        boundedIterator0 = new BoundedIterator<String>((Iterator<? extends String>) null, (-706L), 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(iterator0).hasNext();
      doReturn((Object) null, (Object) null).when(iterator0).next();
      long long0 = 1857L;
      BoundedIterator<Integer> boundedIterator0 = new BoundedIterator<Integer>(iterator0, 1857L, 1857L);
      boundedIterator0.next();
      boundedIterator0.hasNext();
      boundedIterator0.hasNext();
      boundedIterator0.hasNext();
      boundedIterator0.next();
      BoundedIterator<Integer> boundedIterator1 = new BoundedIterator<Integer>(boundedIterator0, 1857L, 1857L);
      Iterator<String> iterator1 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      long long1 = 2280L;
      long long2 = 1L;
      // Undeclared exception!
      try { 
        boundedIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can not be called before calling next()
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      BoundedIterator<Object> boundedIterator0 = null;
      try {
        boundedIterator0 = new BoundedIterator<Object>(iterator0, (-4676L), (-4676L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      BoundedIterator<String> boundedIterator0 = null;
      try {
        boundedIterator0 = new BoundedIterator<String>(iterator0, 0L, (-2026L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BoundedIterator<Object> boundedIterator0 = null;
      try {
        boundedIterator0 = new BoundedIterator<Object>((Iterator<?>) null, 1L, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      BoundedIterator<Integer> boundedIterator0 = new BoundedIterator<Integer>(iterator0, 1325L, 1325L);
      // Undeclared exception!
      try { 
        boundedIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can not be called before calling next()
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BoundedIterator<Object> boundedIterator0 = null;
      try {
        boundedIterator0 = new BoundedIterator<Object>((Iterator<?>) null, 18L, 18L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, false).when(iterator0).hasNext();
      doReturn("", "ru,[$cIqhmx}uPhJ", "", "[mb2e").when(iterator0).next();
      BoundedIterator<Object> boundedIterator0 = new BoundedIterator<Object>(iterator0, 608L, 608L);
      boundedIterator0.hasNext();
      // Undeclared exception!
      try { 
        boundedIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can not be called before calling next()
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false, false).when(iterator0).hasNext();
      doReturn((Object) null, (Object) null, (Object) null).when(iterator0).next();
      long long0 = 1918L;
      BoundedIterator<Integer> boundedIterator0 = new BoundedIterator<Integer>(iterator0, 1918L, 1918L);
      boundedIterator0.hasNext();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boundedIterator0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        boundedIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can not be called before calling next()
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      BoundedIterator<String> boundedIterator0 = null;
      try {
        boundedIterator0 = new BoundedIterator<String>(iterator0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      Iterator<String> iterator1 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      BoundedIterator<String> boundedIterator0 = null;
      try {
        boundedIterator0 = new BoundedIterator<String>(iterator1, (-691L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      BoundedIterator<String> boundedIterator0 = new BoundedIterator<String>(iterator0, 2760L, 2754L);
      boundedIterator0.next();
      Iterator<Object> iterator1 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, false).when(iterator1).hasNext();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(iterator1).next();
      BoundedIterator<Object> boundedIterator1 = new BoundedIterator<Object>(iterator1, 673L, 1055L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boundedIterator1.forEachRemaining(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boundedIterator1.hasNext();
      boundedIterator1.forEachRemaining(consumer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      BoundedIterator<Integer> boundedIterator0 = new BoundedIterator<Integer>(iterator0, 0L, 0L);
      // Undeclared exception!
      try { 
        boundedIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }
}
