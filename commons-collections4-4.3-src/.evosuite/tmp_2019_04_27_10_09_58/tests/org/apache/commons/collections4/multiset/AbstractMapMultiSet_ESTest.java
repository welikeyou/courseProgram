/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:11:49 GMT 2019
 */

package org.apache.commons.collections4.multiset;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.collections4.MultiSet;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.multiset.AbstractMapMultiSet;
import org.apache.commons.collections4.multiset.HashMultiSet;
import org.apache.commons.collections4.multiset.SynchronizedMultiSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractMapMultiSet_ESTest extends AbstractMapMultiSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      Object object0 = new Object();
      hashMultiSet0.add(object0);
      hashMultiSet0.add((Object) "vipL{sAB<Q6Z+f");
      int int0 = hashMultiSet0.remove((Object) "vipL{sAB<Q6Z+f", 891);
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Integer integer0 = new Integer(0);
      hashMultiSet0.add(integer0);
      assertFalse(hashMultiSet0.isEmpty());
      
      boolean boolean0 = hashMultiSet0.removeAll(hashMultiSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      hashMultiSet0.add((AbstractMapMultiSet.MutableInteger) null);
      hashMultiSet0.add((AbstractMapMultiSet.MutableInteger) null);
      hashMultiSet0.add((AbstractMapMultiSet.MutableInteger) null);
      assertFalse(hashMultiSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = hashMultiSet0.toArray(stringArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger(608);
      hashMultiSet0.add(abstractMapMultiSet_MutableInteger0);
      int int0 = hashMultiSet0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMultiSet<AbstractMap.SimpleEntry<Integer, String>> hashMultiSet0 = new HashMultiSet<AbstractMap.SimpleEntry<Integer, String>>();
      Iterator<AbstractMap.SimpleEntry<Integer, String>> iterator0 = hashMultiSet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Integer integer0 = new Integer(0);
      hashMultiSet0.add(integer0);
      hashMultiSet0.getMap();
      assertEquals(1, hashMultiSet0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMultiSet<Boolean> hashMultiSet0 = new HashMultiSet<Boolean>();
      // Undeclared exception!
      try { 
        hashMultiSet0.toArray((Locale[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(hashMultiSet0);
      Object object0 = new Object();
      hashMultiSet1.add(object0);
      HashMultiSet<Object>[] hashMultiSetArray0 = (HashMultiSet<Object>[]) Array.newInstance(HashMultiSet.class, 9);
      // Undeclared exception!
      try { 
        hashMultiSet1.toArray(hashMultiSetArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      // Undeclared exception!
      try { 
        hashMultiSet0.doWriteObject((ObjectOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMultiSet<Predicate<Integer>> hashMultiSet0 = new HashMultiSet<Predicate<Integer>>();
      // Undeclared exception!
      try { 
        hashMultiSet0.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Integer integer0 = new Integer(512);
      hashMultiSet0.add(integer0);
      hashMultiSet0.hashCode();
      assertFalse(hashMultiSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>();
      boolean boolean0 = hashMultiSet0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMultiSet<AbstractMap.SimpleEntry<Integer, String>> hashMultiSet0 = new HashMultiSet<AbstractMap.SimpleEntry<Integer, String>>();
      Integer integer0 = new Integer(857);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "");
      int int0 = hashMultiSet0.add(abstractMap_SimpleEntry0, 2189);
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      int int0 = hashMultiSet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      hashMultiSet0.add((Object) null);
      hashMultiSet0.hashCode();
      assertFalse(hashMultiSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>();
      hashMultiSet0.add("");
      int int0 = hashMultiSet0.getCount(hashMultiSet0);
      assertEquals(1, hashMultiSet0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>(linkedList0);
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(hashMultiSet0);
      boolean boolean0 = hashMultiSet1.equals(hashMultiSet0);
      assertEquals(0, hashMultiSet1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMultiSet<Predicate<String>> hashMultiSet0 = new HashMultiSet<Predicate<String>>();
      String[] stringArray0 = new String[5];
      String[] stringArray1 = hashMultiSet0.toArray(stringArray0);
      assertEquals(5, stringArray1.length);
      assertEquals(0, hashMultiSet0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      AbstractMapMultiSet.UniqueSetIterator<Integer> abstractMapMultiSet_UniqueSetIterator0 = new AbstractMapMultiSet.UniqueSetIterator<Integer>(iterator0, hashMultiSet0);
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>();
      hashMultiSet1.add((Object) abstractMapMultiSet_UniqueSetIterator0);
      Object[] objectArray0 = hashMultiSet1.toArray();
      hashMultiSet1.toArray(objectArray0);
      assertFalse(hashMultiSet1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMultiSet<BufferedInputStream> hashMultiSet0 = new HashMultiSet<BufferedInputStream>();
      Object[] objectArray0 = hashMultiSet0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMultiSet<Boolean> hashMultiSet0 = new HashMultiSet<Boolean>();
      MockFile mockFile0 = new MockFile("", "");
      File file0 = MockFile.createTempFile("org.apache.commons.collections4.functors.OrPredicate", "", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      hashMultiSet0.doWriteObject(objectOutputStream0);
      assertEquals(0, hashMultiSet0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Iterator<Map.Entry<Map.Entry<Object, Object>, AbstractMapMultiSet.MutableInteger>> iterator0 = (Iterator<Map.Entry<Map.Entry<Object, Object>, AbstractMapMultiSet.MutableInteger>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      HashMultiSet<Map.Entry<Object, Object>> hashMultiSet0 = new HashMultiSet<Map.Entry<Object, Object>>();
      AbstractMapMultiSet.EntrySetIterator<Map.Entry<Object, Object>> abstractMapMultiSet_EntrySetIterator0 = new AbstractMapMultiSet.EntrySetIterator<Map.Entry<Object, Object>>(iterator0, hashMultiSet0);
      // Undeclared exception!
      try { 
        abstractMapMultiSet_EntrySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Iterator<Map.Entry<Boolean, AbstractMapMultiSet.MutableInteger>> iterator0 = (Iterator<Map.Entry<Boolean, AbstractMapMultiSet.MutableInteger>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      HashMultiSet<Boolean> hashMultiSet0 = new HashMultiSet<Boolean>();
      AbstractMapMultiSet.EntrySetIterator<Boolean> abstractMapMultiSet_EntrySetIterator0 = new AbstractMapMultiSet.EntrySetIterator<Boolean>(iterator0, hashMultiSet0);
      abstractMapMultiSet_EntrySetIterator0.canRemove = true;
      abstractMapMultiSet_EntrySetIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Iterator<SynchronizedMultiSet<Integer>> iterator0 = (Iterator<SynchronizedMultiSet<Integer>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      HashMultiSet<SynchronizedMultiSet<Integer>> hashMultiSet0 = new HashMultiSet<SynchronizedMultiSet<Integer>>();
      AbstractMapMultiSet.UniqueSetIterator<SynchronizedMultiSet<Integer>> abstractMapMultiSet_UniqueSetIterator0 = new AbstractMapMultiSet.UniqueSetIterator<SynchronizedMultiSet<Integer>>(iterator0, hashMultiSet0);
      // Undeclared exception!
      try { 
        abstractMapMultiSet_UniqueSetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet$UniqueSetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMultiSet<BufferedInputStream> hashMultiSet0 = new HashMultiSet<BufferedInputStream>();
      Iterator<BufferedInputStream> iterator0 = (Iterator<BufferedInputStream>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iterator0).next();
      AbstractMapMultiSet.UniqueSetIterator<BufferedInputStream> abstractMapMultiSet_UniqueSetIterator0 = new AbstractMapMultiSet.UniqueSetIterator<BufferedInputStream>(iterator0, hashMultiSet0);
      abstractMapMultiSet_UniqueSetIterator0.next();
      abstractMapMultiSet_UniqueSetIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger((-4303));
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger1 = new AbstractMapMultiSet.MutableInteger((-4303));
      abstractMapMultiSet_MutableInteger1.value = (-2026);
      boolean boolean0 = abstractMapMultiSet_MutableInteger0.equals(abstractMapMultiSet_MutableInteger1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[5];
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger(2391);
      boolean boolean0 = abstractMapMultiSet_MutableInteger0.equals(stringArray0[3]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger((-4303));
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger1 = new AbstractMapMultiSet.MutableInteger((-4303));
      boolean boolean0 = abstractMapMultiSet_MutableInteger0.equals(abstractMapMultiSet_MutableInteger1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      HashMultiSet<BufferedInputStream> hashMultiSet1 = new HashMultiSet<BufferedInputStream>();
      // Undeclared exception!
      try { 
        hashMultiSet1.remove((Object) hashMultiSet0, (-1193));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Occurrences must not be negative.
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger(2391);
      HashMultiSet<AbstractMapMultiSet.MultiSetEntry<Object>> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MultiSetEntry<Object>>();
      int int0 = hashMultiSet0.remove((Object) abstractMapMultiSet_MutableInteger0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        hashMultiSet0.add(integer0, (-257));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Occurrences must not be negative.
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMultiSet<InputStream> hashMultiSet0 = new HashMultiSet<InputStream>();
      HashMultiSet<HashMultiSet<BufferedInputStream>> hashMultiSet1 = new HashMultiSet<HashMultiSet<BufferedInputStream>>();
      HashMultiSet<BufferedInputStream> hashMultiSet2 = new HashMultiSet<BufferedInputStream>();
      hashMultiSet1.add(hashMultiSet2);
      assertFalse(hashMultiSet1.isEmpty());
      
      boolean boolean0 = hashMultiSet1.retainAll(hashMultiSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MultiSetEntry<Object>> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MultiSetEntry<Object>>();
      HashMultiSet<Predicate<Object>> hashMultiSet1 = new HashMultiSet<Predicate<Object>>();
      boolean boolean0 = hashMultiSet1.contains(hashMultiSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      HashMultiSet<Predicate<Object>> hashMultiSet0 = new HashMultiSet<Predicate<Object>>();
      hashMultiSet0.add((Predicate<Object>) null);
      int int0 = hashMultiSet0.getCount(objectArray0[5]);
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      Iterator<Object> iterator0 = hashMultiSet0.createUniqueSetIterator();
      HashMultiSet<Predicate<Object>> hashMultiSet1 = new HashMultiSet<Predicate<Object>>();
      int int0 = hashMultiSet1.getCount(iterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      boolean boolean0 = hashMultiSet0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMultiSet<Transformer<Object, Boolean>> hashMultiSet0 = new HashMultiSet<Transformer<Object, Boolean>>();
      Class<InputStream>[] classArray0 = (Class<InputStream>[]) Array.newInstance(Class.class, 9);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("", classArray0, classArray0);
      hashMultiSet0.add((Transformer<Object, Boolean>) invokerTransformer0);
      boolean boolean0 = hashMultiSet0.isEmpty();
      assertEquals(1, hashMultiSet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Iterator<Map.Entry<AbstractMapMultiSet.MutableInteger, AbstractMapMultiSet.MutableInteger>> iterator0 = (Iterator<Map.Entry<AbstractMapMultiSet.MutableInteger, AbstractMapMultiSet.MutableInteger>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      AbstractMapMultiSet.EntrySetIterator<AbstractMapMultiSet.MutableInteger> abstractMapMultiSet_EntrySetIterator0 = new AbstractMapMultiSet.EntrySetIterator<AbstractMapMultiSet.MutableInteger>(iterator0, hashMultiSet0);
      boolean boolean0 = abstractMapMultiSet_EntrySetIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Iterator<Map.Entry<Integer, AbstractMapMultiSet.MutableInteger>> iterator0 = (Iterator<Map.Entry<Integer, AbstractMapMultiSet.MutableInteger>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iterator0).next();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>(linkedList0);
      AbstractMapMultiSet.EntrySetIterator<Integer> abstractMapMultiSet_EntrySetIterator0 = new AbstractMapMultiSet.EntrySetIterator<Integer>(iterator0, hashMultiSet0);
      MultiSet.Entry<Integer> multiSet_Entry0 = abstractMapMultiSet_EntrySetIterator0.next();
      assertNotNull(multiSet_Entry0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger(0);
      hashMultiSet0.add(abstractMapMultiSet_MutableInteger0);
      int int0 = hashMultiSet0.uniqueElements();
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMultiSet<HashMultiSet<String>> hashMultiSet0 = new HashMultiSet<HashMultiSet<String>>();
      int int0 = hashMultiSet0.uniqueElements();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMultiSet<Predicate<Boolean>> hashMultiSet0 = new HashMultiSet<Predicate<Boolean>>();
      Predicate<Boolean> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Boolean>>) hashMultiSet0);
      int int0 = hashMultiSet0.add(predicate0, 0);
      assertFalse(hashMultiSet0.contains(predicate0));
      assertEquals(0, int0);
      assertEquals(0, hashMultiSet0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMultiSet<Boolean> hashMultiSet0 = new HashMultiSet<Boolean>();
      hashMultiSet0.clear();
      assertEquals(0, hashMultiSet0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMultiSet<InputStream> hashMultiSet0 = new HashMultiSet<InputStream>();
      Iterator<MultiSet.Entry<InputStream>> iterator0 = (Iterator<MultiSet.Entry<InputStream>>)hashMultiSet0.createEntrySetIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMultiSet<Predicate<Object>> hashMultiSet0 = new HashMultiSet<Predicate<Object>>();
      Map<Predicate<Object>, AbstractMapMultiSet.MutableInteger> map0 = (Map<Predicate<Object>, AbstractMapMultiSet.MutableInteger>)hashMultiSet0.getMap();
      hashMultiSet0.setMap(map0);
      assertTrue(hashMultiSet0.isEmpty());
  }
}
