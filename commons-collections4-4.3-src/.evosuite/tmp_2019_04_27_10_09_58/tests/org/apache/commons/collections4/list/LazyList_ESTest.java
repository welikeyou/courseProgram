/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:38:51 GMT 2019
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.list.LazyList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LazyList_ESTest extends LazyList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      assertNotNull(constantFactory0);
      
      LazyList<Object> lazyList0 = new LazyList<Object>(linkedList0, constantFactory0);
      assertNotNull(lazyList0);
      assertFalse(linkedList0.contains(0));
      assertFalse(lazyList0.contains(0));
      assertEquals(0, linkedList0.size());
      
      Object object0 = lazyList0.get(0);
      assertNotNull(object0);
      assertTrue(linkedList0.contains(0));
      assertTrue(lazyList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Factory<String> factory0 = ConstantFactory.constantFactory("%B,9:m;~Ekb");
      assertNotNull(factory0);
      
      LazyList<String> lazyList0 = new LazyList<String>(linkedList0, factory0);
      assertNotNull(lazyList0);
      assertFalse(linkedList0.contains("%B,9:m;~Ekb"));
      assertFalse(lazyList0.contains("%B,9:m;~Ekb"));
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = lazyList0.subList(0, 0);
      assertNotNull(list0);
      assertFalse(linkedList0.contains("%B,9:m;~Ekb"));
      assertFalse(lazyList0.contains("%B,9:m;~Ekb"));
      assertFalse(list0.contains("%B,9:m;~Ekb"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>((Object) null);
      assertNotNull(constantFactory0);
      
      LazyList<Object> lazyList0 = new LazyList<Object>(linkedList0, constantFactory0);
      assertNotNull(lazyList0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = lazyList0.get(1);
      assertNull(object0);
      assertFalse(linkedList0.contains(1));
      assertFalse(lazyList0.contains(1));
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      assertNotNull(factory0);
      
      LazyList<Object> lazyList0 = new LazyList<Object>(linkedList0, factory0);
      assertNotNull(lazyList0);
      assertFalse(linkedList0.contains(""));
      assertFalse(lazyList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        lazyList0.subList(2620, (-232));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2620) > toIndex(-232)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      // Undeclared exception!
      try { 
        LazyList.lazyList((List<Object>) null, (Factory<?>) factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      LazyList<String> lazyList0 = LazyList.lazyList((List<String>) linkedList0, (Factory<? extends String>) factory0);
      assertNotNull(lazyList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        lazyList0.get(512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      assertNotNull(constantFactory0);
      
      LazyList<String> lazyList0 = new LazyList<String>(linkedList0, constantFactory0);
      assertNotNull(lazyList0);
      assertFalse(linkedList0.contains(""));
      assertFalse(lazyList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        lazyList0.get((-945));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -945, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>((String) null);
      assertNotNull(constantFactory0);
      
      LazyList<String> lazyList0 = null;
      try {
        lazyList0 = new LazyList<String>((List<String>) null, constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LazyList<Integer> lazyList0 = null;
      try {
        lazyList0 = new LazyList<Integer>(linkedList0, (Factory<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factory must not be null
         //
         verifyException("org.apache.commons.collections4.list.LazyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(2183);
      assertNotNull(integer0);
      assertEquals(2183, (int)integer0);
      
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      assertNotNull(constantFactory0);
      
      LazyList<Object> lazyList0 = new LazyList<Object>(linkedList0, constantFactory0);
      assertNotNull(lazyList0);
      assertFalse(linkedList0.contains(2183));
      assertFalse(lazyList0.contains(2183));
      assertEquals(0, linkedList0.size());
      
      LazyList<Object> lazyList1 = LazyList.lazyList((List<Object>) lazyList0, (Factory<?>) constantFactory0);
      assertNotNull(lazyList1);
      assertNotSame(lazyList0, lazyList1);
      assertNotSame(lazyList1, lazyList0);
      assertFalse(linkedList0.contains(2183));
      assertFalse(lazyList0.contains(2183));
      assertFalse(lazyList1.contains(2183));
      assertEquals(0, linkedList0.size());
      assertTrue(lazyList1.equals((Object)lazyList0));
      
      Object object0 = lazyList1.get(2183);
      assertNotNull(object0);
      assertNotSame(lazyList0, lazyList1);
      assertNotSame(lazyList1, lazyList0);
      assertTrue(linkedList0.contains(2183));
      assertTrue(lazyList0.contains(2183));
      assertTrue(lazyList1.contains(2183));
      assertEquals(2184, linkedList0.size());
      assertTrue(lazyList0.equals((Object)lazyList1));
      assertTrue(lazyList1.equals((Object)lazyList0));
      assertEquals(2183, object0);
      
      Object object1 = lazyList1.get(0);
      assertNotNull(object1);
      assertNotSame(lazyList0, lazyList1);
      assertNotSame(lazyList1, lazyList0);
      assertTrue(linkedList0.contains(2183));
      assertFalse(linkedList0.contains(0));
      assertFalse(lazyList0.contains(0));
      assertTrue(lazyList0.contains(2183));
      assertFalse(lazyList1.contains(0));
      assertTrue(lazyList1.contains(2183));
      assertEquals(2184, linkedList0.size());
      assertTrue(lazyList0.equals((Object)lazyList1));
      assertTrue(lazyList1.equals((Object)lazyList0));
      assertEquals(2183, object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(2183);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      LazyList<Object> lazyList0 = new LazyList<Object>(linkedList0, constantFactory0);
      lazyList0.get(2183);
      lazyList0.get(0);
      assertEquals(2184, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        LazyList.lazyList((List<Object>) linkedList0, (Factory<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factory must not be null
         //
         verifyException("org.apache.commons.collections4.list.LazyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      LazyList<String> lazyList0 = LazyList.lazyList((List<String>) linkedList0, (Factory<? extends String>) instantiateFactory0);
      // Undeclared exception!
      try { 
        lazyList0.subList((-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Class<Integer> class0 = Integer.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      InstantiateFactory<Integer> instantiateFactory0 = new InstantiateFactory<Integer>(class0, classArray0, classArray0);
      LazyList<Integer> lazyList0 = LazyList.lazyList((List<Integer>) linkedList0, (Factory<? extends Integer>) instantiateFactory0);
      // Undeclared exception!
      try { 
        lazyList0.get(1068);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }
}
