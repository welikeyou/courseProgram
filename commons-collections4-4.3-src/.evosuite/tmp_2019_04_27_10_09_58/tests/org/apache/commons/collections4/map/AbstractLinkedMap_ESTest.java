/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:24:02 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.SequenceInputStream;
import java.util.AbstractMap;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.AbstractLinkedMap;
import org.apache.commons.collections4.map.LRUMap;
import org.apache.commons.collections4.map.LRUMapTest;
import org.apache.commons.collections4.map.LinkedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractLinkedMap_ESTest extends AbstractLinkedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LRUMap<Object, AbstractMap.SimpleEntry<String, Object>> lRUMap0 = new LRUMap<Object, AbstractMap.SimpleEntry<String, Object>>(3665, 2, 3665);
      Integer integer0 = new Integer(0);
      lRUMap0.put(integer0, (AbstractMap.SimpleEntry<String, Object>) null);
      AbstractLinkedMap.LinkMapIterator<Object, AbstractMap.SimpleEntry<String, Object>> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<Object, AbstractMap.SimpleEntry<String, Object>>(lRUMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_LinkMapIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No previous() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(4230);
      // Undeclared exception!
      try { 
        linkedMap0.get(4120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 4120 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      AbstractLinkedMap.LinkMapIterator<Object, String> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<Object, String>(linkedMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_LinkMapIterator0.previousEntry();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No previous() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>(0);
      AbstractLinkedMap.LinkMapIterator<Object, Object> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<Object, Object>(linkedMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_LinkMapIterator0.nextEntry();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedMap<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>> linkedMap0 = new LinkedMap<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>(4);
      AbstractLinkedMap.LinkMapIterator<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>(linkedMap0);
      boolean boolean0 = abstractLinkedMap_LinkMapIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LRUMapTest.MockLRUMapSubclass<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Integer>> lRUMapTest_MockLRUMapSubclass0 = new LRUMapTest.MockLRUMapSubclass<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Integer>>(939);
      AbstractLinkedMap.EntrySetIterator<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractLinkedMap_EntrySetIterator0 = new AbstractLinkedMap.EntrySetIterator<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Integer>>(lRUMapTest_MockLRUMapSubclass0);
      AbstractLinkedMap.LinkEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractLinkedMap_LinkEntry0 = abstractLinkedMap_EntrySetIterator0.currentEntry();
      assertNull(abstractLinkedMap_LinkEntry0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LRUMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> lRUMap0 = new LRUMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>(2598, 2598, true);
      lRUMap0.init();
      assertTrue(lRUMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LRUMapTest.MockLRUMapSubclass<Integer, Integer> lRUMapTest_MockLRUMapSubclass0 = new LRUMapTest.MockLRUMapSubclass<Integer, Integer>(2);
      LRUMap<Integer, AbstractLinkedMap.LinkEntry<Object, String>> lRUMap0 = new LRUMap<Integer, AbstractLinkedMap.LinkEntry<Object, String>>(2, 1);
      AbstractLinkedMap.LinkEntry<Integer, AbstractLinkedMap.LinkEntry<Object, String>> abstractLinkedMap_LinkEntry0 = lRUMap0.getEntry(lRUMapTest_MockLRUMapSubclass0);
      assertNull(abstractLinkedMap_LinkEntry0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<SequenceInputStream, Integer> hashMap0 = new HashMap<SequenceInputStream, Integer>();
      LinkedMap<SequenceInputStream, Object> linkedMap0 = new LinkedMap<SequenceInputStream, Object>(hashMap0);
      Integer integer0 = new Integer(1);
      AbstractHashedMap.HashEntry<SequenceInputStream, Object> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<SequenceInputStream, Object>((AbstractHashedMap.HashEntry<SequenceInputStream, Object>) null, 0, "f4`[<IQ({>b:%vaR7?`", integer0);
      AbstractLinkedMap.LinkEntry<SequenceInputStream, Object> abstractLinkedMap_LinkEntry0 = new AbstractLinkedMap.LinkEntry<SequenceInputStream, Object>(abstractHashedMap_HashEntry0, 100, integer0, "f4`[<IQ({>b:%vaR7?`");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      AbstractLinkedMap.LinkEntry<SequenceInputStream, Object> abstractLinkedMap_LinkEntry1 = linkedMap0.createEntry(abstractLinkedMap_LinkEntry0, (-1400), sequenceInputStream0, "f4`[<IQ({>b:%vaR7?`");
      assertNotNull(abstractLinkedMap_LinkEntry1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LRUMap<String, Integer> lRUMap0 = new LRUMap<String, Integer>();
      // Undeclared exception!
      try { 
        lRUMap0.addEntry((AbstractHashedMap.HashEntry<String, Integer>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LRUMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>> lRUMap0 = new LRUMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      OrderedMapIterator<Object, AbstractMap.SimpleImmutableEntry<Integer, String>> orderedMapIterator0 = lRUMap0.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LRUMap<String, AbstractMap.SimpleEntry<Object, String>> lRUMap0 = new LRUMap<String, AbstractMap.SimpleEntry<Object, String>>(18, 18, 18, true);
      AbstractLinkedMap.ValuesIterator<AbstractMap.SimpleEntry<Object, String>> abstractLinkedMap_ValuesIterator0 = new AbstractLinkedMap.ValuesIterator<AbstractMap.SimpleEntry<Object, String>>(lRUMap0);
      String string0 = abstractLinkedMap_ValuesIterator0.toString();
      assertEquals("Iterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LRUMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> lRUMap0 = new LRUMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>(1, 1);
      AbstractLinkedMap.LinkMapIterator<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>(lRUMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_LinkMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LRUMapTest.MockLRUMapSubclassBlocksRemove<Integer, AbstractMap.SimpleImmutableEntry<String, String>> lRUMapTest_MockLRUMapSubclassBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassBlocksRemove<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(113, false);
      AbstractLinkedMap.LinkMapIterator<Integer, AbstractMap.SimpleImmutableEntry<String, String>> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(lRUMapTest_MockLRUMapSubclassBlocksRemove0);
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "ghSZ}t");
      lRUMapTest_MockLRUMapSubclassBlocksRemove0.put(integer0, abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_LinkMapIterator0.previous();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LRUMapTest.MockLRUMapSubclassBlocksRemove<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> lRUMapTest_MockLRUMapSubclassBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassBlocksRemove<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>(2952, false);
      AbstractLinkedMap.EntrySetIterator<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> abstractLinkedMap_EntrySetIterator0 = new AbstractLinkedMap.EntrySetIterator<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>(lRUMapTest_MockLRUMapSubclassBlocksRemove0);
      boolean boolean0 = abstractLinkedMap_EntrySetIterator0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LRUMap<String, AbstractMap.SimpleEntry<Integer, Integer>> lRUMap0 = new LRUMap<String, AbstractMap.SimpleEntry<Integer, Integer>>(2, 2, 2);
      Iterator<AbstractMap.SimpleEntry<Integer, Integer>> iterator0 = lRUMap0.createValuesIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<Object, Object> lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<Object, Object>(4667);
      Iterator<Object> iterator0 = lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0.createKeySetIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object> linkedMap0 = new LinkedMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>(50);
      Integer integer0 = new Integer((-918));
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "");
      linkedMap0.put(abstractMap_SimpleImmutableEntry0, "");
      Iterator<AbstractMap.SimpleImmutableEntry<Integer, String>> iterator0 = linkedMap0.createKeySetIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> linkedMap0 = new LinkedMap<String, AbstractMap.SimpleImmutableEntry<String, Object>>(0);
      Iterator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<String, Object>>> iterator0 = (Iterator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<String, Object>>>)linkedMap0.createEntrySetIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      AbstractLinkedMap.LinkMapIterator<Integer, Object> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<Integer, Object>(linkedMap0);
      Integer integer0 = new Integer(757);
      // Undeclared exception!
      try { 
        abstractLinkedMap_LinkMapIterator0.setValue(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(0, 657.46814F);
      AbstractLinkedMap.LinkMapIterator<String, Object> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<String, Object>(linkedMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_LinkMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>();
      Integer integer0 = new Integer(1012);
      linkedMap0.put(integer0, integer0);
      OrderedMapIterator<Object, Integer> orderedMapIterator0 = linkedMap0.mapIterator();
      assertTrue(orderedMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(hashMap0);
      // Undeclared exception!
      try { 
        linkedMap0.getEntry((-2092));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index -2092 is less than zero
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedMap<String, AbstractMap.SimpleImmutableEntry<Object, String>> linkedMap0 = new LinkedMap<String, AbstractMap.SimpleImmutableEntry<Object, String>>(3018, 2426);
      // Undeclared exception!
      try { 
        linkedMap0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 0 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<Integer, Object> lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<Integer, Object>(2426);
      LRUMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractLinkedMap.LinkEntry<Object, Object>> lRUMap0 = new LRUMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractLinkedMap.LinkEntry<Object, Object>>(2, 2);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = lRUMap0.nextKey(lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0);
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedMap<AbstractLinkedMap.LinkEntry<String, Object>, Object> linkedMap0 = new LinkedMap<AbstractLinkedMap.LinkEntry<String, Object>, Object>(1, 1);
      // Undeclared exception!
      try { 
        linkedMap0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      // Undeclared exception!
      try { 
        linkedMap0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>(850);
      abstractHashedMap0.put("vggC:sz", (Integer) null);
      LRUMap<String, Integer> lRUMap0 = new LRUMap<String, Integer>(abstractHashedMap0, false);
      String string0 = lRUMap0.firstKey();
      assertEquals("vggC:sz", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LRUMap<AbstractMap.SimpleEntry<Object, Integer>, String> lRUMap0 = new LRUMap<AbstractMap.SimpleEntry<Object, Integer>, String>(4117, true);
      Integer integer0 = new Integer(4117);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>((Object) null, integer0);
      lRUMap0.put(abstractMap_SimpleEntry0, "cwJa:06C");
      boolean boolean0 = lRUMap0.containsValue("l7WLC-*S~^``9K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LRUMap<Integer, Object> lRUMap0 = new LRUMap<Integer, Object>(646);
      boolean boolean0 = lRUMap0.containsValue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LRUMap<AbstractMap.SimpleEntry<String, String>, Object> lRUMap0 = new LRUMap<AbstractMap.SimpleEntry<String, String>, Object>(2007, false);
      AbstractLinkedMap.LinkMapIterator<AbstractMap.SimpleEntry<String, String>, Object> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<AbstractMap.SimpleEntry<String, String>, Object>(lRUMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_LinkMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LRUMap<AbstractLinkedMap.LinkEntry<String, Object>, AbstractMap.SimpleEntry<Object, Integer>> lRUMap0 = new LRUMap<AbstractLinkedMap.LinkEntry<String, Object>, AbstractMap.SimpleEntry<Object, Integer>>(1, 0);
      AbstractLinkedMap.EntrySetIterator<AbstractLinkedMap.LinkEntry<String, Object>, AbstractMap.SimpleEntry<Object, Integer>> abstractLinkedMap_EntrySetIterator0 = new AbstractLinkedMap.EntrySetIterator<AbstractLinkedMap.LinkEntry<String, Object>, AbstractMap.SimpleEntry<Object, Integer>>(lRUMap0);
      abstractLinkedMap_EntrySetIterator0.reset();
      assertFalse(abstractLinkedMap_EntrySetIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LRUMap<String, Object> lRUMap0 = new LRUMap<String, Object>(25, 25, 25, true);
      AbstractLinkedMap.LinkMapIterator<String, Object> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<String, Object>(lRUMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_LinkMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LRUMap<String, AbstractMap.SimpleEntry<Object, String>> lRUMap0 = new LRUMap<String, AbstractMap.SimpleEntry<Object, String>>(18, 18, 18, true);
      AbstractLinkedMap.ValuesIterator<AbstractMap.SimpleEntry<Object, String>> abstractLinkedMap_ValuesIterator0 = new AbstractLinkedMap.ValuesIterator<AbstractMap.SimpleEntry<Object, String>>(lRUMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_ValuesIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LRUMap<String, AbstractMap.SimpleEntry<Object, String>> lRUMap0 = new LRUMap<String, AbstractMap.SimpleEntry<Object, String>>(18, 18, 18, true);
      AbstractLinkedMap.ValuesIterator<AbstractMap.SimpleEntry<Object, String>> abstractLinkedMap_ValuesIterator0 = new AbstractLinkedMap.ValuesIterator<AbstractMap.SimpleEntry<Object, String>>(lRUMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_ValuesIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No previous() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LRUMap<String, String> lRUMap0 = new LRUMap<String, String>(8, true);
      AbstractLinkedMap.KeySetIterator<String> abstractLinkedMap_KeySetIterator0 = new AbstractLinkedMap.KeySetIterator<String>(lRUMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_KeySetIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No previous() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> linkedMap0 = new LinkedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>(370, 370);
      AbstractLinkedMap.EntrySetIterator<AbstractMap.SimpleImmutableEntry<Object, Object>, String> abstractLinkedMap_EntrySetIterator0 = new AbstractLinkedMap.EntrySetIterator<AbstractMap.SimpleImmutableEntry<Object, Object>, String>(linkedMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_EntrySetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LRUMap<Integer, String> lRUMap0 = new LRUMap<Integer, String>(215, 215);
      AbstractLinkedMap.EntrySetIterator<Integer, String> abstractLinkedMap_EntrySetIterator0 = new AbstractLinkedMap.EntrySetIterator<Integer, String>(lRUMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_EntrySetIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No previous() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LRUMap<AbstractMap.SimpleEntry<Object, Object>, Object> lRUMap0 = new LRUMap<AbstractMap.SimpleEntry<Object, Object>, Object>(285, 0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = lRUMap0.previousKey("tqP2!|Zk");
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<String, Object> lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<String, Object>(2);
      // Undeclared exception!
      try { 
        lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0.entryAfter((AbstractLinkedMap.LinkEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>(850);
      Integer integer0 = abstractHashedMap0.put("vggC:sz", (Integer) null);
      LRUMap<String, Integer> lRUMap0 = new LRUMap<String, Integer>(abstractHashedMap0, false);
      Object object0 = lRUMap0.put("vggC:sz", integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LRUMapTest.MockLRUMapSubclassBlocksRemove<String, Object> lRUMapTest_MockLRUMapSubclassBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassBlocksRemove<String, Object>(277, true);
      lRUMapTest_MockLRUMapSubclassBlocksRemove0.clear();
      assertFalse(lRUMapTest_MockLRUMapSubclassBlocksRemove0.isFull());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> linkedMap0 = new LinkedMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(linkedMap0);
      linkedMap1.size = (-2092);
      LinkedMap<Object, Object> linkedMap2 = linkedMap1.clone();
      assertTrue(linkedMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      // Undeclared exception!
      try { 
        linkedMap0.entryBefore((AbstractLinkedMap.LinkEntry<Object, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }
}
