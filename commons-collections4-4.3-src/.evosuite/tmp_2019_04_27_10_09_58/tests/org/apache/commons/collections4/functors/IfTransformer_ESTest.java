/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:16:52 GMT 2019
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IfTransformer_ESTest extends IfTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsFalsePredicate<Integer> nullIsFalsePredicate0 = new NullIsFalsePredicate<Integer>(predicate0);
      Factory<Transformer<Object, String>> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Transformer<Object, String>> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Transformer<Object, String>>) factory0);
      Transformer<Integer, String> transformer1 = StringValueTransformer.stringValueTransformer();
      Transformer<Integer, Object> transformer2 = IfTransformer.ifTransformer((Predicate<? super Integer>) nullIsFalsePredicate0, (Transformer<? super Integer, ?>) transformer0, (Transformer<? super Integer, ?>) transformer1);
      assertNotNull(transformer2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      PredicateTransformer<Predicate<Object>> predicateTransformer0 = new PredicateTransformer<Predicate<Object>>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(predicate0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>(boolean0);
      IfTransformer<Boolean, Boolean> ifTransformer0 = new IfTransformer<Boolean, Boolean>(predicate0, constantTransformer0, constantTransformer0);
      Boolean boolean1 = ifTransformer0.transform(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, predicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(transformedPredicate0);
      IfTransformer<String, Object> ifTransformer0 = new IfTransformer<String, Object>(nullIsTruePredicate0, (Transformer<? super String, ?>) null, (Transformer<? super String, ?>) null);
      Transformer<? super String, ?> transformer0 = ifTransformer0.getTrueTransformer();
      assertNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashMap0);
      IfTransformer<Object, Boolean> ifTransformer0 = new IfTransformer<Object, Boolean>((Predicate<? super Object>) null, transformer0, transformer0);
      Predicate<? super Object> predicate0 = ifTransformer0.getPredicate();
      assertNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IfTransformer<Predicate<Object>, Object> ifTransformer0 = new IfTransformer<Predicate<Object>, Object>(predicate0, (Transformer<? super Predicate<Object>, ?>) null, (Transformer<? super Predicate<Object>, ?>) null);
      Transformer<? super Predicate<Object>, ?> transformer0 = ifTransformer0.getFalseTransformer();
      assertNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 8);
      Transformer<String, Integer> transformer0 = InvokerTransformer.invokerTransformer("&x<,Hyb1#", (Class<?>[]) classArray0, (Object[]) classArray0);
      IfTransformer<String, Integer> ifTransformer0 = new IfTransformer<String, Integer>(predicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        ifTransformer0.transform(")3/j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '&x<,Hyb1#' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      IfTransformer<String, Boolean> ifTransformer0 = new IfTransformer<String, Boolean>(predicate0, predicateTransformer0, (Transformer<? super String, ? extends Boolean>) null);
      // Undeclared exception!
      try { 
        ifTransformer0.transform("CrW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IfTransformer<Boolean, Integer> ifTransformer0 = new IfTransformer<Boolean, Integer>(instanceofPredicate0, transformer0, transformer0);
      PredicateTransformer<Predicate<Object>> predicateTransformer0 = new PredicateTransformer<Predicate<Object>>(instanceofPredicate0);
      Boolean boolean0 = predicateTransformer0.transform(instanceofPredicate0);
      Integer integer0 = ifTransformer0.transform(boolean0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      // Undeclared exception!
      try { 
        IfTransformer.ifTransformer((Predicate<? super Object>) null, (Transformer<? super Object, ?>) constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<Boolean, Boolean> transformer1 = IfTransformer.ifTransformer((Predicate<? super Boolean>) nonePredicate0, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
      assertNotNull(transformer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>((Integer) null);
      // Undeclared exception!
      try { 
        IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends Integer>) constantTransformer0, (Transformer<? super Object, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformers must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IfTransformer.ifTransformer((Predicate<? super Predicate<Object>>) predicate0, (Transformer<? super Predicate<Object>, ? extends String>) null, (Transformer<? super Predicate<Object>, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformers must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        IfTransformer.ifTransformer((Predicate<? super Object>) null, (Transformer<? super Object, ? extends Boolean>) null, (Transformer<? super Object, ? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Transformer<String, Predicate<Object>> transformer0 = ConstantTransformer.nullTransformer();
      HashMap<Object, Predicate<Object>> hashMap0 = new HashMap<Object, Predicate<Object>>();
      Transformer<Object, Predicate<Object>> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends Predicate<Object>>) hashMap0);
      IfTransformer<String, Predicate<Object>> ifTransformer0 = new IfTransformer<String, Predicate<Object>>(predicate0, transformer0, transformer1);
      Transformer<? super String, ? extends Predicate<Object>> transformer2 = ifTransformer0.getFalseTransformer();
      assertNotNull(transformer2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Predicate<Boolean> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[0] = predicate1;
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 1);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("CrW");
      transformerArray0[0] = transformer0;
      Transformer<Boolean, Integer> transformer1 = SwitchTransformer.switchTransformer((Predicate<? super Boolean>[]) predicateArray0, (Transformer<? super Boolean, ? extends Integer>[]) transformerArray0, (Transformer<? super Boolean, ? extends Integer>) transformer0);
      IfTransformer<Boolean, Integer> ifTransformer0 = new IfTransformer<Boolean, Integer>(predicate0, transformer1, transformer0);
      Transformer<? super Boolean, ? extends Integer> transformer2 = ifTransformer0.getTrueTransformer();
      assertNotNull(transformer2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Predicate<Boolean> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[0] = predicate1;
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 1);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("CrW");
      transformerArray0[0] = transformer0;
      Transformer<Boolean, Integer> transformer1 = SwitchTransformer.switchTransformer((Predicate<? super Boolean>[]) predicateArray0, (Transformer<? super Boolean, ? extends Integer>[]) transformerArray0, (Transformer<? super Boolean, ? extends Integer>) transformer0);
      IfTransformer<Boolean, Integer> ifTransformer0 = new IfTransformer<Boolean, Integer>(predicate0, transformer1, transformer0);
      Predicate<? super Boolean> predicate2 = ifTransformer0.getPredicate();
      assertNotNull(predicate2);
  }
}
