/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:31:40 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.FilterListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FilterListIterator_ESTest extends FilterListIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      FilterListIterator<Predicate<Object>> filterListIterator0 = new FilterListIterator<Predicate<Object>>(nullIsExceptionPredicate0);
      filterListIterator0.getPredicate();
      assertEquals(0, filterListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FilterListIterator<String> filterListIterator0 = new FilterListIterator<String>();
      // Undeclared exception!
      try { 
        filterListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FilterListIterator<String> filterListIterator0 = new FilterListIterator<String>();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(filterListIterator0);
      // Undeclared exception!
      try { 
        filterListIterator1.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      boolean boolean0 = filterListIterator0.hasPrevious();
      assertFalse(boolean0);
      assertEquals((-1), filterListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      boolean boolean0 = filterListIterator0.hasNext();
      assertFalse(boolean0);
      assertEquals((-1), filterListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      FilterListIterator<Boolean> filterListIterator1 = new FilterListIterator<Boolean>(filterListIterator0, (Predicate<? super Boolean>) null);
      boolean boolean0 = filterListIterator1.hasNext();
      assertEquals((-1), filterListIterator1.previousIndex());
      assertEquals(0, filterListIterator0.nextIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FilterListIterator<Predicate<Object>> filterListIterator0 = new FilterListIterator<Predicate<Object>>((Predicate<? super Predicate<Object>>) null);
      filterListIterator0.getPredicate();
      assertEquals(0, filterListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>();
      filterListIterator0.getListIterator();
      assertEquals(0, filterListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      int int0 = filterListIterator0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(comparatorPredicate0, comparatorPredicate0);
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(orPredicate0);
      // Undeclared exception!
      try { 
        filterListIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.remove() is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UniquePredicate<String> uniquePredicate0 = new UniquePredicate<String>();
      FilterListIterator<String> filterListIterator0 = new FilterListIterator<String>(uniquePredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      filterListIterator0.setPredicate(anyPredicate0);
      assertEquals(0, filterListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      FilterListIterator<String> filterListIterator0 = new FilterListIterator<String>(predicate0);
      // Undeclared exception!
      try { 
        filterListIterator0.set("@^#a)e5qm");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.set(Object) is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      filterListIterator0.setListIterator(filterListIterator0);
      assertEquals(0, filterListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1246);
      Predicate<Integer> predicate0 = EqualPredicate.equalPredicate(integer0, (Equator<Integer>) null);
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      // Undeclared exception!
      try { 
        filterListIterator0.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.add(Object) is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(0, integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(listIterator0);
      int int0 = filterListIterator0.previousIndex();
      assertEquals((-1), int0);
  }
}
