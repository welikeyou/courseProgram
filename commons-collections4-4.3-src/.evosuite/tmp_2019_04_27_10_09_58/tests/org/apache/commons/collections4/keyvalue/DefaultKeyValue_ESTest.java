/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:44:48 GMT 2019
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Map;
import org.apache.commons.collections4.KeyValue;
import org.apache.commons.collections4.keyvalue.DefaultKeyValue;
import org.apache.commons.collections4.keyvalue.DefaultMapEntry;
import org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultKeyValue_ESTest extends DefaultKeyValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultKeyValue<Integer, Integer> defaultKeyValue0 = null;
      try {
        defaultKeyValue0 = new DefaultKeyValue<Integer, Integer>((KeyValue<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.keyvalue.DefaultKeyValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultKeyValue<DefaultKeyValue<Object, Object>, String> defaultKeyValue0 = null;
      try {
        defaultKeyValue0 = new DefaultKeyValue<DefaultKeyValue<Object, Object>, String>((Map.Entry<? extends DefaultKeyValue<Object, Object>, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.keyvalue.DefaultKeyValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyValue<Object, String> defaultKeyValue0 = new DefaultKeyValue<Object, String>("pD:zrm(", "\"1C_3z^F1QHM");
      defaultKeyValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1802));
      DefaultKeyValue<Integer, DefaultKeyValue<Object, Object>> defaultKeyValue0 = new DefaultKeyValue<Integer, DefaultKeyValue<Object, Object>>();
      defaultKeyValue0.setKey(integer0);
      defaultKeyValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultKeyValue<Object, String> defaultKeyValue0 = new DefaultKeyValue<Object, String>("pD:W\"m(", "pD:W\"m(");
      DefaultKeyValue<Object, String> defaultKeyValue1 = new DefaultKeyValue<Object, String>(defaultKeyValue0);
      boolean boolean0 = defaultKeyValue0.equals(defaultKeyValue1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultKeyValue<Object, String> defaultKeyValue0 = new DefaultKeyValue<Object, String>();
      DefaultKeyValue<Object, Integer> defaultKeyValue1 = new DefaultKeyValue<Object, Integer>();
      Integer integer0 = new Integer((-1802));
      defaultKeyValue1.setValue(integer0);
      boolean boolean0 = defaultKeyValue0.equals(defaultKeyValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-277));
      UnmodifiableMapEntry<String, Integer> unmodifiableMapEntry0 = new UnmodifiableMapEntry<String, Integer>("", integer0);
      DefaultKeyValue<Object, Object> defaultKeyValue0 = new DefaultKeyValue<Object, Object>((Map.Entry<?, ?>) unmodifiableMapEntry0);
      DefaultKeyValue<String, Object> defaultKeyValue1 = new DefaultKeyValue<String, Object>();
      boolean boolean0 = defaultKeyValue0.equals(defaultKeyValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultKeyValue<Object, Object> defaultKeyValue0 = new DefaultKeyValue<Object, Object>();
      Integer integer0 = new Integer((-1496));
      UnmodifiableMapEntry<String, Integer> unmodifiableMapEntry0 = new UnmodifiableMapEntry<String, Integer>("{DdnmZ+H}\"3N ", integer0);
      DefaultMapEntry<String, Integer> defaultMapEntry0 = new DefaultMapEntry<String, Integer>((Map.Entry<? extends String, ? extends Integer>) unmodifiableMapEntry0);
      DefaultKeyValue<String, Integer> defaultKeyValue1 = new DefaultKeyValue<String, Integer>((Map.Entry<? extends String, ? extends Integer>) defaultMapEntry0);
      boolean boolean0 = defaultKeyValue0.equals(defaultKeyValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultKeyValue<Object, String> defaultKeyValue0 = new DefaultKeyValue<Object, String>();
      DefaultKeyValue<Object, Integer> defaultKeyValue1 = new DefaultKeyValue<Object, Integer>();
      boolean boolean0 = defaultKeyValue0.equals(defaultKeyValue1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultKeyValue<Object, Integer> defaultKeyValue0 = new DefaultKeyValue<Object, Integer>();
      boolean boolean0 = defaultKeyValue0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultKeyValue<Object, String> defaultKeyValue0 = new DefaultKeyValue<Object, String>("pD:zrm(", "\"1C_3z^F1QHM");
      boolean boolean0 = defaultKeyValue0.equals(defaultKeyValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultKeyValue<Object, String> defaultKeyValue0 = new DefaultKeyValue<Object, String>("pD:zrm(", "\"1C_3z^F1QHM");
      DefaultKeyValue<Object, String> defaultKeyValue1 = new DefaultKeyValue<Object, String>(defaultKeyValue0);
      assertTrue(defaultKeyValue1.equals((Object)defaultKeyValue0));
      
      defaultKeyValue1.setValue("");
      boolean boolean0 = defaultKeyValue0.equals(defaultKeyValue1);
      assertFalse(defaultKeyValue1.equals((Object)defaultKeyValue0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultKeyValue<Integer, Object> defaultKeyValue0 = new DefaultKeyValue<Integer, Object>();
      DefaultKeyValue<Object, Object> defaultKeyValue1 = new DefaultKeyValue<Object, Object>();
      defaultKeyValue1.setValue(defaultKeyValue0);
      Object object0 = defaultKeyValue1.getValue();
      // Undeclared exception!
      try { 
        defaultKeyValue0.setValue(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultKeyValue may not contain itself as a value.
         //
         verifyException("org.apache.commons.collections4.keyvalue.DefaultKeyValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, (Integer) null);
      DefaultMapEntry<Object, Integer> defaultMapEntry0 = new DefaultMapEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      DefaultKeyValue<Object, Object> defaultKeyValue0 = new DefaultKeyValue<Object, Object>((Map.Entry<?, ?>) defaultMapEntry0);
      // Undeclared exception!
      try { 
        defaultKeyValue0.setKey(defaultKeyValue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultKeyValue may not contain itself as a key.
         //
         verifyException("org.apache.commons.collections4.keyvalue.DefaultKeyValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultKeyValue<Object, String> defaultKeyValue0 = new DefaultKeyValue<Object, String>("pD:zrm(", "\"1C_3z^F1QHM");
      Object object0 = defaultKeyValue0.setKey("\"1C_3z^F1QHM");
      assertEquals("pD:zrm(", object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-1496));
      DefaultKeyValue<Integer, Integer> defaultKeyValue0 = new DefaultKeyValue<Integer, Integer>(integer0, integer0);
      DefaultKeyValue<Object, Integer> defaultKeyValue1 = new DefaultKeyValue<Object, Integer>(defaultKeyValue0, integer0);
      Map.Entry<Object, Integer> map_Entry0 = defaultKeyValue1.toMapEntry();
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultKeyValue<Comparable<Object>, Comparable<Object>> defaultKeyValue0 = new DefaultKeyValue<Comparable<Object>, Comparable<Object>>();
      defaultKeyValue0.hashCode();
  }
}
