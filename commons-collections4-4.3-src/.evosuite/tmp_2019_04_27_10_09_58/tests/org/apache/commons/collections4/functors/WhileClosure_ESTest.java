/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:36:45 GMT 2019
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WhileClosure_ESTest extends WhileClosure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      WhileClosure<Closure<Object>> whileClosure1 = new WhileClosure<Closure<Object>>(nullIsTruePredicate0, whileClosure0, false);
      boolean boolean0 = whileClosure1.isDoLoop();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>((Predicate<? super Object>) null, closure0, true);
      WhileClosure<String> whileClosure1 = new WhileClosure<String>((Predicate<? super String>) null, whileClosure0, false);
      whileClosure1.getPredicate();
      assertFalse(whileClosure1.isDoLoop());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      WhileClosure<Integer> whileClosure0 = new WhileClosure<Integer>(uniquePredicate0, (Closure<? super Integer>) null, true);
      whileClosure0.getClosure();
      assertTrue(whileClosure0.isDoLoop());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      WhileClosure<String> whileClosure0 = new WhileClosure<String>((Predicate<? super String>) null, closure0, true);
      // Undeclared exception!
      try { 
        whileClosure0.execute("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate(object0, comparator0);
      AndPredicate<String> andPredicate0 = new AndPredicate<String>(predicate0, predicate0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<String> whileClosure0 = new WhileClosure<String>(andPredicate0, closure0, true);
      // Undeclared exception!
      whileClosure0.execute("");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("),RC", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      WhileClosure<Closure<Object>> whileClosure0 = new WhileClosure<Closure<Object>>(transformerPredicate0, closure0, true);
      // Undeclared exception!
      try { 
        whileClosure0.execute(closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      WhileClosure<Closure<Object>> whileClosure1 = new WhileClosure<Closure<Object>>(nullIsTruePredicate0, whileClosure0, false);
      whileClosure1.execute(whileClosure0);
      assertFalse(whileClosure1.isDoLoop());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer0);
      // Undeclared exception!
      try { 
        WhileClosure.whileClosure((Predicate<? super Closure<Object>>) identityPredicate0, (Closure<? super Closure<Object>>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        WhileClosure.whileClosure((Predicate<? super Predicate<Object>>) null, (Closure<? super Predicate<Object>>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      WhileClosure.whileClosure((Predicate<? super Predicate<Boolean>>) predicate0, (Closure<? super Predicate<Boolean>>) whileClosure0, true);
      assertTrue(whileClosure0.isDoLoop());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      whileClosure0.getClosure();
      assertTrue(whileClosure0.isDoLoop());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Predicate<Boolean> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Boolean>) nullIsTruePredicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      WhileClosure<Boolean> whileClosure0 = new WhileClosure<Boolean>(predicate1, closure0, false);
      whileClosure0.getPredicate();
      assertFalse(whileClosure0.isDoLoop());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("),RC", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      WhileClosure<Predicate<Boolean>> whileClosure0 = new WhileClosure<Predicate<Boolean>>(transformerPredicate0, closure0, true);
      boolean boolean0 = whileClosure0.isDoLoop();
      assertTrue(boolean0);
  }
}
