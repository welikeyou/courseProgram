/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:03:46 GMT 2019
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import org.apache.commons.collections4.collection.SynchronizedCollection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SynchronizedCollection_ESTest extends SynchronizedCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = synchronizedCollection0.toArray(objectArray0);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SynchronizedCollection<String> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<String>) linkedList0);
      linkedList0.offerLast("JWT_uF/%sh;Lt");
      Object[] objectArray0 = synchronizedCollection0.toArray();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SynchronizedCollection<String> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<String>) linkedList0);
      linkedList0.offerLast("JWT_uF/%sh;Lt");
      SynchronizedCollection<String> synchronizedCollection1 = SynchronizedCollection.synchronizedCollection((Collection<String>) synchronizedCollection0);
      assertTrue(synchronizedCollection1.contains("JWT_uF/%sh;Lt"));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      SynchronizedCollection<String> synchronizedCollection0 = new SynchronizedCollection<String>(linkedList0, linkedList0);
      int int0 = synchronizedCollection0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SynchronizedCollection<String> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<String>) linkedList0);
      linkedList0.add((String) null);
      boolean boolean0 = synchronizedCollection0.removeAll(synchronizedCollection0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SynchronizedCollection<String> synchronizedCollection0 = new SynchronizedCollection<String>(linkedList0, linkedList0);
      linkedList0.add("0DbQqE+\"$l=#g~bOGOk");
      boolean boolean0 = synchronizedCollection0.remove("0DbQqE+\"$l=#g~bOGOk");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      Iterator<Object> iterator0 = synchronizedCollection0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList0);
      Collection<Integer> collection0 = synchronizedCollection0.decorated();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer(0);
      linkedList0.add("ox{RFy[c~g4w@c");
      SynchronizedCollection<String> synchronizedCollection0 = new SynchronizedCollection<String>(linkedList0, integer0);
      boolean boolean0 = synchronizedCollection0.addAll(synchronizedCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add(0, (Object) "PJ.5q$uf;v");
      Object object0 = new Object();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0, object0);
      Integer[] integerArray0 = new Integer[7];
      // Undeclared exception!
      try { 
        synchronizedCollection0.toArray(integerArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.String
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SynchronizedCollection.synchronizedCollection((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.SynchronizedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0, "\"F(.*W?5=/n");
      // Undeclared exception!
      try { 
        synchronizedCollection0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = new SynchronizedCollection<Integer>(linkedList0, "");
      // Undeclared exception!
      try { 
        synchronizedCollection0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SynchronizedCollection<Integer>[] synchronizedCollectionArray0 = (SynchronizedCollection<Integer>[]) Array.newInstance(SynchronizedCollection.class, 3);
      // Undeclared exception!
      try { 
      //  ((SynchronizedCollection) synchronizedCollectionArray0).decorated();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.addAll((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      SynchronizedCollection<String> synchronizedCollection0 = new SynchronizedCollection<String>(linkedList0, linkedList0);
      boolean boolean0 = synchronizedCollection0.contains((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList0);
      int int0 = synchronizedCollection0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SynchronizedCollection<String> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<String>) linkedList0);
      Object[] objectArray0 = synchronizedCollection0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(3410);
      LinkedList<SynchronizedCollection<String>> linkedList0 = new LinkedList<SynchronizedCollection<String>>();
      SynchronizedCollection<SynchronizedCollection<String>> synchronizedCollection0 = new SynchronizedCollection<SynchronizedCollection<String>>(linkedList0, "");
      SynchronizedCollection<SynchronizedCollection<String>> synchronizedCollection1 = new SynchronizedCollection<SynchronizedCollection<String>>(synchronizedCollection0, integer0);
      boolean boolean0 = synchronizedCollection1.equals(synchronizedCollection0);
      assertTrue(boolean0);
      assertFalse(synchronizedCollection0.equals((Object)synchronizedCollection1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SynchronizedCollection<String> synchronizedCollection0 = new SynchronizedCollection<String>(linkedList0);
      SynchronizedCollection<String> synchronizedCollection1 = new SynchronizedCollection<String>(synchronizedCollection0, linkedList0);
      boolean boolean0 = synchronizedCollection0.equals(synchronizedCollection1);
      assertFalse(boolean0);
      assertTrue(synchronizedCollection1.equals((Object)synchronizedCollection0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection1 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList1);
      linkedList0.offerFirst(synchronizedCollection1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      SynchronizedCollection<String> synchronizedCollection2 = SynchronizedCollection.synchronizedCollection((Collection<String>) linkedList2);
      linkedList2.offerLast("JWT_uF/%sh;Lt");
      boolean boolean0 = synchronizedCollection2.retainAll(synchronizedCollection0);
      assertFalse(linkedList2.contains("JWT_uF/%sh;Lt"));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0);
      boolean boolean0 = synchronizedCollection0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SynchronizedCollection<String> synchronizedCollection0 = new SynchronizedCollection<String>(linkedList0);
      assertTrue(synchronizedCollection0.isEmpty());
      
      synchronizedCollection0.add("");
      boolean boolean0 = synchronizedCollection0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.offerLast("JWT_uF/%sh;Lt");
      boolean boolean0 = synchronizedCollection0.containsAll(linkedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0, "\"F(.*W?5=/n");
      linkedList0.add((Object) synchronizedCollection0);
      boolean boolean0 = synchronizedCollection0.retainAll(synchronizedCollection0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0);
      boolean boolean0 = synchronizedCollection0.contains(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList0);
      SynchronizedCollection<Integer> synchronizedCollection1 = null;
      try {
        synchronizedCollection1 = new SynchronizedCollection<Integer>(synchronizedCollection0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Lock must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.SynchronizedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SynchronizedCollection<String> synchronizedCollection0 = null;
      try {
        synchronizedCollection0 = new SynchronizedCollection<String>((Collection<String>) null, "java.util.LinkedList@0000000002");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.SynchronizedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SynchronizedCollection<String> synchronizedCollection0 = null;
      try {
        synchronizedCollection0 = new SynchronizedCollection<String>((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.SynchronizedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      synchronizedCollection0.add(linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0);
      synchronizedCollection0.clear();
      assertTrue(synchronizedCollection0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      boolean boolean0 = synchronizedCollection0.containsAll(synchronizedCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0);
      Object[] objectArray0 = new Object[6];
      Object[] objectArray1 = synchronizedCollection0.toArray(objectArray0);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0);
      boolean boolean0 = synchronizedCollection0.addAll(synchronizedCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0);
      String string0 = synchronizedCollection0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      synchronizedCollection0.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0);
      boolean boolean0 = synchronizedCollection0.removeAll(synchronizedCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      boolean boolean0 = synchronizedCollection0.remove(linkedList0);
      assertFalse(boolean0);
  }
}
