/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:01:45 GMT 2019
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.ClosureUtilsTest;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.ListUtils;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ListUtils_ESTest extends ListUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Predicate<LinkedList<Object>> predicate0 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = IdentityPredicate.identityPredicate((Object) predicate0);
      assertNotNull(predicate1);
      
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate1);
      assertNotNull(nullIsExceptionPredicate0);
      
      Predicate<LinkedList<Object>> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super LinkedList<Object>>) nullIsExceptionPredicate0);
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      boolean boolean0 = linkedList0.add((Object) nullIsExceptionPredicate0);
      assertFalse(predicate0.equals((Object)predicate2));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      List<Object> list0 = ListUtils.fixedSizeList((List<Object>) linkedList0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      List<Object> list1 = ListUtils.selectRejected((Collection<?>) linkedList0, (Predicate<? super Object>) predicate1);
      assertFalse(predicate0.equals((Object)predicate2));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      
      // Undeclared exception!
      try { 
        ListUtils.removeAll((Collection<Predicate<Object>>) null, (Collection<?>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      List<Integer> list0 = ListUtils.longestCommonSubsequence((List<Integer>) linkedList0, (List<Integer>) linkedList0, (Equator<? super Integer>) defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(integer0));
      
      List<Integer> list1 = ListUtils.synchronizedList((List<Integer>) linkedList0);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(1, linkedList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertTrue(linkedList0.contains(integer0));
      assertTrue(list1.contains(integer0));
      
      List<Integer> list2 = ListUtils.intersection((List<? extends Integer>) list0, (List<? extends Integer>) list1);
      assertNotSame(list0, list2);
      assertNotSame(list2, list0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertFalse(list0.equals((Object)list1));
      assertFalse(list1.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(linkedList0.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertTrue(list1.contains(integer0));
      assertFalse(list2.contains(integer0));
      
      List<Object> list3 = ListUtils.intersection((List<?>) list1, (List<?>) list1);
      assertFalse(list1.equals((Object)list2));
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list3);
      assertEquals(1, linkedList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      assertTrue(linkedList0.contains(integer0));
      assertTrue(list1.contains(integer0));
      assertTrue(list3.contains((-1)));
      
      List<List<Object>> list4 = ListUtils.partition(list3, 9);
      assertFalse(list1.equals((Object)list2));
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list4);
      assertEquals(1, linkedList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      assertEquals(1, list4.size());
      assertFalse(list4.isEmpty());
      assertFalse(linkedList0.contains(9));
      assertTrue(linkedList0.contains((-1)));
      assertTrue(list1.contains((-1)));
      assertFalse(list1.contains(9));
      assertTrue(list3.contains((-1)));
      assertFalse(list3.contains(9));
      assertTrue(list4.contains(list3));
      
      List<Integer> list5 = ListUtils.sum((List<? extends Integer>) linkedList0, (List<? extends Integer>) linkedList0);
      assertNotSame(list5, list2);
      assertNotSame(list5, list0);
      assertTrue(list5.equals((Object)list1));
      assertFalse(list5.equals((Object)list2));
      assertFalse(list5.equals((Object)list0));
      assertNotNull(list5);
      assertEquals(1, linkedList0.size());
      assertFalse(list5.isEmpty());
      assertEquals(1, list5.size());
      assertFalse(linkedList0.contains(9));
      assertTrue(linkedList0.contains((-1)));
      assertFalse(list5.contains(9));
      assertTrue(list5.contains((-1)));
      
      boolean boolean1 = ListUtils.isEqualList(list4, list1);
      assertTrue(list1.equals((Object)list5));
      assertFalse(list1.equals((Object)list2));
      assertFalse(list1.equals((Object)list0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      assertEquals(1, list4.size());
      assertFalse(list4.isEmpty());
      assertFalse(linkedList0.contains(9));
      assertTrue(linkedList0.contains((-1)));
      assertTrue(list1.contains((-1)));
      assertFalse(list1.contains(9));
      assertTrue(list3.contains((-1)));
      assertFalse(list3.contains(9));
      assertTrue(list4.contains(list3));
      
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer0).transform(any());
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<String> predicate0 = ComparatorPredicate.comparatorPredicate("u6m8tJ|04n'/I.}HvF", comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      assertNotNull(predicate0);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) predicate0, comparator1);
      assertNotNull(predicate1);
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      assertNotNull(nullIsTruePredicate0);
      
      Predicate<Object> predicate2 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) nullIsTruePredicate0);
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      int int0 = ListUtils.indexOf(list3, predicate2);
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertTrue(list1.equals((Object)list5));
      assertFalse(list1.equals((Object)list2));
      assertFalse(list1.equals((Object)list0));
      assertEquals(0, int0);
      assertEquals(1, linkedList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      assertFalse(linkedList0.contains(9));
      assertTrue(linkedList0.contains((-1)));
      assertTrue(list1.contains((-1)));
      assertFalse(list1.contains(9));
      assertTrue(list3.contains((-1)));
      assertFalse(list3.contains("u6m8tJ|04n'/I.}HvF"));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      List<Integer> list0 = ListUtils.longestCommonSubsequence((List<Integer>) linkedList0, (List<Integer>) linkedList0, (Equator<? super Integer>) defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(integer0));
      
      List<Integer> list1 = ListUtils.synchronizedList((List<Integer>) linkedList0);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(linkedList0.contains(integer0));
      assertTrue(list1.contains(integer0));
      
      List<Integer> list2 = ListUtils.intersection((List<? extends Integer>) list0, (List<? extends Integer>) list1);
      assertNotSame(list0, list2);
      assertNotSame(list2, list0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertFalse(list0.equals((Object)list1));
      assertFalse(list1.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(linkedList0.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertTrue(list1.contains(integer0));
      assertFalse(list2.contains(integer0));
      
      List<Object> list3 = ListUtils.intersection((List<?>) list1, (List<?>) list1);
      assertFalse(list1.equals((Object)list2));
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list3);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list3.size());
      assertFalse(list3.isEmpty());
      assertTrue(linkedList0.contains(integer0));
      assertTrue(list1.contains(integer0));
      assertTrue(list3.contains((-1)));
      
      List<List<Object>> list4 = new LinkedList<List<Object>>();
      assertNotNull(list4);
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertFalse(list4.contains(list3));
      
      List<Integer> list5 = ListUtils.sum((List<? extends Integer>) linkedList0, (List<? extends Integer>) linkedList0);
      assertNotSame(list5, list2);
      assertNotSame(list5, list0);
      assertFalse(list5.equals((Object)list2));
      assertTrue(list5.equals((Object)list1));
      assertFalse(list5.equals((Object)list0));
      assertNotNull(list5);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list5.size());
      assertFalse(list5.isEmpty());
      assertTrue(linkedList0.contains(integer0));
      assertTrue(list5.contains(integer0));
      
      boolean boolean1 = ListUtils.isEqualList(list4, list1);
      assertFalse(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list5));
      assertFalse(list1.equals((Object)list0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(linkedList0.contains(integer0));
      assertTrue(list1.contains(integer0));
      assertFalse(list4.contains(list3));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<List<Character>> list0 = new LinkedList<List<Character>>();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Object> list1 = ListUtils.unmodifiableList((List<?>) list0);
      assertNotNull(list1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<String> list2 = ListUtils.defaultIfNull((List<String>) null, (List<String>) null);
      assertNull(list2);
      
      boolean boolean0 = ListUtils.isEqualList((Collection<?>) null, list1);
      assertFalse(boolean0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      // Undeclared exception!
      try { 
        ListUtils.sum((List<? extends Character>) null, (List<? extends Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Transformer<String, Boolean> transformer0 = (Transformer<String, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer0).transform(anyString());
      Predicate<String> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super String, Boolean>) transformer0);
      assertNotNull(predicate0);
      
      linkedList0.addFirst(" must be less than size ");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(" must be less than size "));
      
      // Undeclared exception!
      try { 
        ListUtils.indexOf((List<String>) linkedList0, predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Integer> list0 = new LinkedList<Integer>();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Integer> list1 = ListUtils.defaultIfNull(list0, (List<Integer>) linkedList0);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Integer integer0 = new Integer(1722);
      assertEquals(1722, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.offer(integer0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(integer0));
      
      List<Integer> list2 = ListUtils.fixedSizeList(list1);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(linkedList0.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertFalse(list1.contains(integer0));
      assertFalse(list2.contains(integer0));
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      Predicate<LinkedList<Predicate<String>>> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      List<Integer> list3 = ListUtils.selectRejected((Collection<? extends Integer>) list2, (Predicate<? super Integer>) uniquePredicate0);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertNotNull(list3);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(linkedList0.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertFalse(list1.contains(integer0));
      assertFalse(list2.contains(integer0));
      assertFalse(list3.contains(integer0));
      
      boolean boolean1 = ListUtils.isEqualList(linkedList0, list2);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list3));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list3));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(linkedList0.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertFalse(list1.contains(integer0));
      assertFalse(list2.contains(integer0));
      
      int int0 = ListUtils.hashCodeForList(list2);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list3));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list3));
      assertEquals(1, int0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(linkedList0.contains(int0));
      assertTrue(linkedList0.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertFalse(list1.contains(integer0));
      assertFalse(list2.contains(integer0));
      
      int int1 = ListUtils.hashCodeForList(list0);
      assertSame(list0, list1);
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list3));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Object) "P_!$=`0CECu[|oi");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("P_!$=`0CECu[|oi"));
      
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      // Undeclared exception!
      try { 
        ListUtils.predicatedList((List<Object>) linkedList0, predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'P_!$=`0CECu[|oi' - Predicate 'org.apache.commons.collections4.functors.NullPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Character character0 = Character.valueOf('c');
      assertEquals('c', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isAlphabetic((-1589));
      assertFalse(boolean0);
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains((-1589)));
      
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains((-1589)));
      
      List<Integer> list0 = ListUtils.union((List<? extends Integer>) linkedList1, (List<? extends Integer>) linkedList2);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList2, linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertNotNull(list0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList1.contains((-1589)));
      assertFalse(linkedList2.contains((-1589)));
      assertFalse(list0.contains((-1589)));
      
      Integer integer0 = new Integer((-1589));
      assertEquals((-1589), (int)integer0);
      assertNotNull(integer0);
      
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      assertNotNull(constantFactory0);
      
      List<Integer> list1 = ListUtils.lazyList(list0, (Factory<? extends Integer>) constantFactory0);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList2, linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(linkedList1.contains(integer0));
      assertFalse(linkedList2.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertFalse(list1.contains(integer0));
      
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      List<Integer> list2 = ListUtils.transformedList(list1, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList2, linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(linkedList1.contains(integer0));
      assertFalse(linkedList2.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertFalse(list1.contains(integer0));
      assertFalse(list2.contains(integer0));
      
      List<Integer> list3 = ListUtils.longestCommonSubsequence(list2, (List<Integer>) linkedList2);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(list0, list3);
      assertNotSame(list3, list0);
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertNotNull(list3);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertFalse(linkedList1.contains(integer0));
      assertFalse(linkedList2.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertFalse(list1.contains(integer0));
      assertFalse(list2.contains(integer0));
      assertFalse(list3.contains(integer0));
      
      boolean boolean1 = linkedList0.retainAll(list3);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(list0, list3);
      assertNotSame(list3, list0);
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(list0.equals((Object)list3));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertFalse(linkedList0.contains(character0));
      assertFalse(linkedList1.contains(integer0));
      assertFalse(linkedList2.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertFalse(list1.contains(integer0));
      assertFalse(list2.contains(integer0));
      assertFalse(list3.contains(integer0));
      
      boolean boolean2 = Character.isIdeographic((-1589));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = Character.compare('P', 'A');
      assertEquals(15, int0);
      
      Character character1 = linkedList0.pollFirst();
      assertNull(character1);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(character0));
      
      boolean boolean3 = linkedList0.add((Character) null);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(character0));
      
      linkedList0.add(0, (Character) null);
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains(character0));
      
      boolean boolean4 = linkedList0.add(character0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      assertEquals(3, linkedList0.size());
      assertFalse(linkedList0.contains('P'));
      assertTrue(linkedList0.contains(character0));
      
      List<Object> list4 = ListUtils.intersection((List<?>) linkedList0, (List<?>) linkedList0);
      assertNotNull(list4);
      assertEquals(3, linkedList0.size());
      assertFalse(list4.isEmpty());
      assertEquals(2, list4.size());
      assertFalse(linkedList0.contains('P'));
      assertTrue(linkedList0.contains(character0));
      assertFalse(list4.contains((-1589)));
      assertTrue(list4.contains('c'));
      
      Transformer<Object, Boolean> transformer1 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn(true, (Object) null).when(transformer1).transform(any());
      Character character2 = linkedList0.poll();
      assertNull(character2);
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains('P'));
      assertTrue(linkedList0.contains(character0));
      
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer1);
      assertNotNull(transformerPredicate0);
      
      // Undeclared exception!
      try { 
        ListUtils.select((Collection<? extends Character>) linkedList0, (Predicate<? super Character>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      List<LinkedList<Integer>> list0 = ListUtils.longestCommonSubsequence((List<LinkedList<Integer>>) linkedList0, (List<LinkedList<Integer>>) linkedList0, (Equator<? super LinkedList<Integer>>) defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<LinkedList<Integer>> list1 = ListUtils.emptyIfNull(list0);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<LinkedList<Integer>> list2 = ListUtils.emptyIfNull(list1);
      assertSame(list0, list1);
      assertSame(list0, list2);
      assertSame(list1, list2);
      assertSame(list1, list0);
      assertSame(list2, list1);
      assertSame(list2, list0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      List<LinkedList<Integer>> list3 = ListUtils.longestCommonSubsequence(list2, (List<LinkedList<Integer>>) linkedList0);
      assertNotSame(list0, list3);
      assertSame(list0, list1);
      assertSame(list0, list2);
      assertSame(list1, list2);
      assertSame(list1, list0);
      assertNotSame(list1, list3);
      assertNotSame(list2, list3);
      assertSame(list2, list1);
      assertSame(list2, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertNotNull(list3);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      
      LinkedList<Predicate<Object>> linkedList1 = new LinkedList<Predicate<Object>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = linkedList1.add(predicate0);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(predicate0));
      
      // Undeclared exception!
      try { 
        ListUtils.lazyList((List<Predicate<Object>>) linkedList1, (Factory<? extends Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factory must not be null
         //
         verifyException("org.apache.commons.collections4.list.LazyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(879);
      assertEquals(879, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(integer0));
      
      List<Integer> list0 = ListUtils.subtract((List<Integer>) linkedList0, (List<? extends Integer>) linkedList0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedList0.contains(integer0));
      assertFalse(list0.contains(integer0));
      
      boolean boolean1 = ListUtils.isEqualList(linkedList0, linkedList0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(integer0));
      
      List<Object> list1 = ListUtils.union((List<?>) list0, (List<?>) list0);
      assertNotNull(list1);
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(linkedList0.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertFalse(list1.contains(879));
      
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      assertNotNull(identityPredicate0);
      
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) identityPredicate0);
      assertNotNull(predicate0);
      
      List<Object> list2 = ListUtils.predicatedList(list1, predicate0);
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(linkedList0.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertFalse(list1.contains(879));
      assertFalse(list2.contains(879));
      
      List<Object> list3 = ListUtils.predicatedList(list2, predicate0);
      assertNotSame(list2, list3);
      assertNotSame(list3, list2);
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertNotNull(list3);
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(linkedList0.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertFalse(list1.contains(879));
      assertFalse(list2.contains(879));
      assertFalse(list3.contains(879));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Object> list0 = null;
      Predicate<Object> predicate0 = null;
      int int0 = ListUtils.indexOf((List<Object>) null, (Predicate<Object>) null);
      assertEquals((-1), int0);
      
      Collection<Character> collection0 = null;
      // Undeclared exception!
      try { 
        ListUtils.selectRejected((Collection<? extends Character>) null, (Predicate<? super Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<String> list0 = ListUtils.defaultIfNull((List<String>) null, (List<String>) null);
      assertNull(list0);
      
      boolean boolean0 = ListUtils.isEqualList((Collection<?>) null, (Collection<?>) null);
      assertTrue(boolean0);
      
      Predicate<String> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      int int0 = ListUtils.indexOf((List<String>) null, predicate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<LinkedList<Integer>> list0 = null;
      List<LinkedList<Integer>> list1 = ListUtils.emptyIfNull((List<LinkedList<Integer>>) null);
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<Object> list2 = null;
      List<Object> list3 = ListUtils.emptyIfNull((List<Object>) null);
      assertNotNull(list3);
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence(list3, (List<Object>) null, (Equator<? super Object>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = "";
      boolean boolean0 = linkedList0.add("");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      
      List<String> list0 = ListUtils.sum((List<? extends String>) linkedList0, (List<? extends String>) linkedList0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(""));
      assertTrue(list0.contains(""));
      
      LinkedList<Character> linkedList1 = new LinkedList<Character>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      List<Character> list1 = ListUtils.intersection((List<? extends Character>) linkedList1, (List<? extends Character>) linkedList1);
      assertNotNull(list1);
      assertEquals(0, linkedList1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) list0;
      objectArray0[1] = (Object) list0;
      objectArray0[2] = (Object) list1;
      objectArray0[3] = (Object) list0;
      objectArray0[4] = (Object) list0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) list0;
      Object[] objectArray1 = linkedList1.toArray(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertNotNull(objectArray1);
      assertEquals(0, linkedList1.size());
      
      Character character0 = new Character('d');
      assertEquals('d', (char)character0);
      assertNotNull(character0);
      
      boolean boolean1 = linkedList1.add(character0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(character0));
      
      List<Character> list2 = ListUtils.longestCommonSubsequence(list1, (List<Character>) linkedList1);
      assertNotSame(list2, list1);
      assertNotSame(list1, list2);
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(1, linkedList1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(list2.contains(character0));
      assertTrue(linkedList1.contains(character0));
      assertFalse(list1.contains(character0));
      
      // Undeclared exception!
      try { 
        linkedList1.forEach((Consumer<? super Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Integer> list0 = ListUtils.removeAll((Collection<Integer>) linkedList0, (Collection<?>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Integer> list1 = ListUtils.defaultIfNull(list0, (List<Integer>) linkedList0);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<Integer> list2 = ListUtils.fixedSizeList(list1);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      Predicate<LinkedList<Predicate<String>>> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      List<Integer> list3 = ListUtils.selectRejected((Collection<? extends Integer>) list2, (Predicate<? super Integer>) uniquePredicate0);
      assertSame(list0, list1);
      assertNotSame(list0, list3);
      assertSame(list1, list0);
      assertNotSame(list1, list3);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list1));
      assertNotNull(list3);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      
      boolean boolean0 = ListUtils.isEqualList(linkedList0, list2);
      assertSame(list0, list1);
      assertNotSame(list0, list3);
      assertSame(list1, list0);
      assertNotSame(list1, list3);
      assertTrue(list0.equals((Object)list3));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list2.equals((Object)list0));
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      int int0 = ListUtils.hashCodeForList(list2);
      assertSame(list0, list1);
      assertNotSame(list0, list3);
      assertSame(list1, list0);
      assertNotSame(list1, list3);
      assertTrue(list0.equals((Object)list3));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list2.equals((Object)list0));
      assertEquals(1, int0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(linkedList0.contains(int0));
      assertFalse(list0.contains(int0));
      assertFalse(list1.contains(int0));
      assertFalse(list2.contains(int0));
      
      int int1 = ListUtils.hashCodeForList(list0);
      assertSame(list0, list1);
      assertNotSame(list0, list3);
      assertTrue(list0.equals((Object)list3));
      assertTrue(list0.equals((Object)list2));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(int1));
      assertFalse(list0.contains(int1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      assertNotNull(constantFactory0);
      
      // Undeclared exception!
      try { 
        ListUtils.lazyList((List<Integer>) null, (Factory<? extends Integer>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = ListUtils.isEqualList(linkedList0, linkedList0);
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      
      List<Object> list0 = ListUtils.union((List<?>) linkedList0, (List<?>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Object> list1 = ListUtils.synchronizedList(list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      LinkedList<Character> linkedList1 = new LinkedList<Character>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Character character0 = Character.valueOf('j');
      assertEquals('j', (char)character0);
      assertNotNull(character0);
      
      ConstantFactory<Character> constantFactory0 = new ConstantFactory<Character>(character0);
      assertNotNull(constantFactory0);
      
      List<Character> list2 = ListUtils.lazyList((List<Character>) linkedList1, (Factory<? extends Character>) constantFactory0);
      assertNotNull(list2);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(linkedList1.contains('j'));
      assertFalse(list2.contains('j'));
      
      ClosureUtilsTest.MockTransformer<Character> closureUtilsTest_MockTransformer0 = new ClosureUtilsTest.MockTransformer<Character>();
      assertNotNull(closureUtilsTest_MockTransformer0);
      
      List<Character> list3 = ListUtils.transformedList(list2, (Transformer<? super Character, ? extends Character>) closureUtilsTest_MockTransformer0);
      assertTrue(list3.equals((Object)list2));
      assertNotNull(list3);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertFalse(linkedList1.contains('j'));
      assertFalse(list2.contains('j'));
      assertFalse(list3.contains('j'));
      
      Predicate<Character> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      int int0 = ListUtils.indexOf(list3, predicate0);
      assertTrue(list2.equals((Object)list3));
      assertTrue(list3.equals((Object)list2));
      assertEquals((-1), int0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertFalse(linkedList1.contains('j'));
      assertFalse(list2.contains('j'));
      assertFalse(list3.contains('j'));
      
      int int1 = ListUtils.indexOf(list0, (Predicate<Object>) null);
      assertTrue(list0.equals((Object)list1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(int0));
      assertFalse(list0.contains('j'));
      
      // Undeclared exception!
      try { 
        ListUtils.predicatedList(list0, (Predicate<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Object> list0 = ListUtils.selectRejected((Collection<?>) linkedList0, (Predicate<? super Object>) null);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Character character0 = new Character('p');
      assertEquals('p', (char)character0);
      assertNotNull(character0);
      
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(character0);
      assertNotNull(constantFactory0);
      
      List<Object> list1 = ListUtils.lazyList(list0, (Factory<?>) constantFactory0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(list0.contains('p'));
      assertFalse(list1.contains('p'));
      
      int int0 = ListUtils.indexOf(list1, (Predicate<Object>) null);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertEquals((-1), int0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(list0.contains('p'));
      assertFalse(list1.contains('p'));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      List<Integer> list0 = ListUtils.longestCommonSubsequence((List<Integer>) linkedList0, (List<Integer>) linkedList0, (Equator<? super Integer>) defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((-1)));
      
      List<Integer> list1 = ListUtils.synchronizedList((List<Integer>) linkedList0);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(1, linkedList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertTrue(linkedList0.contains((-1)));
      assertTrue(list1.contains((-1)));
      
      List<Integer> list2 = ListUtils.intersection((List<? extends Integer>) list0, (List<? extends Integer>) list1);
      assertNotSame(list0, list2);
      assertNotSame(list2, list0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertFalse(list0.equals((Object)list1));
      assertFalse(list1.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(linkedList0.contains((-1)));
      assertFalse(list0.contains((-1)));
      assertTrue(list1.contains((-1)));
      assertFalse(list2.contains((-1)));
      
      List<Object> list3 = ListUtils.intersection((List<?>) list1, (List<?>) list1);
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.equals((Object)list2));
      assertNotNull(list3);
      assertEquals(1, linkedList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(1, list3.size());
      assertFalse(list3.isEmpty());
      assertTrue(linkedList0.contains((-1)));
      assertTrue(list1.contains((-1)));
      assertTrue(list3.contains((-1)));
      
      // Undeclared exception!
      try { 
        ListUtils.partition(list3, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Collection<String> collection0 = null;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = IdentityPredicate.identityPredicate((Object) predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      predicateArray0[1] = predicate1;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertNotNull(notPredicate0);
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(notPredicate0, uniquePredicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertNotNull(orPredicate0);
      
      predicateArray0[2] = (Predicate<Object>) orPredicate0;
      Predicate<Object> predicate2 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      // Undeclared exception!
      try { 
        ListUtils.select((Collection<?>) null, (Predicate<? super Object>) predicate2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Equator<Object> equator0 = null;
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((List<LinkedList<Integer>>) linkedList0, (List<LinkedList<Integer>>) linkedList0, (Equator<? super LinkedList<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Equator must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      DefaultEquator<String> defaultEquator1 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator1);
      
      boolean boolean0 = linkedList0.add((Integer) (-1));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((-1)));
      
      DefaultEquator<String> defaultEquator2 = DefaultEquator.defaultEquator();
      assertSame(defaultEquator2, defaultEquator1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator2);
      
      List<Integer> list0 = ListUtils.longestCommonSubsequence((List<Integer>) linkedList0, (List<Integer>) linkedList0, (Equator<? super Integer>) defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains((-1)));
      assertTrue(list0.contains((-1)));
      
      // Undeclared exception!
      try { 
        ListUtils.sum((List<? extends Predicate<Object>>) null, (List<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(object0));
      
      List<Object> list0 = ListUtils.emptyIfNull((List<Object>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(object0));
      assertFalse(list0.contains(object0));
      
      boolean boolean0 = linkedList0.retainAll(list0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(object0));
      assertFalse(list0.contains(object0));
      
      boolean boolean1 = linkedList0.add(object0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(object0));
      
      boolean boolean2 = linkedList0.add((Object) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(object0));
      
      List<Object> list1 = ListUtils.longestCommonSubsequence((List<Object>) linkedList0, (List<Object>) linkedList0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(2, linkedList0.size());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(linkedList0.contains(object0));
      assertTrue(list1.contains(object0));
      
      // Undeclared exception!
      try { 
        ListUtils.union((List<? extends Character>) null, (List<? extends Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("pq!");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("pq!"));
      
      boolean boolean1 = linkedList0.add("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      
      boolean boolean2 = linkedList0.offer("I");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(3, linkedList0.size());
      assertTrue(linkedList0.contains("I"));
      
      boolean boolean3 = linkedList0.add("");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(4, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      
      LinkedList linkedList1 = (LinkedList)linkedList0.clone();
      assertNotNull(linkedList1);
      assertEquals(4, linkedList0.size());
      assertEquals(4, linkedList1.size());
      assertTrue(linkedList0.contains(""));
      
      List<String> list0 = ListUtils.defaultIfNull((List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(list0);
      assertEquals(4, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertTrue(linkedList0.contains(""));
      assertTrue(list0.contains(""));
      
      int int0 = ListUtils.hashCodeForList(linkedList0);
      assertEquals(955331, int0);
      assertEquals(4, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      
      List<String> list1 = ListUtils.fixedSizeList((List<String>) linkedList0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(4, linkedList0.size());
      assertEquals(4, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(linkedList0.contains(""));
      assertTrue(list1.contains(""));
      
      LinkedList<Character> linkedList2 = new LinkedList<Character>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      // Undeclared exception!
      try { 
        linkedList2.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = ListUtils.unmodifiableList((List<? extends String>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = ListUtils.retainAll((Collection<String>) list0, (Collection<?>) linkedList0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<Object> list2 = ListUtils.unmodifiableList((List<?>) list1);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      List<Object> list3 = ListUtils.removeAll((Collection<Object>) list2, (Collection<?>) list1);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertNotNull(list3);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      
      List<Object> list4 = ListUtils.retainAll((Collection<Object>) list3, (Collection<?>) linkedList0);
      assertNotSame(list3, list4);
      assertNotSame(list4, list3);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list4.equals((Object)list3));
      assertNotNull(list4);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      
      // Undeclared exception!
      try { 
        ListUtils.removeAll((Collection<Predicate<Object>>) null, (Collection<?>) list2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Predicate<Object>> list0 = ListUtils.union((List<? extends Predicate<Object>>) linkedList0, (List<? extends Predicate<Object>>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      List<Predicate<Object>> list1 = ListUtils.longestCommonSubsequence(list0, list0, (Equator<? super Predicate<Object>>) defaultEquator0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<Predicate<Object>> list2 = ListUtils.retainAll((Collection<Predicate<Object>>) list1, (Collection<?>) list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence(list2, (List<Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ListUtils.transformedList((List<Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add((Object) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains((-1)));
      
      boolean boolean1 = linkedList0.add((Object) integer0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains((-1)));
      
      List<Object> list0 = ListUtils.emptyIfNull((List<Object>) linkedList0);
      assertNotNull(list0);
      assertEquals(2, linkedList0.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains((-1)));
      assertTrue(list0.contains((-1)));
      
      List<Character> list1 = null;
      // Undeclared exception!
      try { 
        ListUtils.sum((List<? extends Character>) null, (List<? extends Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = ListUtils.subtract((List<String>) linkedList0, (List<? extends String>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = ListUtils.emptyIfNull(list0);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      assertNotNull(anyPredicate0);
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(anyPredicate0);
      assertNotNull(nullIsTruePredicate0);
      
      List<String> list2 = ListUtils.selectRejected((Collection<? extends String>) list1, (Predicate<? super String>) nullIsTruePredicate0);
      assertNotSame(list0, list2);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      // Undeclared exception!
      try { 
        NonePredicate.nonePredicate((Predicate<? super Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      assertEquals(0, predicateArray0.length);
      assertNotNull(onePredicate0);
      
      List<LinkedList<Object>> list0 = ListUtils.selectRejected((Collection<? extends LinkedList<Object>>) linkedList0, (Predicate<? super LinkedList<Object>>) onePredicate0);
      assertEquals(0, predicateArray0.length);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Character> list0 = ListUtils.fixedSizeList((List<Character>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Character> list1 = ListUtils.fixedSizeList(list0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<Character> list2 = ListUtils.synchronizedList(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      List<Character> list3 = ListUtils.emptyIfNull(list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertSame(list2, list3);
      assertSame(list3, list2);
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list1));
      assertNotNull(list3);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      
      char char0 = '(';
      Character character0 = Character.valueOf('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      Comparator<Character> comparator0 = (Comparator<Character>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 647;
      char char1 = Character.highSurrogate(647);
      assertFalse(char1 == char0);
      assertEquals('\uD7C0', char1);
      
      Predicate<Character> predicate0 = ComparatorPredicate.comparatorPredicate(character0, comparator0);
      assertFalse(character0.equals((Object)char1));
      assertNotNull(predicate0);
      
      List<Character> list4 = ListUtils.select((Collection<? extends Character>) list3, (Predicate<? super Character>) predicate0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertSame(list2, list3);
      assertSame(list3, list2);
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list3));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list1));
      assertFalse(character0.equals((Object)char1));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list4.equals((Object)list0));
      assertTrue(list4.equals((Object)list1));
      assertTrue(list4.equals((Object)list3));
      assertNotNull(list4);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertFalse(linkedList0.contains(char1));
      assertFalse(list0.contains(char1));
      assertFalse(list1.contains(char1));
      assertFalse(list2.contains(char1));
      assertFalse(list3.contains(char1));
      assertFalse(list4.contains(char1));
      
      List<Object> list5 = null;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      assertNotNull(predicate1);
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      assertNotNull(nullIsTruePredicate0);
      
      Predicate<Character> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Character>) nullIsTruePredicate0);
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      // Undeclared exception!
      try { 
        ListUtils.predicatedList((List<Object>) null, (Predicate<Object>) nullIsTruePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      List<Character> list0 = null;
      // Undeclared exception!
      try { 
        ListUtils.synchronizedList((List<Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Integer> list0 = ListUtils.fixedSizeList((List<Integer>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Integer> list1 = ListUtils.fixedSizeList(list0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<Integer> list2 = ListUtils.subtract(list0, (List<? extends Integer>) list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      List<Integer> list3 = ListUtils.synchronizedList(list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertNotNull(list3);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      
      List<Object> list4 = ListUtils.intersection((List<?>) list2, (List<?>) list3);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list0.equals((Object)list3));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertNotNull(list4);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      
      // Undeclared exception!
      try { 
        ListUtils.retainAll((Collection<String>) null, (Collection<?>) list1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Predicate<Object>> list0 = ListUtils.unmodifiableList((List<? extends Predicate<Object>>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Predicate<Object>> list1 = ListUtils.intersection((List<? extends Predicate<Object>>) list0, (List<? extends Predicate<Object>>) list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<Predicate<Object>> list2 = ListUtils.retainAll((Collection<Predicate<Object>>) list1, (Collection<?>) linkedList0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.retainAll((Collection<String>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((List<Integer>) null, (List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.union((List<? extends Integer>) null, (List<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Character character0 = Character.valueOf('*');
      assertEquals('*', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = linkedList0.add((Object) character0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains('*'));
      
      int int0 = ListUtils.hashCodeForList(linkedList0);
      assertEquals(32, int0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains('*'));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      List<String> list0 = ListUtils.emptyIfNull((List<String>) null);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ClosureUtilsTest.MockTransformer<String> closureUtilsTest_MockTransformer0 = new ClosureUtilsTest.MockTransformer<String>();
      assertNotNull(closureUtilsTest_MockTransformer0);
      
      List<String> list1 = ListUtils.transformedList(list0, (Transformer<? super String, ? extends String>) closureUtilsTest_MockTransformer0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      int int0 = 295;
      List<List<String>> list2 = ListUtils.partition(list1, 295);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(list2.contains(list0));
      
      // Undeclared exception!
      try { 
        ListUtils.sum((List<?>) null, (List<?>) list1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Character character0 = new Character('$');
      assertEquals('$', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = linkedList0.add(character0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(character0));
      
      // Undeclared exception!
      try { 
        ListUtils.partition((List<Character>) linkedList0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("Q%u-.wR#OA;a,");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("Q%u-.wR#OA;a,"));
      
      List<Object> list0 = ListUtils.union((List<?>) linkedList0, (List<?>) linkedList0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains("Q%u-.wR#OA;a,"));
      assertTrue(list0.contains("Q%u-.wR#OA;a,"));
      
      List<String> list1 = ListUtils.intersection((List<? extends String>) linkedList0, (List<? extends String>) linkedList0);
      assertNotNull(list1);
      assertEquals(1, linkedList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertTrue(linkedList0.contains("Q%u-.wR#OA;a,"));
      assertTrue(list1.contains("Q%u-.wR#OA;a,"));
      
      String string0 = ListUtils.longestCommonSubsequence((CharSequence) "Q%u-.wR#OA;a,", (CharSequence) "Q%u-.wR#OA;a,");
      assertEquals("Q%u-.wR#OA;a,", string0);
      assertNotNull(string0);
      
      String string1 = ListUtils.longestCommonSubsequence((CharSequence) "Q%u-.wR#OA;a,", (CharSequence) "Q%u-.wR#OA;a,");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Q%u-.wR#OA;a,", string1);
      assertNotNull(string1);
      
      List<String> list2 = ListUtils.sum((List<? extends String>) list1, (List<? extends String>) linkedList0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertEquals(1, linkedList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertTrue(linkedList0.contains("Q%u-.wR#OA;a,"));
      assertTrue(list1.contains("Q%u-.wR#OA;a,"));
      assertTrue(list2.contains("Q%u-.wR#OA;a,"));
      
      Transformer<Object, Object> transformer0 = null;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Character character0 = Character.valueOf('{');
      assertEquals('{', (char)character0);
      assertNotNull(character0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) character0, comparator0);
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      predicateArray0[1] = predicate1;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(predicate1, comparator1, comparatorPredicate_Criterion0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(comparatorPredicate0);
      
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      // Undeclared exception!
      try { 
        AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not contain a null predicate, index 3 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      List<Character> list0 = null;
      // Undeclared exception!
      try { 
        ListUtils.subtract((List<Character>) null, (List<? extends Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '+';
      charArray0[2] = 'I';
      charArray0[3] = '!';
      charArray0[4] = 'Q';
      charArray0[5] = '-';
      charArray0[6] = '{';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'&', '+', 'I', '!', 'Q', '-', '{'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("&+I!Q-{", charBuffer0.toString());
      assertEquals(7, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.limit());
      
      String string0 = ListUtils.longestCommonSubsequence((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'&', '+', 'I', '!', 'Q', '-', '{'}, charArray0);
      assertEquals("&+I!Q-{", string0);
      assertNotNull(string0);
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("&+I!Q-{", charBuffer0.toString());
      assertEquals(7, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      List<Object> list0 = null;
      List<Object> list1 = ListUtils.emptyIfNull((List<Object>) null);
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<Object> list2 = ListUtils.emptyIfNull(list1);
      assertSame(list1, list2);
      assertSame(list2, list1);
      assertNotNull(list2);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      int int0 = ListUtils.hashCodeForList((Collection<?>) null);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CharSequence must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      List<Integer> list0 = null;
      // Undeclared exception!
      try { 
        ListUtils.partition((List<Integer>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CharSequence must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      List<String> list0 = null;
      List<String> list1 = ListUtils.defaultIfNull((List<String>) null, (List<String>) null);
      assertNull(list1);
      
      // Undeclared exception!
      try { 
        ListUtils.partition((List<String>) null, 628);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CharSequence must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Character> list0 = ListUtils.fixedSizeList((List<Character>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        ListUtils.unmodifiableList((List<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Character character0 = Character.valueOf('c');
      assertEquals('c', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = Character.isAlphabetic((-1589));
      assertFalse(boolean0);
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains((-1589)));
      
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains((-1589)));
      
      List<Integer> list0 = ListUtils.union((List<? extends Integer>) linkedList1, (List<? extends Integer>) linkedList2);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList2, linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertNotNull(list0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList1.contains((-1589)));
      assertFalse(linkedList2.contains((-1589)));
      assertFalse(list0.contains((-1589)));
      
      Integer integer0 = new Integer((-1589));
      assertEquals((-1589), (int)integer0);
      assertNotNull(integer0);
      
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      assertNotNull(constantFactory0);
      
      List<Integer> list1 = ListUtils.lazyList(list0, (Factory<? extends Integer>) constantFactory0);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList2, linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(linkedList1.contains(integer0));
      assertFalse(linkedList2.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertFalse(list1.contains(integer0));
      
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      List<Integer> list2 = ListUtils.transformedList(list1, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList2, linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(linkedList1.contains(integer0));
      assertFalse(linkedList2.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertFalse(list1.contains(integer0));
      assertFalse(list2.contains(integer0));
      
      List<Integer> list3 = ListUtils.longestCommonSubsequence(list2, (List<Integer>) linkedList2);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(list0, list3);
      assertNotSame(list3, list0);
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertNotNull(list3);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertFalse(linkedList1.contains(integer0));
      assertFalse(linkedList2.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertFalse(list1.contains(integer0));
      assertFalse(list2.contains(integer0));
      assertFalse(list3.contains(integer0));
      
      boolean boolean1 = linkedList0.retainAll(list3);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(list0, list3);
      assertNotSame(list3, list0);
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(list0.equals((Object)list3));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertFalse(linkedList0.contains('c'));
      assertFalse(linkedList1.contains(integer0));
      assertFalse(linkedList2.contains(integer0));
      assertFalse(list0.contains(integer0));
      assertFalse(list1.contains(integer0));
      assertFalse(list2.contains(integer0));
      assertFalse(list3.contains(integer0));
      
      boolean boolean2 = Character.isIdeographic((-1589));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Character character1 = linkedList0.pollFirst();
      assertNull(character1);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('c'));
      
      boolean boolean3 = linkedList0.add((Character) null);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains('c'));
      
      linkedList0.add(0, (Character) null);
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains('c'));
      
      boolean boolean4 = linkedList0.add(character0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      assertEquals(3, linkedList0.size());
      assertTrue(linkedList0.contains('c'));
      
      List<Object> list4 = ListUtils.intersection((List<?>) linkedList0, (List<?>) linkedList0);
      assertNotNull(list4);
      assertEquals(3, linkedList0.size());
      assertFalse(list4.isEmpty());
      assertEquals(2, list4.size());
      assertTrue(linkedList0.contains('c'));
      assertTrue(list4.contains('c'));
      assertFalse(list4.contains(0));
      
      Transformer<Object, Boolean> transformer1 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer1).transform(any());
      Character character2 = linkedList0.poll();
      assertNull(character2);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains('c'));
      
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer1);
      assertNotNull(transformerPredicate0);
      
      // Undeclared exception!
      try { 
        ListUtils.select((Collection<? extends Character>) linkedList0, (Predicate<? super Character>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      List<Predicate<Object>> list0 = null;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      DefaultEquator<String> defaultEquator1 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator1);
      
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((List<Predicate<Object>>) null, (List<Predicate<Object>>) null, (Equator<? super Predicate<Object>>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((List<Object>) null, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Character character0 = new Character('$');
      assertEquals('$', (char)character0);
      assertNotNull(character0);
      
      ConstantFactory<Character> constantFactory0 = new ConstantFactory<Character>(character0);
      assertNotNull(constantFactory0);
      
      List<Character> list0 = ListUtils.lazyList((List<Character>) linkedList0, (Factory<? extends Character>) constantFactory0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(character0));
      assertFalse(list0.contains(character0));
      
      List<Character> list1 = ListUtils.synchronizedList(list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(linkedList0.contains(character0));
      assertFalse(list0.contains(character0));
      assertFalse(list1.contains(character0));
      
      AnyPredicate<Character> anyPredicate0 = new AnyPredicate<Character>((Predicate<? super Character>[]) null);
      assertNotNull(anyPredicate0);
      
      List<Character> list2 = ListUtils.predicatedList(list1, (Predicate<Character>) anyPredicate0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(linkedList0.contains(character0));
      assertFalse(list0.contains(character0));
      assertFalse(list1.contains(character0));
      assertFalse(list2.contains(character0));
      
      List<Character> list3 = ListUtils.emptyIfNull(list2);
      assertSame(list2, list3);
      assertSame(list3, list2);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertNotNull(list3);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertFalse(linkedList0.contains(character0));
      assertFalse(list0.contains(character0));
      assertFalse(list1.contains(character0));
      assertFalse(list2.contains(character0));
      assertFalse(list3.contains(character0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = ListUtils.subtract((List<String>) linkedList0, (List<? extends String>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<String> list1 = ListUtils.union((List<? extends String>) list0, (List<? extends String>) linkedList0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      LinkedList<Character> linkedList1 = new LinkedList<Character>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      List<Character> list2 = ListUtils.subtract((List<Character>) linkedList1, (List<? extends Character>) linkedList1);
      assertNotNull(list2);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      List<Character> list3 = ListUtils.union((List<? extends Character>) list2, (List<? extends Character>) list2);
      assertNotSame(list2, list3);
      assertNotSame(list3, list2);
      assertTrue(list3.equals((Object)list2));
      assertNotNull(list3);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      
      List<Character> list4 = ListUtils.defaultIfNull(list3, (List<Character>) linkedList1);
      assertNotSame(list2, list4);
      assertNotSame(list2, list3);
      assertNotSame(list3, list2);
      assertSame(list3, list4);
      assertNotSame(list4, list2);
      assertSame(list4, list3);
      assertTrue(list2.equals((Object)list3));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list4.equals((Object)list2));
      assertNotNull(list4);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      
      List<Character> list5 = ListUtils.removeAll((Collection<Character>) list4, (Collection<?>) list3);
      assertNotSame(list2, list4);
      assertNotSame(list2, list5);
      assertNotSame(list2, list3);
      assertNotSame(list3, list2);
      assertSame(list3, list4);
      assertNotSame(list3, list5);
      assertNotSame(list4, list2);
      assertNotSame(list4, list5);
      assertSame(list4, list3);
      assertNotSame(list5, list4);
      assertNotSame(list5, list2);
      assertNotSame(list5, list3);
      assertTrue(list2.equals((Object)list3));
      assertTrue(list2.equals((Object)list4));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list5.equals((Object)list2));
      assertTrue(list5.equals((Object)list4));
      assertTrue(list5.equals((Object)list3));
      assertNotNull(list5);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertTrue(list5.isEmpty());
      assertEquals(0, list5.size());
      
      List<Character> list6 = ListUtils.subtract(list5, (List<? extends Character>) list2);
      assertNotSame(list2, list4);
      assertNotSame(list2, list5);
      assertNotSame(list2, list6);
      assertNotSame(list2, list3);
      assertNotSame(list3, list2);
      assertSame(list3, list4);
      assertNotSame(list3, list5);
      assertNotSame(list3, list6);
      assertNotSame(list4, list2);
      assertNotSame(list4, list5);
      assertNotSame(list4, list6);
      assertSame(list4, list3);
      assertNotSame(list5, list4);
      assertNotSame(list5, list6);
      assertNotSame(list5, list2);
      assertNotSame(list5, list3);
      assertNotSame(list6, list2);
      assertNotSame(list6, list3);
      assertNotSame(list6, list5);
      assertNotSame(list6, list4);
      assertTrue(list2.equals((Object)list3));
      assertTrue(list2.equals((Object)list5));
      assertTrue(list2.equals((Object)list4));
      assertTrue(list3.equals((Object)list5));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list4.equals((Object)list5));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list5.equals((Object)list2));
      assertTrue(list5.equals((Object)list4));
      assertTrue(list5.equals((Object)list3));
      assertTrue(list6.equals((Object)list4));
      assertTrue(list6.equals((Object)list5));
      assertTrue(list6.equals((Object)list3));
      assertTrue(list6.equals((Object)list2));
      assertNotNull(list6);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertTrue(list5.isEmpty());
      assertEquals(0, list5.size());
      assertTrue(list6.isEmpty());
      assertEquals(0, list6.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Object> list0 = ListUtils.emptyIfNull((List<Object>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      String string0 = linkedList1.poll();
      assertNull(string0);
      assertEquals(0, linkedList1.size());
      
      List<Object> list1 = ListUtils.sum((List<?>) list0, (List<?>) linkedList1);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, linkedList1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<Object> list2 = ListUtils.unmodifiableList((List<?>) linkedList0);
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      List<Object> list3 = ListUtils.subtract(list2, (List<?>) list2);
      assertNotSame(list3, list1);
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertNotNull(list3);
      assertEquals(0, linkedList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      
      List<String> list4 = ListUtils.subtract((List<String>) linkedList1, (List<? extends String>) linkedList1);
      assertNotNull(list4);
      assertEquals(0, linkedList1.size());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        ListUtils.union((List<?>) linkedList0, (List<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        ListUtils.sum((List<? extends String>) null, (List<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Collection<String> collection0 = null;
      int int0 = ListUtils.hashCodeForList((Collection<?>) null);
      assertEquals(0, int0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      assertNotNull(comparatorPredicate0);
      
      LinkedList<String> linkedList0 = null;
      Comparator<LinkedList<String>> comparator1 = (Comparator<LinkedList<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<LinkedList<String>> predicate0 = ComparatorPredicate.comparatorPredicate((LinkedList<String>) null, comparator1);
      assertNotNull(predicate0);
      
      Comparator<LinkedList<String>> comparator2 = (Comparator<LinkedList<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<LinkedList<String>> predicate1 = ComparatorPredicate.comparatorPredicate((LinkedList<String>) null, comparator2);
      assertNotSame(predicate1, predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) comparatorPredicate0);
      assertNotNull(predicate2);
      
      // Undeclared exception!
      try { 
        ListUtils.selectRejected((Collection<? extends String>) null, (Predicate<? super String>) predicate2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      List<Integer> list0 = null;
      // Undeclared exception!
      try { 
        ListUtils.fixedSizeList((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.intersection((List<? extends String>) null, (List<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        ListUtils.removeAll((Collection<String>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = ListUtils.isEqualList((Collection<?>) null, (Collection<?>) null);
      assertTrue(boolean0);
      
      int int0 = ListUtils.hashCodeForList((Collection<?>) null);
      assertEquals(0, int0);
      
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      // Undeclared exception!
      try { 
        ListUtils.selectRejected((Collection<?>) null, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.fixedSizeList((List<Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      
      String string0 = ListUtils.longestCommonSubsequence((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      
      List<Object> list0 = ListUtils.removeAll((Collection<Object>) linkedList0, (Collection<?>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(0));
      assertFalse(list0.contains(0));
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      List<Object> list1 = ListUtils.longestCommonSubsequence(list0, (List<Object>) linkedList0, (Equator<? super Object>) defaultEquator0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(linkedList0.contains(0));
      assertFalse(list0.contains(0));
      assertFalse(list1.contains(0));
      
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      int int0 = ListUtils.indexOf(list1, predicate0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertEquals((-1), int0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(linkedList0.contains(0));
      assertFalse(list0.contains(0));
      assertFalse(list1.contains(0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2429);
      assertNotNull(charBuffer0);
      assertEquals(2429, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2429, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2429, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2429, charBuffer0.remaining());
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(2429, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2429, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2429, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2429, charBuffer0.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals(2429, charBuffer1.length());
      assertEquals(2429, charBuffer1.limit());
      assertEquals(2429, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(2429, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      
      // Undeclared exception!
      ListUtils.longestCommonSubsequence((CharSequence) charBuffer0, (CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.synchronizedList((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      assertEquals(1, predicateArray0.length);
      assertNotNull(onePredicate0);
      
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      assertEquals(1, predicateArray0.length);
      assertNotNull(nonePredicate0);
      
      List<Object> list0 = ListUtils.select((Collection<?>) linkedList0, (Predicate<? super Object>) nonePredicate0);
      assertEquals(1, predicateArray0.length);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ClosureUtilsTest.MockTransformer<Object> closureUtilsTest_MockTransformer0 = new ClosureUtilsTest.MockTransformer<Object>();
      assertNotNull(closureUtilsTest_MockTransformer0);
      
      List<Object> list1 = ListUtils.transformedList(list0, (Transformer<? super Object, ?>) closureUtilsTest_MockTransformer0);
      assertEquals(1, predicateArray0.length);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<Object> list2 = ListUtils.selectRejected((Collection<?>) list1, (Predicate<? super Object>) predicateArray0[0]);
      assertNotSame(list0, list2);
      assertNotSame(list2, list0);
      assertEquals(1, predicateArray0.length);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      // Undeclared exception!
      try { 
        ListUtils.sum((List<? extends Integer>) null, (List<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = ListUtils.hashCodeForList(linkedList0);
      assertEquals(1, int0);
      assertEquals(0, linkedList0.size());
      
      List<Object> list0 = ListUtils.unmodifiableList((List<?>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer((-2884));
      assertEquals((-2884), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(integer0));
      
      boolean boolean1 = ListUtils.isEqualList(linkedList0, linkedList0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(integer0));
      
      List<Object> list0 = ListUtils.sum((List<?>) linkedList0, (List<?>) linkedList0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(integer0));
      assertTrue(list0.contains((-2884)));
      
      List<Object> list1 = ListUtils.removeAll((Collection<Object>) list0, (Collection<?>) list0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(linkedList0.contains(integer0));
      assertTrue(list0.contains((-2884)));
      assertFalse(list1.contains((-2884)));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.intersection((List<? extends Character>) null, (List<? extends Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.removeAll((Collection<Predicate<Object>>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      List<Character> list0 = ListUtils.defaultIfNull((List<Character>) null, (List<Character>) null);
      assertNull(list0);
      
      boolean boolean0 = ListUtils.isEqualList((Collection<?>) null, (Collection<?>) null);
      assertTrue(boolean0);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((List<LinkedList<LinkedList>>) null, (List<LinkedList<LinkedList>>) null, (Equator<? super LinkedList<LinkedList>>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer0 = CharBuffer.allocate(1032);
      ListUtils.longestCommonSubsequence((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Object, Predicate<Object>> transformer1 = (Transformer<Object, Predicate<Object>>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      List<Predicate<Object>> list0 = ListUtils.transformedList((List<Predicate<Object>>) linkedList0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer1);
      ListUtils.union((List<? extends Predicate<Object>>) list0, (List<? extends Predicate<Object>>) list0);
      LinkedList<Character> linkedList1 = new LinkedList<Character>();
      DefaultEquator.defaultEquator();
      LinkedList<Character> linkedList2 = new LinkedList<Character>();
      List<Character> list1 = ListUtils.union((List<? extends Character>) linkedList2, (List<? extends Character>) linkedList1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Character> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Character>) uniquePredicate0);
      List<Character> list2 = ListUtils.predicatedList(list1, predicate0);
      Transformer<Object, Character> transformer2 = (Transformer<Object, Character>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      List<Character> list3 = ListUtils.transformedList(list2, (Transformer<? super Character, ? extends Character>) transformer2);
      List<Character> list4 = ListUtils.synchronizedList(list3);
      linkedList0.add((Predicate<Object>) uniquePredicate0);
      List<Predicate<Object>> list5 = ListUtils.longestCommonSubsequence(list0, list0);
      List<Integer> list6 = ListUtils.emptyIfNull((List<Integer>) null);
      ListUtils.isEqualList(list6, linkedList2);
      List<Object> list7 = ListUtils.intersection((List<?>) list5, (List<?>) list4);
      ListUtils.synchronizedList(list7);
      // Undeclared exception!
      try { 
        ListUtils.selectRejected((Collection<? extends Integer>) null, (Predicate<? super Integer>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("pq!");
      linkedList0.add("");
      linkedList0.offer("I");
      Boolean boolean0 = new Boolean("");
      linkedList0.clone();
      ListUtils.defaultIfNull((List<String>) linkedList0, (List<String>) linkedList0);
      ListUtils.hashCodeForList(linkedList0);
      ListUtils.fixedSizeList((List<String>) linkedList0);
      LinkedList<Character> linkedList1 = new LinkedList<Character>();
      // Undeclared exception!
      try { 
        linkedList1.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      List<Integer> list0 = ListUtils.longestCommonSubsequence((List<Integer>) linkedList0, (List<Integer>) linkedList0, (Equator<? super Integer>) defaultEquator0);
      Integer integer0 = new Integer((-1));
      linkedList0.add(integer0);
      List<Integer> list1 = ListUtils.synchronizedList((List<Integer>) linkedList0);
      List<Integer> list2 = ListUtils.intersection((List<? extends Integer>) list0, (List<? extends Integer>) list1);
      List<Object> list3 = ListUtils.intersection((List<?>) list1, (List<?>) list1);
      List<List<Object>> list4 = ListUtils.partition(list3, 9);
      List<Integer> list5 = ListUtils.sum((List<? extends Integer>) linkedList0, (List<? extends Integer>) linkedList0);
      assertFalse(list5.equals((Object)list2));
      
      boolean boolean0 = ListUtils.isEqualList(list4, list1);
      assertEquals(1, list4.size());
      assertTrue(list4.contains(list3));
      assertFalse(boolean0);
      
      List<Object> list6 = ListUtils.emptyIfNull(list3);
      List<Object> list7 = ListUtils.retainAll((Collection<Object>) list6, (Collection<?>) list6);
      assertTrue(list7.equals((Object)list3));
      assertTrue(list1.equals((Object)list5));
      
      boolean boolean1 = ListUtils.isEqualList(list3, list5);
      assertTrue(list3.equals((Object)list7));
      assertFalse(boolean1 == boolean0);
      
      ListUtils.sum((List<? extends Integer>) list2, (List<? extends Integer>) list0);
      assertFalse(list2.contains((-1)));
      assertNotSame(list2, list0);
      assertTrue(list0.equals((Object)list2));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CharBuffer.allocate(3160);
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CharSequence must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3160);
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((CharSequence) charBuffer0, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CharSequence must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      List<Integer> list0 = ListUtils.longestCommonSubsequence((List<Integer>) linkedList0, (List<Integer>) linkedList0, (Equator<? super Integer>) defaultEquator0);
      List<Integer> list1 = ListUtils.synchronizedList(list0);
      List<Integer> list2 = ListUtils.subtract(list1, (List<? extends Integer>) list0);
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 7);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(list2, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) comparatorPredicate0);
      NotPredicate<Integer> notPredicate0 = new NotPredicate<Integer>(predicate0);
      predicateArray0[0] = (Predicate<Integer>) notPredicate0;
      Integer integer0 = new Integer(1);
      Equator<Integer> equator0 = (Equator<Integer>) mock(Equator.class, new ViolatedAssumptionAnswer());
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>(integer0, equator0);
      predicateArray0[1] = (Predicate<Integer>) equalPredicate0;
      NonePredicate<Integer> nonePredicate0 = new NonePredicate<Integer>(predicateArray0);
      predicateArray0[2] = (Predicate<Integer>) nonePredicate0;
      Integer integer1 = new Integer(1);
      IdentityPredicate<Integer> identityPredicate0 = new IdentityPredicate<Integer>(integer1);
      predicateArray0[3] = (Predicate<Integer>) identityPredicate0;
      Predicate<Integer> predicate1 = IdentityPredicate.identityPredicate(integer0);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      predicateArray0[4] = predicate1;
      Predicate<Integer> predicate2 = UniquePredicate.uniquePredicate();
      predicateArray0[5] = predicate2;
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformerPredicate<Integer> transformerPredicate0 = new TransformerPredicate<Integer>(transformer0);
      predicateArray0[6] = (Predicate<Integer>) transformerPredicate0;
      Predicate<Integer> predicate3 = NonePredicate.nonePredicate((Predicate<? super Integer>[]) predicateArray0);
      ListUtils.indexOf(list2, predicate3);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ListUtils.removeAll((Collection<String>) linkedList1, (Collection<?>) linkedList0);
      List<String> list3 = ListUtils.unmodifiableList((List<? extends String>) linkedList1);
      List<Object> list4 = ListUtils.select((Collection<?>) list3, (Predicate<? super Object>) predicate0);
      List<Object> list5 = ListUtils.emptyIfNull(list4);
      List<Object> list6 = ListUtils.defaultIfNull(list5, list5);
      List<Object> list7 = ListUtils.longestCommonSubsequence(list6, list4);
      assertNotSame(list6, list7);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      linkedList0.addLast(uniquePredicate0);
      ListUtils.fixedSizeList((List<Predicate<Object>>) linkedList0);
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ListUtils.defaultIfNull((List<String>) linkedList1, (List<String>) linkedList1);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      OrPredicate.orPredicate((Predicate<? super String>) predicate1, (Predicate<? super String>) predicate1);
      ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        ListUtils.synchronizedList((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      List<Character> list0 = null;
      // Undeclared exception!
      try { 
        ListUtils.partition((List<Character>) null, 551);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.iterator();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Integer integer0 = new Integer(1126);
      linkedList0.add(integer0);
      List<Object> list0 = ListUtils.synchronizedList((List<Object>) linkedList1);
      ListUtils.isEqualList(list0, linkedList0);
      ListUtils.hashCodeForList((Collection<?>) null);
      List<String> list1 = null;
      ListUtils.emptyIfNull((List<String>) null);
      List<Character> list2 = null;
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((List<Character>) null, (List<Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }
}
