/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:22:57 GMT 2019
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.util.BitSet;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import org.apache.commons.collections4.comparators.ComparatorChain;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComparatorChain_ESTest extends ComparatorChain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0);
      Comparator<Integer> comparator0 = Comparator.nullsLast((Comparator<? super Integer>) comparatorChain0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0);
      Integer integer0 = new Integer((-235));
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(comparatorChain0);
      comparatorChain0.addComparator((Comparator<Object>) comparatorChain2, true);
      comparatorChain1.compare(integer0, (Integer) null);
      ComparatorChain<Comparator<Object>> comparatorChain3 = new ComparatorChain<Comparator<Object>>();
      Comparator.nullsFirst((Comparator<? super ComparatorChain<Object>>) comparatorChain0);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain3.thenComparingLong(toLongFunction0);
      Integer integer1 = new Integer(1);
      comparatorChain3.equals(integer1);
      ToIntFunction<String> toIntFunction0 = (ToIntFunction<String>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1, 3390).when(toIntFunction0).applyAsInt(anyString());
      Comparator<String> comparator1 = Comparator.comparingInt((ToIntFunction<? super String>) toIntFunction0);
      ComparatorChain<String> comparatorChain4 = new ComparatorChain<String>(comparator1, true);
      comparatorChain4.compare("#xe7>N|9Lm87 Et", "");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>();
      comparatorChain0.hashCode();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator.naturalOrder();
      Comparator<Comparator<String>> comparator0 = Comparator.comparingLong((ToLongFunction<? super Comparator<String>>) toLongFunction0);
      ComparatorChain<Comparator<String>> comparatorChain1 = new ComparatorChain<Comparator<String>>(comparator0, true);
      ComparatorChain<String> comparatorChain2 = new ComparatorChain<String>(comparatorChain0);
      comparatorChain0.addComparator((Comparator<String>) comparatorChain2, true);
      comparatorChain1.compare(comparatorChain0, comparatorChain0);
      comparatorChain0.size();
      ComparatorChain<ComparatorChain<Object>> comparatorChain3 = new ComparatorChain<ComparatorChain<Object>>();
      comparatorChain3.setForwardSort(0);
      comparatorChain3.reversed();
      comparatorChain3.hashCode();
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain4 = new ComparatorChain<Integer>(linkedList0, (BitSet) null);
      comparatorChain4.hashCode();
      comparatorChain4.hashCode();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      ComparatorChain<Object> comparatorChain5 = new ComparatorChain<Object>(comparator1);
      comparatorChain5.size();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      comparatorChain0.addComparator((Comparator<Object>) comparatorChain0);
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(linkedList0, bitSet0);
      ComparatorChain<Integer> comparatorChain2 = new ComparatorChain<Integer>(comparatorChain1);
      comparatorChain1.addComparator((Comparator<Integer>) comparatorChain2);
      comparatorChain0.size();
      // Undeclared exception!
      try { 
        comparatorChain0.equals(comparatorChain1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1086.9831827995918), (-1086.9831827995918)).when(toDoubleFunction0).applyAsDouble(any());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0);
      ComparatorChain<Comparator<Object>> comparatorChain1 = new ComparatorChain<Comparator<Object>>();
      comparatorChain1.hashCode();
      comparatorChain0.setForwardSort(0);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(24L, 24L).when(toLongFunction0).applyAsLong(any());
      Comparator<Integer> comparator1 = Comparator.comparingLong((ToLongFunction<? super Integer>) toLongFunction0);
      ComparatorChain<Integer> comparatorChain2 = new ComparatorChain<Integer>(comparator1);
      Integer integer0 = new Integer(0);
      comparatorChain2.compare(integer0, integer0);
      Comparator<ComparatorChain<Object>> comparator2 = Comparator.nullsFirst((Comparator<? super ComparatorChain<Object>>) comparatorChain1);
      ComparatorChain<ComparatorChain<Object>> comparatorChain3 = new ComparatorChain<ComparatorChain<Object>>(comparator2);
      comparatorChain3.size();
      LinkedList<Comparator<Comparable<Object>>> linkedList0 = new LinkedList<Comparator<Comparable<Object>>>();
      ComparatorChain<Comparable<Object>> comparatorChain4 = new ComparatorChain<Comparable<Object>>(linkedList0);
      comparatorChain4.isLocked();
      LinkedList<Comparator<Integer>> linkedList1 = new LinkedList<Comparator<Integer>>();
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 1;
      longArray0[5] = (-133L);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      ComparatorChain<Integer> comparatorChain5 = new ComparatorChain<Integer>(linkedList1, bitSet0);
      comparatorChain0.compare(comparatorChain5, "");
      comparatorChain0.isLocked();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Comparator<String>> linkedList0 = new LinkedList<Comparator<String>>();
      ToLongFunction<String> toLongFunction0 = (ToLongFunction<String>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = Comparator.comparingLong((ToLongFunction<? super String>) toLongFunction0);
      linkedList0.add(comparator0);
      linkedList0.addLast(comparator0);
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>(linkedList0, (BitSet) null);
      // Undeclared exception!
      try { 
        comparatorChain0.setReverseSort((-699));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LongBuffer longBuffer0 = LongBuffer.allocate(1);
      longBuffer0.flip();
      longBuffer0.asReadOnlyBuffer();
      BitSet.valueOf(longBuffer0);
      Comparator<Integer> comparator0 = Comparator.nullsLast((Comparator<? super Integer>) null);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0, false);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparatorChain0);
      Integer integer0 = new Integer((-205));
      Integer integer1 = new Integer((-2298));
      comparatorChain1.compare(integer0, integer1);
      Integer integer2 = new Integer(995);
      Integer integer3 = new Integer((-2298));
      comparatorChain1.compare(integer2, integer3);
      comparatorChain0.size();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(toDoubleFunction0).applyAsDouble(any());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0);
      ComparatorChain<Comparator<Object>> comparatorChain1 = new ComparatorChain<Comparator<Object>>();
      comparatorChain1.hashCode();
      comparatorChain0.setForwardSort(0);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3777L, (-1546L)).when(toLongFunction0).applyAsLong(any());
      Comparator<Integer> comparator1 = Comparator.comparingLong((ToLongFunction<? super Integer>) toLongFunction0);
      ComparatorChain<Integer> comparatorChain2 = new ComparatorChain<Integer>(comparator1);
      Integer integer0 = new Integer(0);
      comparatorChain2.compare(integer0, integer0);
      Comparator<ComparatorChain<Object>> comparator2 = Comparator.nullsFirst((Comparator<? super ComparatorChain<Object>>) comparatorChain1);
      ComparatorChain<ComparatorChain<Object>> comparatorChain3 = new ComparatorChain<ComparatorChain<Object>>(comparator2);
      comparatorChain3.size();
      LinkedList<Comparator<Comparable<Object>>> linkedList0 = new LinkedList<Comparator<Comparable<Object>>>();
      ComparatorChain<Comparable<Object>> comparatorChain4 = new ComparatorChain<Comparable<Object>>(linkedList0);
      comparatorChain4.isLocked();
      LinkedList<Comparator<Integer>> linkedList1 = new LinkedList<Comparator<Integer>>();
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 1;
      longArray0[5] = (-133L);
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      ComparatorChain<Integer> comparatorChain5 = new ComparatorChain<Integer>(linkedList1, bitSet0);
      comparatorChain0.compare(comparatorChain5, "");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ToLongFunction<Comparator<Object>> toLongFunction0 = (ToLongFunction<Comparator<Object>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1769L), 41L).when(toLongFunction0).applyAsLong(nullable(java.util.Comparator.class));
      Comparator<Comparator<Object>> comparator0 = Comparator.comparingLong((ToLongFunction<? super Comparator<Object>>) toLongFunction0);
      ComparatorChain<Comparator<Object>> comparatorChain0 = new ComparatorChain<Comparator<Object>>(comparator0, false);
      comparatorChain0.size();
      ToLongFunction<Object> toLongFunction1 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction1);
      comparatorChain0.compare(comparator1, comparator1);
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(linkedList0);
      LinkedList<Comparator<ComparatorChain<String>>> linkedList1 = new LinkedList<Comparator<ComparatorChain<String>>>();
      ComparatorChain<ComparatorChain<String>> comparatorChain2 = new ComparatorChain<ComparatorChain<String>>(linkedList1);
      Object object0 = new Object();
      comparatorChain2.equals(object0);
      try { 
        comparatorChain1.compare(comparatorChain0, "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      int int0 = 0;
      BitSet bitSet0 = new BitSet(0);
      BitSet bitSet1 = bitSet0.get(1, 1);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0, bitSet1);
      ComparatorChain<String> comparatorChain1 = new ComparatorChain<String>((List<Comparator<String>>) null, bitSet1);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      linkedList0.add((Comparator<Object>) comparatorChain0);
      comparatorChain1.thenComparingInt(toIntFunction0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      byteBuffer0.duplicate();
      BitSet.valueOf(byteBuffer0);
      BitSet.valueOf(byteBuffer0);
      // Undeclared exception!
      try { 
        comparatorChain1.addComparator((Comparator<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Comparator<String>> linkedList0 = new LinkedList<Comparator<String>>();
      BitSet bitSet0 = null;
      ToLongFunction<String> toLongFunction0 = (ToLongFunction<String>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L, 0L, 0L).when(toLongFunction0).applyAsLong(anyString());
      Comparator<String> comparator0 = Comparator.comparingLong((ToLongFunction<? super String>) toLongFunction0);
      linkedList0.add(comparator0);
      linkedList0.addLast(comparator0);
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>(linkedList0, (BitSet) null);
      ComparatorChain<String> comparatorChain1 = new ComparatorChain<String>(comparatorChain0);
      LinkedList<Comparator<Integer>> linkedList1 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain2 = new ComparatorChain<Integer>(linkedList1);
      comparatorChain2.hashCode();
      String string0 = "ComparatorChains must contain at least one Comparator";
      linkedList0.add((Comparator<String>) comparatorChain0);
      // Undeclared exception!
      try { 
        comparatorChain0.compare(string0, string0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Comparator<Integer>> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Comparator<Integer>>) toDoubleFunction0);
      ComparatorChain<Comparator<Integer>> comparatorChain0 = new ComparatorChain<Comparator<Integer>>(comparator0, true);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator((-1), comparator0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(linkedList0);
      comparatorChain0.equals((Object) null);
      LinkedList<Comparator<Object>> linkedList1 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(linkedList1, (BitSet) null);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(comparator0, false);
      Comparator<Object> comparator1 = Comparator.nullsLast((Comparator<? super Object>) comparatorChain2);
      // Undeclared exception!
      try { 
        comparatorChain1.setComparator(0, comparator1, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Comparator<Comparator<Object>>> linkedList0 = new LinkedList<Comparator<Comparator<Object>>>();
      BitSet bitSet0 = new BitSet();
      BitSet bitSet1 = bitSet0.get(0, 0);
      ComparatorChain<Comparator<Object>> comparatorChain0 = new ComparatorChain<Comparator<Object>>(linkedList0, bitSet1);
      comparatorChain0.addComparator((Comparator<Comparator<Object>>) null);
      ComparatorChain<String> comparatorChain1 = new ComparatorChain<String>();
      comparatorChain1.setForwardSort(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)32;
      BitSet bitSet2 = BitSet.valueOf(byteArray0);
      ComparatorChain<Comparable<Object>> comparatorChain2 = new ComparatorChain<Comparable<Object>>((List<Comparator<Comparable<Object>>>) null, bitSet2);
      // Undeclared exception!
      try { 
        comparatorChain2.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      linkedList0.add((Comparator<Object>) comparatorChain0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.clear();
      linkedList0.containsAll(linkedList1);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(linkedList0);
      ComparatorChain<String> comparatorChain2 = new ComparatorChain<String>();
      comparatorChain2.hashCode();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      ComparatorChain<ComparatorChain<Object>> comparatorChain3 = new ComparatorChain<ComparatorChain<Object>>((List<Comparator<ComparatorChain<Object>>>) null, bitSet0);
      comparatorChain3.hashCode();
      // Undeclared exception!
      try { 
        comparatorChain2.setReverseSort((-2042));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2042
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.clear();
      linkedList0.containsAll(linkedList1);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>();
      ComparatorChain<String> comparatorChain2 = new ComparatorChain<String>();
      comparatorChain2.hashCode();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte) (-1);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      ComparatorChain<ComparatorChain<Object>> comparatorChain3 = new ComparatorChain<ComparatorChain<Object>>((List<Comparator<ComparatorChain<Object>>>) null, bitSet0);
      comparatorChain3.hashCode();
      // Undeclared exception!
      try { 
        comparatorChain2.setReverseSort((-2026));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2026
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComparatorChain<Comparator<String>> comparatorChain0 = new ComparatorChain<Comparator<String>>();
      comparatorChain0.reversed();
      int int0 = (-5400);
      // Undeclared exception!
      try { 
        comparatorChain0.setReverseSort((-5400));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -5400
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Comparator<Object> comparator0 = Comparator.nullsFirst((Comparator<? super Object>) comparatorChain0);
      Comparator<ComparatorChain<String>> comparator1 = Comparator.nullsLast((Comparator<? super ComparatorChain<String>>) comparator0);
      ComparatorChain<ComparatorChain<String>> comparatorChain1 = new ComparatorChain<ComparatorChain<String>>(comparator1, false);
      Comparator.nullsLast((Comparator<? super String>) comparator0);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain1.thenComparingInt(toIntFunction0);
      comparatorChain1.compare((ComparatorChain<String>) null, (ComparatorChain<String>) null);
      BitSet bitSet0 = new BitSet(0);
      ComparatorChain<Comparator<Object>> comparatorChain2 = new ComparatorChain<Comparator<Object>>((List<Comparator<Comparator<Object>>>) null, bitSet0);
      Comparator<Comparator<Object>> comparator2 = comparatorChain2.thenComparing(comparator0);
      bitSet0.previousClearBit(0);
      boolean boolean0 = false;
      ComparatorChain<Comparator<Object>> comparatorChain3 = new ComparatorChain<Comparator<Object>>(comparator2, false);
      ComparatorChain<Object> comparatorChain4 = new ComparatorChain<Object>(comparatorChain0);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingLong((ToLongFunction<? super String>) toLongFunction0);
      // Undeclared exception!
      try { 
        comparatorChain3.compare(comparatorChain4, comparatorChain4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      boolean boolean0 = false;
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, false);
      comparatorChain0.setComparator(0, comparator0);
      try { 
        comparatorChain0.setComparator((-3901), comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1054L;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      ComparatorChain<Comparator<Object>> comparatorChain0 = new ComparatorChain<Comparator<Object>>((List<Comparator<Comparator<Object>>>) null, bitSet0);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Comparator<Object>> comparator0 = Comparator.comparingLong((ToLongFunction<? super Comparator<Object>>) toLongFunction0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(1, comparator0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      comparatorChain0.addComparator(comparator0, true);
      Comparator.nullsLast((Comparator<? super Integer>) comparatorChain0);
      comparatorChain0.hashCode();
      comparatorChain0.size();
      ComparatorChain<Comparable<Object>> comparatorChain1 = null;
      try {
        comparatorChain1 = new ComparatorChain<Comparable<Object>>((List<Comparator<Comparable<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      LinkedList<Comparator<String>> linkedList0 = new LinkedList<Comparator<String>>();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-88);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      BitSet bitSet0 = BitSet.valueOf(byteBuffer0);
      BitSet bitSet1 = bitSet0.get(0, 0);
      ComparatorChain<String> comparatorChain1 = new ComparatorChain<String>(linkedList0, bitSet1);
      LinkedList<Comparator<Integer>> linkedList1 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain2 = new ComparatorChain<Integer>(linkedList1);
      comparatorChain1.equals(comparatorChain2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Comparator<Object> comparator0 = Comparator.nullsFirst((Comparator<? super Object>) comparatorChain0);
      comparatorChain0.addComparator(comparator0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>((Comparator<Integer>) null, true);
      ComparatorChain<String> comparatorChain2 = new ComparatorChain<String>();
      comparatorChain1.equals(comparatorChain2);
      Integer integer0 = new Integer(1);
      comparatorChain1.equals(integer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ComparatorChain<Comparator<Object>> comparatorChain0 = new ComparatorChain<Comparator<Object>>((Comparator<Comparator<Object>>) null);
      Comparator.reverseOrder();
      ComparatorChain<Comparator<Object>> comparatorChain1 = new ComparatorChain<Comparator<Object>>(comparatorChain0, false);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingInt((ToIntFunction<? super Integer>) toIntFunction0);
      int int0 = (-273);
      // Undeclared exception!
      try { 
        comparatorChain1.setForwardSort((-273));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -273
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>();
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>(linkedList0);
      comparatorChain1.setReverseSort(0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Comparator<String>> linkedList0 = new LinkedList<Comparator<String>>();
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>(linkedList0);
      Comparator<String> comparator0 = comparatorChain0.reversed();
      ComparatorChain<String> comparatorChain1 = new ComparatorChain<String>(comparator0);
      comparatorChain1.equals("");
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      Comparator<Object> comparator2 = Comparator.nullsLast((Comparator<? super Object>) comparator1);
      Comparator<Object> comparator3 = Comparator.nullsFirst((Comparator<? super Object>) comparator2);
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(comparator3, false);
      comparatorChain2.addComparator(comparator3, false);
      LinkedList<Comparator<ComparatorChain<String>>> linkedList1 = new LinkedList<Comparator<ComparatorChain<String>>>();
      ComparatorChain<ComparatorChain<String>> comparatorChain3 = new ComparatorChain<ComparatorChain<String>>(linkedList1, (BitSet) null);
      // Undeclared exception!
      try { 
        comparatorChain3.setForwardSort((-5031));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>();
      comparatorChain0.size();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      linkedList0.add(comparator0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0);
      comparatorChain0.size();
      comparatorChain0.setForwardSort(1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>((Comparator<Integer>) null);
      comparatorChain0.addComparator((Comparator<Integer>) null, true);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>();
      Comparator<String> comparator0 = Comparator.nullsLast((Comparator<? super String>) comparatorChain1);
      ComparatorChain<String> comparatorChain2 = new ComparatorChain<String>(comparator0);
      comparatorChain2.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Comparator<Comparator<Object>>> linkedList0 = new LinkedList<Comparator<Comparator<Object>>>();
      ComparatorChain<Comparator<Object>> comparatorChain0 = new ComparatorChain<Comparator<Object>>(linkedList0);
      comparatorChain0.isLocked();
      ComparatorChain<Comparator<Object>> comparatorChain1 = new ComparatorChain<Comparator<Object>>(linkedList0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator((-2331), (Comparator<Comparator<Object>>) comparatorChain1, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2331, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(linkedList0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1903));
      try { 
        comparatorChain0.compare(integer0, integer1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>(linkedList0);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Integer>> comparator0 = Comparator.comparingLong((ToLongFunction<? super ComparatorChain<Integer>>) toLongFunction0);
      comparatorChain0.addComparator(comparator0, false);
      LinkedList<Comparator<Integer>> linkedList1 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>();
      linkedList1.offer(comparatorChain1);
      ComparatorChain<Integer> comparatorChain2 = new ComparatorChain<Integer>(linkedList1);
      LinkedList<Comparator<Object>> linkedList2 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain3 = new ComparatorChain<Object>(linkedList2);
      Comparator.nullsLast((Comparator<? super Object>) comparatorChain3);
      comparatorChain2.hashCode();
      LinkedList<Comparator<Comparable<Integer>>> linkedList3 = new LinkedList<Comparator<Comparable<Integer>>>();
      ComparatorChain<Comparable<Integer>> comparatorChain4 = new ComparatorChain<Comparable<Integer>>(linkedList3);
      int int0 = (-424);
      ComparatorChain<Comparable<Integer>> comparatorChain5 = new ComparatorChain<Comparable<Integer>>(comparatorChain4);
      // Undeclared exception!
      try { 
        comparatorChain4.setComparator((-424), (Comparator<Comparable<Integer>>) comparatorChain5, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -424, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        comparatorChain0.compare(object0, object1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Integer>) toDoubleFunction0);
      try { 
        comparatorChain0.setComparator((-1371), comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(linkedList0);
      linkedList0.offerFirst(comparatorChain0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        comparatorChain0.compare(integer0, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      BitSet bitSet0 = new BitSet(1);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0, bitSet0);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      try { 
        comparatorChain0.setComparator(1, comparator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>();
      comparatorChain0.setForwardSort(0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Comparator<String>> linkedList0 = new LinkedList<Comparator<String>>();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>(linkedList0, bitSet0);
      Comparator<String> comparator0 = Comparator.nullsFirst((Comparator<? super String>) comparatorChain0);
      comparatorChain0.addComparator(comparator0, true);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Comparator<String>> linkedList0 = new LinkedList<Comparator<String>>();
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>(linkedList0);
      linkedList0.removeFirstOccurrence(comparatorChain0);
      linkedList0.add((Comparator<String>) null);
      comparatorChain0.setComparator(0, (Comparator<String>) null, false);
      comparatorChain0.addComparator((Comparator<String>) null);
      comparatorChain0.isLocked();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      Comparator<Object> comparator1 = Comparator.nullsFirst((Comparator<? super Object>) comparator0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparator1, true);
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(comparatorChain1);
      comparatorChain2.size();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Comparator<Integer>> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Comparator<Integer>>) toDoubleFunction0);
      ComparatorChain<Comparator<Integer>> comparatorChain0 = new ComparatorChain<Comparator<Integer>>(comparator0, false);
      comparatorChain0.setComparator(0, comparator0, true);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparatorChain0, false);
      comparatorChain1.addComparator((Comparator<Object>) comparatorChain0);
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Integer> comparatorChain2 = new ComparatorChain<Integer>(linkedList0, bitSet0);
      ComparatorChain<Integer> comparatorChain3 = new ComparatorChain<Integer>(comparatorChain2);
      comparatorChain2.addComparator((Comparator<Integer>) comparatorChain3);
      comparatorChain1.size();
      boolean boolean0 = comparatorChain1.equals(comparatorChain2);
      assertEquals(0, bitSet0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Comparator<Object> comparator0 = Comparator.nullsLast((Comparator<? super Object>) comparatorChain0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparator0, true);
      comparatorChain1.hashCode();
      Comparator<ComparatorChain<Object>> comparator1 = Comparator.nullsFirst((Comparator<? super ComparatorChain<Object>>) comparatorChain0);
      ComparatorChain<ComparatorChain<Object>> comparatorChain2 = new ComparatorChain<ComparatorChain<Object>>(comparator1);
      ComparatorChain<ComparatorChain<Object>> comparatorChain3 = new ComparatorChain<ComparatorChain<Object>>(comparatorChain2, true);
      comparatorChain3.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>();
      comparatorChain0.hashCode();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(5076L, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator.naturalOrder();
      Comparator<Comparator<String>> comparator0 = Comparator.comparingLong((ToLongFunction<? super Comparator<String>>) toLongFunction0);
      ComparatorChain<Comparator<String>> comparatorChain1 = new ComparatorChain<Comparator<String>>(comparator0, true);
      ComparatorChain<String> comparatorChain2 = new ComparatorChain<String>(comparatorChain0);
      comparatorChain0.addComparator((Comparator<String>) comparatorChain2, true);
      comparatorChain1.compare(comparatorChain0, comparatorChain0);
      comparatorChain0.size();
      ComparatorChain<ComparatorChain<Object>> comparatorChain3 = new ComparatorChain<ComparatorChain<Object>>();
      comparatorChain3.setForwardSort(0);
      comparatorChain3.reversed();
      comparatorChain3.hashCode();
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain4 = new ComparatorChain<Integer>(linkedList0, (BitSet) null);
      comparatorChain4.hashCode();
      comparatorChain4.hashCode();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      ComparatorChain<Object> comparatorChain5 = new ComparatorChain<Object>(comparator1);
      comparatorChain5.size();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(linkedList0);
      LinkedList<Comparator<String>> linkedList1 = new LinkedList<Comparator<String>>();
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      ComparatorChain<String> comparatorChain1 = new ComparatorChain<String>(linkedList1, bitSet0);
      comparatorChain0.equals(comparatorChain1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ComparatorChain<ComparatorChain<String>> comparatorChain0 = new ComparatorChain<ComparatorChain<String>>();
      ComparatorChain<ComparatorChain<String>> comparatorChain1 = new ComparatorChain<ComparatorChain<String>>(comparatorChain0, false);
      comparatorChain0.addComparator((Comparator<ComparatorChain<String>>) comparatorChain1, true);
      LinkedList<Comparator<String>> linkedList0 = new LinkedList<Comparator<String>>();
      ComparatorChain<String> comparatorChain2 = new ComparatorChain<String>(linkedList0);
      // Undeclared exception!
      try { 
        comparatorChain0.compare(comparatorChain2, comparatorChain2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<Comparator<Object>> comparatorChain1 = new ComparatorChain<Comparator<Object>>();
      try { 
        comparatorChain1.compare(comparatorChain0, comparatorChain0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-1);
      LinkedList<Comparator<ComparatorChain<Comparator<Object>>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Comparator<Object>>>>();
      ComparatorChain<ComparatorChain<Comparator<Object>>> comparatorChain0 = new ComparatorChain<ComparatorChain<Comparator<Object>>>(linkedList0);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      Comparator<Object> comparator1 = Comparator.nullsFirst((Comparator<? super Object>) comparator0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparator0, true);
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>();
      comparatorChain1.equals(comparatorChain2);
      Comparator.nullsLast((Comparator<? super Comparator<Object>>) comparator1);
      ComparatorChain<String> comparatorChain3 = new ComparatorChain<String>();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      ToLongFunction<Object> toLongFunction1 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.thenComparingLong(toLongFunction1);
      ComparatorChain<ComparatorChain<Object>> comparatorChain4 = null;
      try {
        comparatorChain4 = new ComparatorChain<ComparatorChain<Object>>((List<Comparator<ComparatorChain<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Comparator<String>> linkedList0 = new LinkedList<Comparator<String>>();
      LongBuffer longBuffer0 = LongBuffer.allocate(1);
      longBuffer0.flip();
      longBuffer0.asReadOnlyBuffer();
      BitSet bitSet0 = BitSet.valueOf(longBuffer0);
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>(linkedList0, bitSet0);
      Comparator<Integer> comparator0 = Comparator.nullsLast((Comparator<? super Integer>) null);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0, false);
      ComparatorChain<Integer> comparatorChain2 = new ComparatorChain<Integer>(comparatorChain1);
      Integer integer0 = new Integer((-205));
      Integer integer1 = new Integer((-2298));
      int int0 = comparatorChain2.compare(integer0, integer1);
      assertTrue(comparatorChain2.isLocked());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(linkedList0);
      comparatorChain0.size();
      LinkedList<Comparator<Comparable<Comparator<Object>>>> linkedList1 = new LinkedList<Comparator<Comparable<Comparator<Object>>>>();
      linkedList1.remove((Object) linkedList0);
      ComparatorChain<Comparable<Comparator<Object>>> comparatorChain1 = new ComparatorChain<Comparable<Comparator<Object>>>(linkedList1);
      ComparatorChain<Comparable<Comparator<Object>>> comparatorChain2 = new ComparatorChain<Comparable<Comparator<Object>>>();
      comparatorChain1.addComparator((Comparator<Comparable<Comparator<Object>>>) comparatorChain2);
      LinkedList<Comparator<Object>> linkedList2 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain3 = new ComparatorChain<Object>(linkedList2);
      comparatorChain3.setReverseSort(0);
      ComparatorChain<ComparatorChain<Object>> comparatorChain4 = new ComparatorChain<ComparatorChain<Object>>();
      comparatorChain4.size();
      LinkedList<Comparator<Comparator<String>>> linkedList3 = new LinkedList<Comparator<Comparator<String>>>();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Comparator<String>> comparatorChain5 = new ComparatorChain<Comparator<String>>(linkedList3, bitSet0);
      boolean boolean0 = comparatorChain5.isLocked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Comparator<Comparable<String>>> linkedList0 = new LinkedList<Comparator<Comparable<String>>>();
      ComparatorChain<Comparable<String>> comparatorChain0 = new ComparatorChain<Comparable<String>>(linkedList0);
      Comparator<Comparable<String>> comparator0 = Comparator.nullsFirst((Comparator<? super Comparable<String>>) comparatorChain0);
      comparatorChain0.addComparator(comparator0, false);
      LinkedList<Comparator<Comparator<Object>>> linkedList1 = new LinkedList<Comparator<Comparator<Object>>>();
      ComparatorChain<Comparator<Object>> comparatorChain1 = new ComparatorChain<Comparator<Object>>(linkedList1);
      ComparatorChain<Comparator<Object>> comparatorChain2 = new ComparatorChain<Comparator<Object>>(comparatorChain1, false);
      try { 
        comparatorChain1.setComparator(0, (Comparator<Comparator<Object>>) comparatorChain2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-4784L);
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 174L;
      longArray0[4] = (-2522L);
      longArray0[5] = 1840L;
      longArray0[6] = (-346L);
      longArray0[7] = 0L;
      longArray0[8] = (-1L);
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      bitSet0.set(582, 582, false);
      bitSet0.set(0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null, bitSet0);
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      BitSet bitSet1 = bitSet0.get(0, 690);
      bitSet1.stream();
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(linkedList0, bitSet1);
      Integer integer0 = new Integer(690);
      boolean boolean0 = comparatorChain1.equals(integer0);
      assertFalse(comparatorChain1.isLocked());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, false);
      comparatorChain0.setComparator(0, comparator0);
      comparatorChain0.setComparator(0, comparator0);
      ComparatorChain<ComparatorChain<String>> comparatorChain1 = new ComparatorChain<ComparatorChain<String>>();
      ComparatorChain<ComparatorChain<String>> comparatorChain2 = new ComparatorChain<ComparatorChain<String>>(comparatorChain1);
      ComparatorChain<ComparatorChain<String>> comparatorChain3 = new ComparatorChain<ComparatorChain<String>>(comparatorChain2, false);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super Integer>) toDoubleFunction0);
      comparatorChain3.setForwardSort(0);
      comparatorChain0.hashCode();
      Comparator<Comparator<Object>> comparator2 = Comparator.nullsFirst((Comparator<? super Comparator<Object>>) comparatorChain0);
      ToIntFunction<Object> toIntFunction1 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.thenComparingInt(toIntFunction1);
      ComparatorChain<Comparator<Object>> comparatorChain4 = new ComparatorChain<Comparator<Object>>(comparator2);
      comparatorChain4.hashCode();
      ComparatorChain<Integer> comparatorChain5 = new ComparatorChain<Integer>(comparator1);
      boolean boolean0 = comparatorChain5.isLocked();
      assertFalse(boolean0);
  }
}
