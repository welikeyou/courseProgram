/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:55:56 GMT 2019
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.Map;
import java.util.function.ToLongFunction;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.comparators.TransformingComparator;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformingComparator_ESTest extends TransformingComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      TransformingComparator<Integer, Comparable<String>> transformingComparator0 = new TransformingComparator<Integer, Comparable<String>>(transformer0);
      Integer integer0 = new Integer(2678);
      int int0 = transformingComparator0.compare(integer0, integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      TransformingComparator<Object, String> transformingComparator0 = new TransformingComparator<Object, String>(transformer0);
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      PredicateTransformer<Integer> predicateTransformer0 = new PredicateTransformer<Integer>(predicate0);
      Integer integer0 = new Integer(4604);
      Boolean boolean0 = predicateTransformer0.transform(integer0);
      int int0 = transformingComparator0.compare(boolean0, "");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-875L), (long)0).when(toLongFunction0).applyAsLong(any());
      Comparator<String> comparator0 = Comparator.comparingLong((ToLongFunction<? super String>) toLongFunction0);
      TransformingComparator<Closure<Object>, String> transformingComparator0 = new TransformingComparator<Closure<Object>, String>(transformer0, comparator0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      int int0 = transformingComparator0.compare((Closure<Object>) null, closure0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformingComparator<Predicate<Integer>, String> transformingComparator0 = new TransformingComparator<Predicate<Integer>, String>(transformer0);
      Integer integer0 = new Integer((-821));
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>(integer0, (Equator<Integer>) null);
      // Undeclared exception!
      try { 
        transformingComparator0.compare(equalPredicate0, equalPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TransformingComparator<String, Object> transformingComparator0 = new TransformingComparator<String, Object>(transformer0);
      // Undeclared exception!
      try { 
        transformingComparator0.compare("InstantiateFactory: The constructor must exist and be public ", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 0);
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("ssokHZR1~:[", classArray0, classArray0);
      SwitchTransformer<Object, Integer> switchTransformer0 = new SwitchTransformer<Object, Integer>(predicateArray0, transformerArray0, invokerTransformer0);
      TransformingComparator<String, Integer> transformingComparator0 = new TransformingComparator<String, Integer>(switchTransformer0);
      // Undeclared exception!
      try { 
        transformingComparator0.compare("", (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TransformingComparator<String, Object> transformingComparator0 = new TransformingComparator<String, Object>(transformer0);
      TransformingComparator<Transformer<Transformer<Object, Object>, Boolean>, Integer> transformingComparator1 = new TransformingComparator<Transformer<Transformer<Object, Object>, Boolean>, Integer>(transformer0);
      boolean boolean0 = transformingComparator1.equals(transformingComparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformingComparator<Boolean, Integer> transformingComparator0 = new TransformingComparator<Boolean, Integer>(transformer0);
      TransformingComparator<Integer, Boolean> transformingComparator1 = new TransformingComparator<Integer, Boolean>((Transformer<? super Integer, ? extends Boolean>) null, transformingComparator0);
      TransformingComparator<Object, Boolean> transformingComparator2 = new TransformingComparator<Object, Boolean>((Transformer<? super Object, ? extends Boolean>) null, transformingComparator0);
      boolean boolean0 = transformingComparator1.equals(transformingComparator2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(object0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) identityPredicate0);
      TransformingComparator<Object, Boolean> transformingComparator0 = new TransformingComparator<Object, Boolean>(transformer0);
      TransformingComparator<Closure<Object>, Object> transformingComparator1 = new TransformingComparator<Closure<Object>, Object>(transformer0);
      Transformer<Object, Object> transformer1 = CloneTransformer.cloneTransformer();
      TransformingComparator<Comparable<Integer>, Object> transformingComparator2 = new TransformingComparator<Comparable<Integer>, Object>(transformer1, transformingComparator0);
      boolean boolean0 = transformingComparator2.equals(transformingComparator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transformer<Integer, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformingComparator<Integer, Boolean> transformingComparator0 = new TransformingComparator<Integer, Boolean>(transformer0, (Comparator<Boolean>) null);
      Transformer<Object, Boolean> transformer1 = InvokerTransformer.invokerTransformer("hasNext() should return false for empty iterators");
      TransformingComparator<Predicate<Object>, Boolean> transformingComparator1 = new TransformingComparator<Predicate<Object>, Boolean>(transformer1, (Comparator<Boolean>) null);
      boolean boolean0 = transformingComparator1.equals(transformingComparator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TransformingComparator<Predicate<Object>, Integer> transformingComparator0 = new TransformingComparator<Predicate<Object>, Integer>(transformer0);
      Transformer<Integer, Boolean> transformer1 = ConstantTransformer.nullTransformer();
      TransformingComparator<Integer, Boolean> transformingComparator1 = new TransformingComparator<Integer, Boolean>(transformer1, (Comparator<Boolean>) null);
      boolean boolean0 = transformingComparator1.equals(transformingComparator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(888);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      TransformingComparator<Comparable<Integer>, Integer> transformingComparator0 = new TransformingComparator<Comparable<Integer>, Integer>(transformer0, (Comparator<Integer>) null);
      Object object0 = new Object();
      boolean boolean0 = transformingComparator0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transformer<Object, Predicate<Object>> transformer0 = ConstantTransformer.nullTransformer();
      TransformingComparator<Boolean, Object> transformingComparator0 = new TransformingComparator<Boolean, Object>(transformer0);
      TransformingComparator<String, Predicate<Object>> transformingComparator1 = new TransformingComparator<String, Predicate<Object>>(transformer0);
      TransformingComparator<Predicate<Integer>, String> transformingComparator2 = new TransformingComparator<Predicate<Integer>, String>((Transformer<? super Predicate<Integer>, ? extends String>) null, transformingComparator1);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Transformer<Object, Boolean> transformer1 = InvokerTransformer.invokerTransformer("XL'{Pb!kuLPUBh6+ p", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformingComparator<Transformer<Object, Object>, Boolean> transformingComparator3 = new TransformingComparator<Transformer<Object, Object>, Boolean>(transformer1, transformingComparator0);
      boolean boolean0 = transformingComparator2.equals(transformingComparator3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transformer<Object, Closure<Object>> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Closure<Object>>) null);
      TransformingComparator<Comparable<Transformer<Object, Object>>, Closure<Object>> transformingComparator0 = new TransformingComparator<Comparable<Transformer<Object, Object>>, Closure<Object>>(transformer0);
      boolean boolean0 = transformingComparator0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transformer<Object, Transformer<Object, Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformingComparator<Predicate<Object>, Object> transformingComparator0 = new TransformingComparator<Predicate<Object>, Object>(transformer0, (Comparator<Object>) null);
      transformingComparator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TransformingComparator<Closure<Object>, Integer> transformingComparator0 = new TransformingComparator<Closure<Object>, Integer>((Transformer<? super Closure<Object>, ? extends Integer>) null);
      transformingComparator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Transformer<Object, Predicate<Object>> transformer0 = ConstantTransformer.constantTransformer(predicate0);
      TransformingComparator<Predicate<Object>, Predicate<Object>> transformingComparator0 = new TransformingComparator<Predicate<Object>, Predicate<Object>>(transformer0);
      // Undeclared exception!
      try { 
        transformingComparator0.compare(predicate0, predicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.InstanceofPredicate cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }
}
