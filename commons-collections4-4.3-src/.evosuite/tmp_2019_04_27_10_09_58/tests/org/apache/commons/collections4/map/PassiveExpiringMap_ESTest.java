/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:03:40 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.apache.commons.collections4.map.PassiveExpiringMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PassiveExpiringMap_ESTest extends PassiveExpiringMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<HashMap<Integer, Object>, Integer> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<HashMap<Integer, Object>, Integer>(9223372036854775800L, timeUnit0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      long long0 = passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0.expirationTime(hashMap0, integer0);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Long>(767L, timeUnit0);
      Long long0 = new Long(767L);
      long long1 = passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0.expirationTime((Object) null, long0);
      assertEquals(1392455301320L, long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, AbstractMap.SimpleImmutableEntry<String, String>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, AbstractMap.SimpleImmutableEntry<String, String>>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("il)Sn.`t", "il)Sn.`t");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      long long0 = passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0.expirationTime(integer0, abstractMap_SimpleImmutableEntry0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, Object> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, Object>();
      PassiveExpiringMap<Integer, Object> passiveExpiringMap0 = new PassiveExpiringMap<Integer, Object>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PassiveExpiringMap<String, Integer> passiveExpiringMap0 = new PassiveExpiringMap<String, Integer>(1435L, hashMap0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> passiveExpiringMap0 = new PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PassiveExpiringMap<Integer, AbstractMap.SimpleEntry<Object, Integer>> passiveExpiringMap0 = new PassiveExpiringMap<Integer, AbstractMap.SimpleEntry<Object, Integer>>();
      Integer integer0 = new Integer((-2145338308));
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) null, (Integer) null);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      passiveExpiringMap0.put(integer0, abstractMap_SimpleEntry0);
      int int0 = passiveExpiringMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleEntry<String, String>> hashMap0 = new HashMap<Object, AbstractMap.SimpleEntry<String, String>>();
      PassiveExpiringMap<Object, AbstractMap.SimpleEntry<String, String>> passiveExpiringMap0 = new PassiveExpiringMap<Object, AbstractMap.SimpleEntry<String, String>>(9223372036854775807L, hashMap0);
      PassiveExpiringMap<Object, AbstractMap.SimpleEntry<String, String>> passiveExpiringMap1 = new PassiveExpiringMap<Object, AbstractMap.SimpleEntry<String, String>>(9223372036851175807L);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("B9:}F2 [55:~sI", "B9:}F2 [55:~sI");
      passiveExpiringMap1.put(passiveExpiringMap0, abstractMap_SimpleEntry0);
      Object object0 = passiveExpiringMap1.remove((Object) hashMap0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, Object> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, Object>(344L);
      PassiveExpiringMap<Integer, Object> passiveExpiringMap0 = new PassiveExpiringMap<Integer, Object>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      Object object0 = passiveExpiringMap0.get((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Object> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Object>();
      PassiveExpiringMap<String, Object> passiveExpiringMap0 = new PassiveExpiringMap<String, Object>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      passiveExpiringMap0.put((String) null, "org.apache.commons.collections4.map.AbstractMapDecorator");
      boolean boolean0 = passiveExpiringMap0.containsKey((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleEntry<String, String>> hashMap0 = new HashMap<Object, AbstractMap.SimpleEntry<String, String>>();
      PassiveExpiringMap<Object, AbstractMap.SimpleEntry<String, String>> passiveExpiringMap0 = new PassiveExpiringMap<Object, AbstractMap.SimpleEntry<String, String>>(9223372036854775807L, hashMap0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("5", "G?^,'Rptf]PrAHo+*a:");
      passiveExpiringMap0.put(hashMap0, abstractMap_SimpleEntry0);
      PassiveExpiringMap<Object, AbstractMap.SimpleEntry<String, String>> passiveExpiringMap1 = new PassiveExpiringMap<Object, AbstractMap.SimpleEntry<String, String>>(9223372036851175807L);
      // Undeclared exception!
      try { 
        passiveExpiringMap1.remove((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      PassiveExpiringMap<Object, Integer> passiveExpiringMap0 = new PassiveExpiringMap<Object, Integer>((-3076L), timeUnit0);
      // Undeclared exception!
      try { 
        passiveExpiringMap0.putAll((Map<?, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.PassiveExpiringMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> passiveExpiringMap0 = new PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>((-1L));
      passiveExpiringMap0.map = null;
      // Undeclared exception!
      try { 
        passiveExpiringMap0.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PassiveExpiringMap<String, AbstractMap.SimpleImmutableEntry<Object, String>> passiveExpiringMap0 = null;
      try {
        passiveExpiringMap0 = new PassiveExpiringMap<String, AbstractMap.SimpleImmutableEntry<Object, String>>((Map<String, AbstractMap.SimpleImmutableEntry<Object, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = null;
      try {
        passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>((-2218L), timeUnit0, (Map<Long, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PassiveExpiringMap<String, String> passiveExpiringMap0 = null;
      try {
        passiveExpiringMap0 = new PassiveExpiringMap<String, String>(9223372036854775807L, (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PassiveExpiringMap<String, Integer> passiveExpiringMap0 = new PassiveExpiringMap<String, Integer>(hashMap0);
      Integer integer0 = passiveExpiringMap0.remove((Object) "`|dPmp/");
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, Object> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, Object>();
      PassiveExpiringMap<Integer, Object> passiveExpiringMap1 = new PassiveExpiringMap<Integer, Object>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> passiveExpiringMap2 = new PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>();
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer0, passiveExpiringMap1);
      String string0 = passiveExpiringMap2.putIfAbsent(abstractMap_SimpleImmutableEntry0, "`|dPmp/");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, AbstractMap.SimpleEntry<Object, Integer>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, AbstractMap.SimpleEntry<Object, Integer>>(0L);
      PassiveExpiringMap<Long, AbstractMap.SimpleEntry<Object, Integer>> passiveExpiringMap0 = new PassiveExpiringMap<Long, AbstractMap.SimpleEntry<Object, Integer>>(0L);
      PassiveExpiringMap<Long, AbstractMap.SimpleEntry<Object, Integer>> passiveExpiringMap1 = new PassiveExpiringMap<Long, AbstractMap.SimpleEntry<Object, Integer>>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, passiveExpiringMap0);
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>();
      PassiveExpiringMap<Object, Object> passiveExpiringMap1 = null;
      try {
        passiveExpiringMap1 = new PassiveExpiringMap<Object, Object>((PassiveExpiringMap.ExpirationPolicy<Object, Object>) null, passiveExpiringMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Policy must not be null.
         //
         verifyException("org.apache.commons.collections4.map.PassiveExpiringMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PassiveExpiringMap<String, Object> passiveExpiringMap0 = new PassiveExpiringMap<String, Object>(0);
      passiveExpiringMap0.put((String) null, "org.apache.commons.collections4.map.AbstractMapDecorator");
      boolean boolean0 = passiveExpiringMap0.containsKey((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PassiveExpiringMap<HashMap<String, Long>, AbstractMap.SimpleImmutableEntry<String, Long>> passiveExpiringMap0 = new PassiveExpiringMap<HashMap<String, Long>, AbstractMap.SimpleImmutableEntry<String, Long>>();
      PassiveExpiringMap<HashMap<String, Long>, AbstractMap.SimpleImmutableEntry<String, Long>> passiveExpiringMap1 = new PassiveExpiringMap<HashMap<String, Long>, AbstractMap.SimpleImmutableEntry<String, Long>>(1L, passiveExpiringMap0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      PassiveExpiringMap<Object, Object> passiveExpiringMap2 = new PassiveExpiringMap<Object, Object>(1L, timeUnit0);
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      Long long0 = new Long(1L);
      AbstractMap.SimpleImmutableEntry<String, Long> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Long>("-!Q<fa", long0);
      passiveExpiringMap1.putIfAbsent(hashMap0, abstractMap_SimpleImmutableEntry0);
      passiveExpiringMap2.putAll(passiveExpiringMap1);
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PassiveExpiringMap<HashMap<String, Long>, AbstractMap.SimpleImmutableEntry<String, Long>> passiveExpiringMap0 = new PassiveExpiringMap<HashMap<String, Long>, AbstractMap.SimpleImmutableEntry<String, Long>>();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      PassiveExpiringMap<Object, Object> passiveExpiringMap1 = new PassiveExpiringMap<Object, Object>(1L, timeUnit0);
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      Long long0 = new Long(1L);
      AbstractMap.SimpleImmutableEntry<String, Long> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Long>("-!Q<fa", long0);
      AbstractMap.SimpleImmutableEntry<String, Long> abstractMap_SimpleImmutableEntry1 = passiveExpiringMap0.putIfAbsent(hashMap0, abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      passiveExpiringMap1.putAll(passiveExpiringMap0);
      boolean boolean0 = passiveExpiringMap1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PassiveExpiringMap<String, Long> passiveExpiringMap0 = new PassiveExpiringMap<String, Long>(1L);
      Long long0 = new Long(1L);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      PassiveExpiringMap<Object, Object> passiveExpiringMap1 = new PassiveExpiringMap<Object, Object>(0L, timeUnit0);
      passiveExpiringMap1.putIfAbsent(long0, (Object) null);
      boolean boolean0 = passiveExpiringMap1.containsValue(passiveExpiringMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PassiveExpiringMap<HashMap<Object, Object>, Object> passiveExpiringMap0 = null;
      try {
        passiveExpiringMap0 = new PassiveExpiringMap<HashMap<Object, Object>, Object>((PassiveExpiringMap.ExpirationPolicy<HashMap<Object, Object>, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Policy must not be null.
         //
         verifyException("org.apache.commons.collections4.map.PassiveExpiringMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PassiveExpiringMap<String, Integer> passiveExpiringMap0 = null;
      try {
        passiveExpiringMap0 = new PassiveExpiringMap<String, Integer>(0L, (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Time unit must not be null
         //
         verifyException("org.apache.commons.collections4.map.PassiveExpiringMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Integer> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Integer>(0L, timeUnit0);
      PassiveExpiringMap<String, Integer> passiveExpiringMap0 = new PassiveExpiringMap<String, Integer>(0L, timeUnit0);
      PassiveExpiringMap<String, Integer> passiveExpiringMap1 = new PassiveExpiringMap<String, Integer>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, passiveExpiringMap0);
      passiveExpiringMap1.map = null;
      // Undeclared exception!
      try { 
        passiveExpiringMap1.values();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PassiveExpiringMap<Integer, AbstractMap.SimpleEntry<Object, Integer>> passiveExpiringMap0 = new PassiveExpiringMap<Integer, AbstractMap.SimpleEntry<Object, Integer>>();
      int int0 = passiveExpiringMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PassiveExpiringMap<HashMap<String, Long>, AbstractMap.SimpleImmutableEntry<String, Long>> passiveExpiringMap0 = new PassiveExpiringMap<HashMap<String, Long>, AbstractMap.SimpleImmutableEntry<String, Long>>();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      Long long0 = new Long(1L);
      AbstractMap.SimpleImmutableEntry<String, Long> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Long>("-!Q<fa", long0);
      passiveExpiringMap0.putIfAbsent(hashMap0, abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, Long> abstractMap_SimpleImmutableEntry1 = passiveExpiringMap0.put(hashMap0, (AbstractMap.SimpleImmutableEntry<String, Long>) null);
      assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PassiveExpiringMap<Long, String> passiveExpiringMap0 = new PassiveExpiringMap<Long, String>();
      Collection<String> collection0 = passiveExpiringMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      PassiveExpiringMap<String, Integer> passiveExpiringMap0 = new PassiveExpiringMap<String, Integer>((-40L), timeUnit0);
      Set<String> set0 = passiveExpiringMap0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      PassiveExpiringMap<Object, String> passiveExpiringMap0 = new PassiveExpiringMap<Object, String>(845, timeUnit0, hashMap0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, String> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, String>((-2862L));
      PassiveExpiringMap<Long, String> passiveExpiringMap0 = new PassiveExpiringMap<Long, String>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      Set<Map.Entry<Long, String>> set0 = (Set<Map.Entry<Long, String>>)passiveExpiringMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      PassiveExpiringMap<Long, HashMap<Integer, Object>> passiveExpiringMap0 = new PassiveExpiringMap<Long, HashMap<Integer, Object>>(0L, timeUnit0);
      passiveExpiringMap0.clear();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      PassiveExpiringMap<Object, AbstractMap.SimpleEntry<Object, String>> passiveExpiringMap0 = new PassiveExpiringMap<Object, AbstractMap.SimpleEntry<Object, String>>(902L, timeUnit0);
      boolean boolean0 = passiveExpiringMap0.isEmpty();
      assertTrue(boolean0);
  }
}
