/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:32:26 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LoopingListIterator_ESTest extends LoopingListIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.push("");
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(linkedList0);
      loopingListIterator0.next();
      loopingListIterator0.set("");
      assertEquals(1, loopingListIterator0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("NO:pj0Fr");
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      loopingListIterator0.previous();
      loopingListIterator0.remove();
      assertEquals(0, loopingListIterator0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      loopingListIterator0.add(":qh|S9a`V b^");
      int int0 = loopingListIterator0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("The list must not be null");
      linkedList0.add("The list must not be null");
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      int int0 = loopingListIterator0.previousIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(linkedList0);
      Integer integer0 = loopingListIterator0.previous();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(1444);
      linkedList0.offer(integer0);
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(linkedList0);
      loopingListIterator0.add(integer0);
      loopingListIterator0.previous();
      loopingListIterator0.next();
      int int0 = loopingListIterator0.nextIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(linkedList0);
      Integer integer0 = loopingListIterator0.next();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(linkedList0);
      boolean boolean0 = loopingListIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      linkedList0.add("");
      // Undeclared exception!
      try { 
        loopingListIterator0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(linkedList0);
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        loopingListIterator0.previous();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(linkedList0);
      linkedList0.add((Object) loopingListIterator0);
      // Undeclared exception!
      try { 
        loopingListIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      linkedList0.add("");
      // Undeclared exception!
      try { 
        loopingListIterator0.add("");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      linkedList0.add("");
      loopingListIterator0.reset();
      loopingListIterator0.next();
      int int0 = loopingListIterator0.previousIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(linkedList0);
      // Undeclared exception!
      try { 
        loopingListIterator0.previousIndex();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // There are no elements for this iterator to loop on
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(linkedList0);
      // Undeclared exception!
      try { 
        loopingListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // There are no elements for this iterator to loop on
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(linkedList0);
      boolean boolean0 = loopingListIterator0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "");
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(linkedList0);
      boolean boolean0 = loopingListIterator0.hasPrevious();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(1444);
      linkedList0.offer(integer0);
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(linkedList0);
      int int0 = loopingListIterator0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(linkedList0);
      // Undeclared exception!
      try { 
        loopingListIterator0.nextIndex();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // There are no elements for this iterator to loop on
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      loopingListIterator0.add(":qh|S9a`V b^");
      int int0 = loopingListIterator0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      // Undeclared exception!
      try { 
        loopingListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // There are no elements for this iterator to loop on
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      loopingListIterator0.add(":qh|S9a`V b^");
      String string0 = loopingListIterator0.next();
      assertEquals(":qh|S9a`V b^", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      assertFalse(loopingListIterator0.hasNext());
      
      loopingListIterator0.add(":qh|S9a`V b^");
      boolean boolean0 = loopingListIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LoopingListIterator<Integer> loopingListIterator0 = null;
      try {
        loopingListIterator0 = new LoopingListIterator<Integer>((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The list must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(linkedList0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        loopingListIterator0.set(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(linkedList0);
      int int0 = loopingListIterator0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(linkedList0);
      // Undeclared exception!
      try { 
        loopingListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }
}
