/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:06:39 GMT 2019
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EmptyStackException;
import org.apache.commons.collections4.ArrayStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayStack_ESTest extends ArrayStack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayStack<Object> arrayStack0 = new ArrayStack<Object>();
      Object object0 = new Object();
      arrayStack0.push(object0);
      arrayStack0.push((Object) null);
      int int0 = arrayStack0.search((Object) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayStack<Object> arrayStack0 = new ArrayStack<Object>();
      Integer integer0 = new Integer(1050);
      Object object0 = arrayStack0.push(integer0);
      arrayStack0.add(object0);
      Object object1 = arrayStack0.pop();
      assertEquals(1050, object1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayStack<Object> arrayStack0 = new ArrayStack<Object>();
      Object object0 = new Object();
      arrayStack0.push(object0);
      arrayStack0.push((Object) null);
      Object object1 = arrayStack0.peek();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayStack<Object> arrayStack0 = new ArrayStack<Object>();
      arrayStack0.push((Object) null);
      Object object0 = arrayStack0.pop();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayStack<Object> arrayStack0 = new ArrayStack<Object>();
      Object object0 = new Object();
      arrayStack0.push(object0);
      Object object1 = arrayStack0.peek(0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayStack<Object> arrayStack0 = new ArrayStack<Object>(0);
      arrayStack0.add(0, (Object) null);
      Object object0 = arrayStack0.peek();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayStack<String> arrayStack0 = new ArrayStack<String>(0);
      ArrayStack<Object> arrayStack1 = new ArrayStack<Object>();
      arrayStack1.push(arrayStack0);
      boolean boolean0 = arrayStack1.empty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayStack<Object> arrayStack0 = new ArrayStack<Object>();
      // Undeclared exception!
      try { 
        arrayStack0.peek((-837));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 836, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayStack<String> arrayStack0 = null;
      try {
        arrayStack0 = new ArrayStack<String>((-1986));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1986
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayStack<Object> arrayStack0 = new ArrayStack<Object>();
      arrayStack0.push((Object) null);
      int int0 = arrayStack0.search((Object) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayStack<Object> arrayStack0 = new ArrayStack<Object>();
      Object object0 = new Object();
      arrayStack0.push(object0);
      int int0 = arrayStack0.search((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayStack<Object> arrayStack0 = new ArrayStack<Object>();
      Integer integer0 = new Integer(1050);
      Object object0 = arrayStack0.push(integer0);
      int int0 = arrayStack0.search(object0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayStack<String> arrayStack0 = new ArrayStack<String>(0);
      try { 
        arrayStack0.pop();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ArrayStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayStack<String> arrayStack0 = new ArrayStack<String>();
      try { 
        arrayStack0.peek(1);
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ArrayStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayStack<Object> arrayStack0 = new ArrayStack<Object>();
      arrayStack0.push((Object) null);
      Object object0 = arrayStack0.peek(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayStack<Object> arrayStack0 = new ArrayStack<Object>();
      try { 
        arrayStack0.peek();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ArrayStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayStack<Object> arrayStack0 = new ArrayStack<Object>();
      Object object0 = new Object();
      arrayStack0.push(object0);
      Object object1 = arrayStack0.peek();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayStack<String> arrayStack0 = new ArrayStack<String>(0);
      ArrayStack<Object> arrayStack1 = new ArrayStack<Object>();
      arrayStack1.push(arrayStack0);
      int int0 = arrayStack1.search("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayStack<String> arrayStack0 = new ArrayStack<String>();
      boolean boolean0 = arrayStack0.empty();
      assertTrue(boolean0);
  }
}
