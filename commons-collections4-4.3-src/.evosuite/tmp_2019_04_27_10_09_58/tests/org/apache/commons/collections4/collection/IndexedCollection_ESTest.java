/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:59:13 GMT 2019
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.collection.IndexedCollection;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IndexedCollection_ESTest extends IndexedCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
      Transformer<String, Object> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Object, String> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<String>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.contains(transformer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Integer integer0 = new Integer(2852);
      ConstantTransformer<Predicate<Object>, Integer> constantTransformer0 = new ConstantTransformer<Predicate<Object>, Integer>(integer0);
      IndexedCollection<Integer, Predicate<Object>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, (Transformer<Predicate<Object>, Integer>) constantTransformer0);
      boolean boolean0 = indexedCollection0.contains(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add(linkedList1);
      Transformer<LinkedList<Integer>, Predicate<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<LinkedList<Integer>>) linkedList0, transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.offer(integer0);
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transformer<Predicate<Object>, Integer> transformer0 = InvokerTransformer.invokerTransformer("5&(;44Qc^#Y~,");
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Predicate<Object>>) null, transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      Transformer<LinkedList<String>, Predicate<Object>> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.offerLast(linkedList1);
      linkedList0.add(linkedList1);
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<LinkedList<String>>) linkedList0, transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key in uniquely indexed collection.
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Boolean, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Transformer<Object, LinkedList<Integer>>> linkedList0 = new LinkedList<Transformer<Object, LinkedList<Integer>>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Transformer<Object, LinkedList<Integer>> transformer0 = ConstantTransformer.constantTransformer(linkedList1);
      linkedList0.add(transformer0);
      Transformer<Transformer<Object, LinkedList<Integer>>, Object> transformer1 = InvokerTransformer.invokerTransformer("|jo_^L?>X<0.");
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<Transformer<Object, LinkedList<Integer>>>) linkedList0, transformer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '|jo_^L?>X<0.' on 'class org.apache.commons.collections4.functors.ConstantTransformer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Closure<Predicate<Object>>> linkedList0 = new LinkedList<Closure<Predicate<Object>>>();
      linkedList0.push((Closure<Predicate<Object>>) null);
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<Closure<Predicate<Object>>>) linkedList0, (Transformer<Closure<Predicate<Object>>, Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transformer<Boolean, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Boolean, ? extends Integer>) null);
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<Boolean>) null, transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      Transformer<LinkedList<Integer>, Transformer<Object, LinkedList<Integer>>> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Transformer<Object, LinkedList<Integer>>, LinkedList<Integer>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<LinkedList<Integer>>) linkedList0, transformer0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add(linkedList1);
      LinkedList<Closure<Object>> linkedList2 = new LinkedList<Closure<Object>>();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<Closure<Object>, String> invokerTransformer0 = new InvokerTransformer<Closure<Object>, String>("", classArray0, classArray0);
      IndexedCollection<String, Closure<Object>> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Closure<Object>>) linkedList2, (Transformer<Closure<Object>, String>) invokerTransformer0);
      // Undeclared exception!
      try { 
        indexedCollection1.containsAll(indexedCollection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.LinkedList' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      Transformer<LinkedList<Integer>, Transformer<Object, LinkedList<Integer>>> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Transformer<Object, LinkedList<Integer>>, LinkedList<Integer>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<LinkedList<Integer>>) linkedList0, transformer0);
      LinkedList<Closure<Object>> linkedList1 = new LinkedList<Closure<Object>>();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      indexedCollection0.setCollection(indexedCollection0);
      InvokerTransformer<Closure<Object>, String> invokerTransformer0 = new InvokerTransformer<Closure<Object>, String>("", classArray0, classArray0);
      IndexedCollection<String, Closure<Object>> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Closure<Object>>) linkedList1, (Transformer<Closure<Object>, String>) invokerTransformer0);
      // Undeclared exception!
      try { 
        indexedCollection1.containsAll(indexedCollection0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Transformer<LinkedList<Integer>, LinkedList<Integer>> transformer0 = ClosureTransformer.closureTransformer((Closure<? super LinkedList<Integer>>) closure0);
      IndexedCollection<LinkedList<Integer>, LinkedList<Integer>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<LinkedList<Integer>>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      IndexedCollection<Predicate<Object>, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, (Transformer<Predicate<Object>, Predicate<Object>>) null);
      // Undeclared exception!
      try { 
        indexedCollection0.contains((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      IndexedCollection<LinkedList<String>, Predicate<Object>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, (Transformer<Predicate<Object>, LinkedList<String>>) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(indexedCollection0, defaultEquator0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(equalPredicate0);
      linkedList0.add(0, (Predicate<Object>) nullIsFalsePredicate0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      Transformer<LinkedList<Integer>, Object> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Object, LinkedList<Integer>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<LinkedList<Integer>>) linkedList0, transformer0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Transformer<Object, Boolean> transformer1 = ExceptionTransformer.exceptionTransformer();
      Transformer<LinkedList<Integer>, Boolean> transformer2 = IfTransformer.ifTransformer((Predicate<? super LinkedList<Integer>>) predicate0, (Transformer<? super LinkedList<Integer>, ? extends Boolean>) transformer1, (Transformer<? super LinkedList<Integer>, ? extends Boolean>) transformer1);
      IndexedCollection<Boolean, LinkedList<Integer>> indexedCollection1 = IndexedCollection.nonUniqueIndexedCollection((Collection<LinkedList<Integer>>) indexedCollection0, transformer2);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        indexedCollection1.add(linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<LinkedList<Integer>, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, LinkedList<Integer>>) null);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.functors.StringValueTransformer");
      IndexedCollection<String, Object> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) indexedCollection0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection1.add(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Boolean, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.remove(transformer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add(linkedList1);
      Transformer<LinkedList<Integer>, LinkedList<LinkedList<Integer>>> transformer0 = ConstantTransformer.constantTransformer(linkedList0);
      IndexedCollection<LinkedList<LinkedList<Integer>>, LinkedList<Integer>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<LinkedList<Integer>>) linkedList0, transformer0);
      indexedCollection0.reindex();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
      Transformer<String, Object> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Object, String> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<String>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.add("#$Z4DS!~|@lR3x$:]l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key in uniquely indexed collection.
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      Class<Boolean> class0 = Boolean.class;
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      HashMap<Predicate<Object>, Transformer<Object, LinkedList<Integer>>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, LinkedList<Integer>>>();
      Transformer<Object, Object> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ?>>) hashMap0);
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList1, transformer0);
      boolean boolean0 = indexedCollection0.add(class0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      ConstantTransformer<Object, LinkedList<Integer>> constantTransformer0 = new ConstantTransformer<Object, LinkedList<Integer>>(linkedList2);
      IndexedCollection<LinkedList<Integer>, Object> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList1, (Transformer<Object, LinkedList<Integer>>) constantTransformer0);
      boolean boolean1 = indexedCollection1.retainAll(linkedList0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = new Object();
      ConstantTransformer<String, Object> constantTransformer0 = new ConstantTransformer<String, Object>(object0);
      IndexedCollection<Object, String> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<String>) linkedList0, (Transformer<String, Object>) constantTransformer0);
      boolean boolean0 = indexedCollection0.retainAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Integer, Predicate<Object>> transformer0 = ConstantTransformer.constantTransformer((Predicate<Object>) uniquePredicate0);
      IndexedCollection<Predicate<Object>, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(indexedCollection0);
      Integer integer0 = new Integer(0);
      linkedList0.offer(integer0);
      Transformer<Integer, Boolean> transformer1 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Boolean, Integer> indexedCollection1 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList1, transformer1);
      boolean boolean0 = indexedCollection1.removeAll(indexedCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = new Object();
      ConstantTransformer<String, Object> constantTransformer0 = new ConstantTransformer<String, Object>(object0);
      IndexedCollection<Object, String> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<String>) linkedList0, (Transformer<String, Object>) constantTransformer0);
      String string0 = indexedCollection0.get((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = new Object();
      linkedList0.add((String) null);
      ConstantTransformer<String, Object> constantTransformer0 = new ConstantTransformer<String, Object>(object0);
      IndexedCollection<Object, String> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<String>) linkedList0, (Transformer<String, Object>) constantTransformer0);
      boolean boolean0 = indexedCollection0.containsAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Transformer<String, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, String> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<String>) linkedList0, transformer0);
      linkedList0.offer((String) null);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndexedCollection<LinkedList<Object>, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, LinkedList<Object>>) null);
      boolean boolean0 = indexedCollection0.addAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      IndexedCollection<LinkedList<Transformer>, String> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<String>) linkedList0, (Transformer<String, LinkedList<Transformer>>) null);
      InvokerTransformer<String, Object> invokerTransformer0 = new InvokerTransformer<String, Object>("org.apache.commons.collections4.functors.ConstantFactory", (Class<?>[]) null, (Object[]) null);
      IndexedCollection<Object, String> indexedCollection1 = IndexedCollection.nonUniqueIndexedCollection((Collection<String>) indexedCollection0, (Transformer<String, Object>) invokerTransformer0);
      Transformer<String, Predicate<String>> transformer0 = InvokerTransformer.invokerTransformer("Z.qAz\"W;cjQ DP<j^;");
      IndexedCollection<Predicate<String>, String> indexedCollection2 = IndexedCollection.uniqueIndexedCollection((Collection<String>) indexedCollection1, transformer0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) unaryOperator0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(indexedCollection2);
      // Undeclared exception!
      try { 
        indexedCollection1.contains(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.functors.ConstantFactory' on 'class java.lang.Boolean' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndexedCollection<LinkedList<Object>, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, LinkedList<Object>>) null);
      Transformer<Integer, Integer> transformer0 = InvokerTransformer.invokerTransformer("Duplicate key in uniquely indexed collection.");
      IndexedCollection<Integer, Integer> indexedCollection1 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) indexedCollection0, transformer0);
      indexedCollection1.clear();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Transformer<Boolean, LinkedList<LinkedList<Integer>>> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<LinkedList<LinkedList<Integer>>, Boolean> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Boolean>) linkedList0, transformer0);
      LinkedList<LinkedList<Integer>> linkedList1 = new LinkedList<LinkedList<Integer>>();
      Collection<Boolean> collection0 = indexedCollection0.values(linkedList1);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Transformer<Object, LinkedList<Integer>>> linkedList0 = new LinkedList<Transformer<Object, LinkedList<Integer>>>();
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 1);
      linkedList0.add((Transformer<Object, LinkedList<Integer>>) null);
      Transformer<Transformer<Object, LinkedList<Integer>>, Boolean> transformer0 = InvokerTransformer.invokerTransformer("\"0@+", (Class<?>[]) classArray0, (Object[]) classArray0);
      IndexedCollection<Boolean, Transformer<Object, LinkedList<Integer>>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Transformer<Object, LinkedList<Integer>>>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.removeAll(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }
}
