/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:37:46 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.ObjectGraphIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectGraphIterator_ESTest extends ObjectGraphIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      boolean boolean0 = linkedList0.add("[@6'rO|\"C`M");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("[@6'rO|\"C`M"));
      assertTrue(boolean0);
      
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(listIterator0);
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(linkedList0.contains("[@6'rO|\"C`M"));
      assertNotNull(objectGraphIterator0);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.findNext(listIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.push("4J:y*Cw*| ");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("4J:y*Cw*| "));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(linkedList0.contains("4J:y*Cw*| "));
      assertNotNull(listIterator0);
      
      Predicate<Object> predicate0 = null;
      String string0 = "";
      Predicate<Object> predicate1 = IdentityPredicate.identityPredicate((Object) "");
      assertNotNull(predicate1);
      
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, predicate1);
      assertNotNull(andPredicate0);
      
      LinkedList<InstanceofPredicate> linkedList1 = new LinkedList<InstanceofPredicate>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      ListIterator<InstanceofPredicate> listIterator1 = linkedList1.listIterator(0);
      assertEquals(0, linkedList1.size());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertNotNull(listIterator1);
      
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator0 = new ObjectGraphIterator<InstanceofPredicate>(listIterator1);
      assertEquals(0, linkedList1.size());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertNotNull(objectGraphIterator0);
      
      boolean boolean0 = objectGraphIterator0.hasNext();
      assertEquals(0, linkedList1.size());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertFalse(boolean0);
      
      Class<String> class0 = String.class;
      Class<Boolean> class1 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      assertNotNull(instanceofPredicate0);
      
      boolean boolean1 = linkedList1.add(instanceofPredicate0);
      assertEquals(1, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList1.contains(instanceofPredicate0));
      assertTrue(boolean1);
      
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate1);
      
      boolean boolean2 = linkedList1.add(instanceofPredicate1);
      assertEquals(2, linkedList1.size());
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(instanceofPredicate1, instanceofPredicate0);
      assertTrue(linkedList1.contains(instanceofPredicate1));
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "GK(x8/fHmT:h";
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("GK(x8/fHmT:h");
      assertNotNull(transformer0);
      
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Predicate<String> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      assertNotNull(predicateTransformer0);
      
      Boolean boolean0 = predicateTransformer0.transform("");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(boolean0));
      assertTrue(boolean1);
      
      Integer integer0 = new Integer((-1052));
      assertNotNull(integer0);
      assertEquals((-1052), (int)integer0);
      
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      assertNotNull(predicate1);
      
      IfTransformer<Object, Integer> ifTransformer0 = new IfTransformer<Object, Integer>(predicate1, (Transformer<? super Object, ? extends Integer>) null, (Transformer<? super Object, ? extends Integer>) null);
      assertNotNull(ifTransformer0);
      
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, ifTransformer0);
      assertNotNull(objectGraphIterator0);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.updateCurrentIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, transformer0);
      assertNotNull(objectGraphIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectGraphIterator0.forEachRemaining(consumer0);
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>(objectGraphIterator0);
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      assertNotNull(objectGraphIterator1);
      
      ObjectGraphIterator<Integer> objectGraphIterator2 = new ObjectGraphIterator<Integer>(objectGraphIterator0);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator2.equals((Object)objectGraphIterator0));
      assertFalse(objectGraphIterator2.equals((Object)objectGraphIterator1));
      assertNotNull(objectGraphIterator2);
      
      objectGraphIterator1.findNextByIterator(objectGraphIterator2);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator2));
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator2));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      assertFalse(objectGraphIterator2.equals((Object)objectGraphIterator0));
      assertFalse(objectGraphIterator2.equals((Object)objectGraphIterator1));
      assertNotSame(objectGraphIterator0, objectGraphIterator2);
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotSame(objectGraphIterator1, objectGraphIterator2);
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
      assertNotSame(objectGraphIterator2, objectGraphIterator0);
      assertNotSame(objectGraphIterator2, objectGraphIterator1);
      
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      assertNotNull(predicateTransformer0);
      
      // Undeclared exception!
      try { 
        predicateTransformer0.transform("Iterator remove() cannot be called at this time");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(constantTransformer0);
      
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, constantTransformer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(objectGraphIterator0);
      
      objectGraphIterator0.updateCurrentIterator();
      assertTrue(integer0.equals((Object)int0));
      
      objectGraphIterator0.updateCurrentIterator();
      assertTrue(integer0.equals((Object)int0));
      
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>(integer0, constantTransformer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      assertNotNull(objectGraphIterator1);
      
      objectGraphIterator0.findNextByIterator(objectGraphIterator1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
      
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(predicate0);
      
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      ObjectGraphIterator<Predicate<Object>> objectGraphIterator2 = new ObjectGraphIterator<Predicate<Object>>(predicate0, transformer0);
      assertEquals(0, linkedList0.size());
      assertNotNull(objectGraphIterator2);
      
      // Undeclared exception!
      try { 
        objectGraphIterator2.hasNext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 4);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      classArray0[0] = class0;
      Class<InstanceofPredicate> class1 = InstanceofPredicate.class;
      classArray0[1] = class1;
      Class<InstanceofPredicate> class2 = InstanceofPredicate.class;
      classArray0[2] = class2;
      Class<InstanceofPredicate> class3 = InstanceofPredicate.class;
      classArray0[3] = class3;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) class1;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class1;
      objectArray0[4] = (Object) class1;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("The prototype must be cloneable via a public clone method", classArray0, objectArray0);
      assertEquals(4, classArray0.length);
      assertEquals(5, objectArray0.length);
      assertNotNull(invokerTransformer0);
      
      ObjectGraphIterator<String> objectGraphIterator0 = new ObjectGraphIterator<String>("org.apache.commons.collections4.iterators.ObjectGraphIterator", invokerTransformer0);
      assertEquals(4, classArray0.length);
      assertEquals(5, objectArray0.length);
      assertNotNull(objectGraphIterator0);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'The prototype must be cloneable via a public clone method' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      ObjectGraphIterator<String> objectGraphIterator0 = new ObjectGraphIterator<String>("L3Gg", transformer0);
      assertNotNull(objectGraphIterator0);
      
      ObjectGraphIterator<Object> objectGraphIterator1 = new ObjectGraphIterator<Object>(objectGraphIterator0, transformer0);
      assertNotNull(objectGraphIterator1);
      
      objectGraphIterator1.findNextByIterator(objectGraphIterator0);
      Object object0 = objectGraphIterator1.next();
      assertNull(object0);
      
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      Class<String> class1 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class1);
      assertNotNull(predicate0);
      
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer1 = ConstantTransformer.constantTransformer(instanceofPredicate0);
      assertFalse(instanceofPredicate0.equals((Object)predicate0));
      assertNotSame(instanceofPredicate0, predicate0);
      assertNotNull(transformer1);
      
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator2 = new ObjectGraphIterator<InstanceofPredicate>(instanceofPredicate0, transformer1);
      assertFalse(instanceofPredicate0.equals((Object)predicate0));
      assertNotNull(objectGraphIterator2);
      
      InstanceofPredicate instanceofPredicate1 = objectGraphIterator2.next();
      assertFalse(instanceofPredicate0.equals((Object)predicate0));
      assertFalse(instanceofPredicate1.equals((Object)predicate0));
      assertNotSame(instanceofPredicate0, predicate0);
      assertSame(instanceofPredicate0, instanceofPredicate1);
      assertNotSame(instanceofPredicate1, predicate0);
      assertSame(instanceofPredicate1, instanceofPredicate0);
      assertNotNull(instanceofPredicate1);
      
      Integer integer0 = new Integer(1983);
      assertNotNull(integer0);
      assertEquals(1983, (int)integer0);
      
      Factory<Integer> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      Transformer<Object, Integer> transformer2 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) factory0);
      assertNotNull(transformer2);
      
      ObjectGraphIterator<Integer> objectGraphIterator3 = new ObjectGraphIterator<Integer>(integer0, transformer2);
      assertNotNull(objectGraphIterator3);
      
      // Undeclared exception!
      try { 
        objectGraphIterator3.findNextByIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>((Iterator<?>) null);
      assertNotNull(objectGraphIterator0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      objectGraphIterator0.findNextByIterator(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.findNextByIterator((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(560);
      assertNotNull(integer0);
      assertEquals(560, (int)integer0);
      
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>(integer0);
      assertNotNull(constantTransformer0);
      
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, constantTransformer0);
      assertNotNull(objectGraphIterator0);
      
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer(":");
      assertNotNull(transformer0);
      
      Transformer<Predicate<Object>, Transformer<Object, String>> transformer1 = ConstantTransformer.constantTransformer(transformer0);
      assertNotNull(transformer1);
      
      boolean boolean0 = objectGraphIterator0.hasNext();
      assertTrue(boolean0);
      
      objectGraphIterator0.updateCurrentIterator();
      String string0 = ":-M'fUJ76B|q=|0ur01";
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Transformer<Object, InstanceofPredicate> transformer2 = InvokerTransformer.invokerTransformer(":-M'fUJ76B|q=|0ur01", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertEquals(1, classArray0.length);
      assertNotNull(transformer2);
      
      ObjectGraphIterator<Predicate<Object>> objectGraphIterator1 = new ObjectGraphIterator<Predicate<Object>>((Predicate<Object>) null, transformer2);
      assertEquals(1, classArray0.length);
      assertNotNull(objectGraphIterator1);
      
      boolean boolean1 = objectGraphIterator1.hasNext();
      assertEquals(1, classArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectGraphIterator<Object> objectGraphIterator2 = new ObjectGraphIterator<Object>(object0, transformer2);
      assertEquals(1, classArray0.length);
      assertNotNull(objectGraphIterator2);
      
      // Undeclared exception!
      try { 
        objectGraphIterator2.updateCurrentIterator();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ':-M'fUJ76B|q=|0ur01' on 'class java.lang.Object' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<InstanceofPredicate> listIterator0 = linkedList0.listIterator(0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator0 = new ObjectGraphIterator<InstanceofPredicate>(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(objectGraphIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = objectGraphIterator0.hasNext();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(boolean0);
      
      objectGraphIterator0.forEachRemaining(consumer0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator1 = new ObjectGraphIterator<InstanceofPredicate>(objectGraphIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      assertNotNull(objectGraphIterator1);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No more elements in the iteration
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, transformer0);
      assertNotNull(objectGraphIterator0);
      
      ObjectGraphIterator<Object> objectGraphIterator1 = new ObjectGraphIterator<Object>(objectGraphIterator0);
      assertNotNull(objectGraphIterator1);
      
      objectGraphIterator1.findNext((Object) null);
      objectGraphIterator1.updateCurrentIterator();
      objectGraphIterator1.updateCurrentIterator();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("InstantiateFactory: InstantiationException", classArray0, classArray0);
      assertEquals(5, classArray0.length);
      assertNotNull(invokerTransformer0);
      
      ObjectGraphIterator<String> objectGraphIterator2 = new ObjectGraphIterator<String>("InstantiateFactory: InstantiationException", invokerTransformer0);
      assertEquals(5, classArray0.length);
      assertNotNull(objectGraphIterator2);
      
      ObjectGraphIterator<String> objectGraphIterator3 = new ObjectGraphIterator<String>(objectGraphIterator2);
      assertEquals(5, classArray0.length);
      assertFalse(objectGraphIterator3.equals((Object)objectGraphIterator2));
      assertNotNull(objectGraphIterator3);
      
      // Undeclared exception!
      try { 
        objectGraphIterator3.hasNext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'InstantiateFactory: InstantiationException' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ObjectGraphIterator<String> objectGraphIterator0 = new ObjectGraphIterator<String>(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(objectGraphIterator0);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No more elements in the iteration
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectGraphIterator<Closure<Object>> objectGraphIterator0 = new ObjectGraphIterator<Closure<Object>>((Closure<Object>) null, (Transformer<? super Closure<Object>, ? extends Closure<Object>>) null);
      assertNotNull(objectGraphIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectGraphIterator0.forEachRemaining(consumer0);
      objectGraphIterator0.findNext((Closure<Object>) null);
      boolean boolean0 = objectGraphIterator0.hasNext();
      assertTrue(boolean0);
      
      objectGraphIterator0.updateCurrentIterator();
      ObjectGraphIterator<Object> objectGraphIterator1 = new ObjectGraphIterator<Object>(objectGraphIterator0);
      assertNotNull(objectGraphIterator1);
      
      Object object0 = objectGraphIterator1.next();
      assertNull(object0);
      
      objectGraphIterator1.findNext((Object) null);
      objectGraphIterator1.findNextByIterator(objectGraphIterator0);
      boolean boolean1 = objectGraphIterator0.hasNext();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = objectGraphIterator0.hasNext();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        objectGraphIterator1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1820);
      assertNotNull(integer0);
      assertEquals(1820, (int)integer0);
      
      Transformer<Integer, Integer> transformer0 = CloneTransformer.cloneTransformer();
      assertNotNull(transformer0);
      
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, transformer0);
      assertNotNull(objectGraphIterator0);
      
      ObjectGraphIterator<Object> objectGraphIterator1 = new ObjectGraphIterator<Object>(objectGraphIterator0);
      assertNotNull(objectGraphIterator1);
      
      objectGraphIterator1.updateCurrentIterator();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-1330));
      assertNotNull(integer0);
      assertEquals((-1330), (int)integer0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Class<Object> class7 = Object.class;
      classArray0[7] = class7;
      Class<Object> class8 = Object.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("'XYZKQo(]f^S>", classArray0, classArray0);
      assertEquals(9, classArray0.length);
      assertNotNull(invokerTransformer0);
      
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, invokerTransformer0);
      assertEquals(9, classArray0.length);
      assertNotNull(objectGraphIterator0);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.findNextByIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      ObjectGraphIterator<String> objectGraphIterator0 = new ObjectGraphIterator<String>(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(objectGraphIterator0);
      
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      objectGraphIterator0.findNext("");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains(""));
      
      Factory<InstanceofPredicate> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      FactoryTransformer<Object, InstanceofPredicate> factoryTransformer0 = new FactoryTransformer<Object, InstanceofPredicate>(factory0);
      assertNotNull(factoryTransformer0);
      
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator1 = new ObjectGraphIterator<InstanceofPredicate>(instanceofPredicate0, factoryTransformer0);
      assertNotNull(objectGraphIterator1);
      
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator2 = new ObjectGraphIterator<InstanceofPredicate>(objectGraphIterator1);
      assertFalse(objectGraphIterator2.equals((Object)objectGraphIterator1));
      assertNotNull(objectGraphIterator2);
      
      // Undeclared exception!
      try { 
        objectGraphIterator2.findNextByIterator(objectGraphIterator1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Transformer<Integer, Integer> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertEquals(5, classArray0.length);
      assertNotNull(transformer0);
      
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, transformer0);
      assertEquals(5, classArray0.length);
      assertNotNull(objectGraphIterator0);
      
      ObjectGraphIterator<Object> objectGraphIterator1 = new ObjectGraphIterator<Object>(objectGraphIterator0);
      assertEquals(5, classArray0.length);
      assertNotNull(objectGraphIterator1);
      
      objectGraphIterator1.findNext((Object) null);
      assertEquals(5, classArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectGraphIterator1.findNext(object0);
      assertEquals(5, classArray0.length);
      
      // Undeclared exception!
      try { 
        objectGraphIterator1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Transformer<Boolean, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      Transformer<Integer, InstanceofPredicate> transformer1 = ConstantTransformer.constantTransformer(instanceofPredicate0);
      assertNotNull(transformer1);
      
      ObjectGraphIterator<Transformer<Integer, InstanceofPredicate>> objectGraphIterator0 = new ObjectGraphIterator<Transformer<Integer, InstanceofPredicate>>(transformer1, (Transformer<? super Transformer<Integer, InstanceofPredicate>, ? extends Transformer<Integer, InstanceofPredicate>>) null);
      assertNotNull(objectGraphIterator0);
      
      ObjectGraphIterator<Transformer<Integer, InstanceofPredicate>> objectGraphIterator1 = new ObjectGraphIterator<Transformer<Integer, InstanceofPredicate>>(objectGraphIterator0);
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      assertNotNull(objectGraphIterator1);
      
      boolean boolean0 = objectGraphIterator1.hasNext();
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      Transformer<Object, InstanceofPredicate> transformer0 = ConstantTransformer.constantTransformer(instanceofPredicate0);
      assertNotNull(transformer0);
      
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator0 = new ObjectGraphIterator<InstanceofPredicate>(instanceofPredicate0, transformer0);
      assertNotNull(objectGraphIterator0);
      
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator1 = new ObjectGraphIterator<InstanceofPredicate>(objectGraphIterator0);
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      assertNotNull(objectGraphIterator1);
      
      InstanceofPredicate instanceofPredicate1 = objectGraphIterator1.next();
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      assertSame(instanceofPredicate0, instanceofPredicate1);
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
      assertSame(instanceofPredicate1, instanceofPredicate0);
      assertNotNull(instanceofPredicate1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      assertNotNull(constantTransformer0);
      
      IfTransformer<Object, InstanceofPredicate> ifTransformer0 = new IfTransformer<Object, InstanceofPredicate>(instanceofPredicate0, constantTransformer0, constantTransformer0);
      assertNotNull(ifTransformer0);
      
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator0 = new ObjectGraphIterator<InstanceofPredicate>(instanceofPredicate0, ifTransformer0);
      assertNotNull(objectGraphIterator0);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(transformer0);
      
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(object0, transformer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(objectGraphIterator0);
      
      boolean boolean0 = objectGraphIterator0.hasNext();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(objectGraphIterator0);
      
      objectGraphIterator0.findNext(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      boolean boolean0 = objectGraphIterator0.hasNext();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transformer<Object, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.ObjectGraphIterator");
      assertNotNull(transformer0);
      
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator0 = new ObjectGraphIterator<InstanceofPredicate>((InstanceofPredicate) null, transformer0);
      assertNotNull(objectGraphIterator0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Transformer> class0 = Transformer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator0 = new ObjectGraphIterator<InstanceofPredicate>(instanceofPredicate0, transformer0);
      ObjectGraphIterator<String> objectGraphIterator1 = new ObjectGraphIterator<String>("vrHPkzB)DEjz`[XkR", (Transformer<? super String, ? extends String>) null);
      ObjectGraphIterator<String> objectGraphIterator2 = new ObjectGraphIterator<String>("KMe", (Transformer<? super String, ? extends String>) null);
      objectGraphIterator2.findNext("vrHPkzB)DEjz`[XkR");
      objectGraphIterator2.updateCurrentIterator();
      objectGraphIterator1.findNextByIterator(objectGraphIterator2);
      objectGraphIterator1.next();
      // Undeclared exception!
      try { 
        objectGraphIterator1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ObjectGraphIterator<Transformer<Integer, InstanceofPredicate>> objectGraphIterator0 = new ObjectGraphIterator<Transformer<Integer, InstanceofPredicate>>((Iterator<? extends Transformer<Integer, InstanceofPredicate>>) null);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Integer>>) linkedList0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstantiateFactory<InstanceofPredicate> instantiateFactory0 = null;
      try {
        instantiateFactory0 = new InstantiateFactory<InstanceofPredicate>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      ObjectGraphIterator<String> objectGraphIterator0 = new ObjectGraphIterator<String>("(", transformer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push("4J:y*Cw*| ");
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      // Undeclared exception!
      try { 
        objectGraphIterator0.findNextByIterator(listIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[2] = predicate1;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 1);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("lJ");
      transformerArray0[0] = transformer0;
      uniquePredicate0.evaluate("lJ");
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, transformer0);
      switchTransformer0.getPredicates();
      ObjectGraphIterator<String> objectGraphIterator0 = new ObjectGraphIterator<String>("lJ", switchTransformer0);
      ObjectGraphIterator<String> objectGraphIterator1 = new ObjectGraphIterator<String>(objectGraphIterator0);
      ObjectGraphIterator<String> objectGraphIterator2 = new ObjectGraphIterator<String>(objectGraphIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectGraphIterator2.forEachRemaining(consumer0);
      objectGraphIterator1.findNextByIterator(objectGraphIterator2);
      Integer integer0 = new Integer(8);
      Transformer<Integer, Integer> transformer1 = ConstantTransformer.nullTransformer();
      ObjectGraphIterator<Integer> objectGraphIterator3 = new ObjectGraphIterator<Integer>(integer0, transformer1);
      ObjectGraphIterator<Integer> objectGraphIterator4 = new ObjectGraphIterator<Integer>(objectGraphIterator3);
      ObjectGraphIterator<Object> objectGraphIterator5 = new ObjectGraphIterator<Object>(objectGraphIterator1, transformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator5.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(instanceofPredicate0, closure0);
      closureArray0[1] = (Closure<Object>) ifClosure0;
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) instanceofPredicate0, (Closure<? super Object>) closureArray0[1]);
      closureArray0[2] = closure1;
      Closure<Object> closure2 = IfClosure.ifClosure((Predicate<? super Object>) instanceofPredicate0, (Closure<? super Object>) closure1, (Closure<? super Object>) closure1);
      closureArray0[3] = closure2;
      Closure<InstanceofPredicate> closure3 = ChainedClosure.chainedClosure((Closure<? super InstanceofPredicate>[]) closureArray0);
      ClosureTransformer<InstanceofPredicate> closureTransformer0 = new ClosureTransformer<InstanceofPredicate>(closure3);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) instanceofPredicate0);
      Consumer<InstanceofPredicate> consumer0 = (Consumer<InstanceofPredicate>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      linkedList0.listIterator(0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      ObjectGraphIterator<String> objectGraphIterator0 = new ObjectGraphIterator<String>(listIterator0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No more elements in the iteration
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }
}
