/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:20:05 GMT 2019
 */

package org.apache.commons.collections4.queue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.stream.Stream;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CircularFifoQueue_ESTest extends CircularFifoQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("97/Sq5HR /( ]<");
      assertTrue(linkedList0.contains("97/Sq5HR /( ]<"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      linkedList0.addLast("97/Sq5HR /( ]<");
      assertTrue(linkedList0.contains("97/Sq5HR /( ]<"));
      assertEquals(2, linkedList0.size());
      
      boolean boolean1 = linkedList0.add("p6i(HW8WndXuP)>~!");
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains("p6i(HW8WndXuP)>~!"));
      assertEquals(3, linkedList0.size());
      assertTrue(boolean1);
      
      boolean boolean2 = linkedList0.add("eD!sB8?k{d'QIRh");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(linkedList0.contains("p6i(HW8WndXuP)>~!"));
      assertEquals(4, linkedList0.size());
      assertTrue(boolean2);
      
      boolean boolean3 = linkedList0.add("R");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(linkedList0.contains("p6i(HW8WndXuP)>~!"));
      assertEquals(5, linkedList0.size());
      assertTrue(boolean3);
      
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      assertFalse(circularFifoQueue0.contains("p6i(HW8WndXuP)>~!"));
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isEmpty());
      assertEquals(0, circularFifoQueue0.size());
      assertNotNull(circularFifoQueue0);
      
      boolean boolean4 = circularFifoQueue0.addAll(linkedList0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(linkedList0.contains("p6i(HW8WndXuP)>~!"));
      assertTrue(circularFifoQueue0.contains("p6i(HW8WndXuP)>~!"));
      assertEquals(5, linkedList0.size());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(5, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertTrue(boolean4);
      
      boolean boolean5 = circularFifoQueue0.remove("p6i(HW8WndXuP)>~!");
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(circularFifoQueue0.contains("p6i(HW8WndXuP)>~!"));
      assertTrue(circularFifoQueue0.contains("R"));
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(4, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.addLast("97/Sq5HR /( ]<");
      assertTrue(linkedList0.contains("97/Sq5HR /( ]<"));
      assertEquals(1, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("p6i(HW8WndXuP)>~!");
      assertTrue(linkedList0.contains("97/Sq5HR /( ]<"));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add("R");
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains("97/Sq5HR /( ]<"));
      assertEquals(3, linkedList0.size());
      assertTrue(boolean1);
      
      boolean boolean2 = linkedList0.add("Ua(+~If'Pz%#Y");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(linkedList0.contains("97/Sq5HR /( ]<"));
      assertEquals(4, linkedList0.size());
      assertTrue(boolean2);
      
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      assertFalse(circularFifoQueue0.contains("97/Sq5HR /( ]<"));
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(0, circularFifoQueue0.size());
      assertNotNull(circularFifoQueue0);
      
      boolean boolean3 = circularFifoQueue0.addAll(linkedList0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(linkedList0.contains("97/Sq5HR /( ]<"));
      assertTrue(circularFifoQueue0.contains("97/Sq5HR /( ]<"));
      assertEquals(4, linkedList0.size());
      assertEquals(4, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertTrue(boolean3);
      
      boolean boolean4 = circularFifoQueue0.remove("p6i(HW8WndXuP)>~!");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(circularFifoQueue0.contains("p6i(HW8WndXuP)>~!"));
      assertTrue(circularFifoQueue0.contains("97/Sq5HR /( ]<"));
      assertEquals(3, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.addLast("97/Sq5HR /( ]<");
      assertTrue(linkedList0.contains("97/Sq5HR /( ]<"));
      assertEquals(1, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("p6i(HW8WndXuP)>~!");
      assertTrue(linkedList0.contains("p6i(HW8WndXuP)>~!"));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean0);
      
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      assertFalse(circularFifoQueue0.contains("p6i(HW8WndXuP)>~!"));
      assertEquals(0, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertNotNull(circularFifoQueue0);
      
      boolean boolean1 = circularFifoQueue0.addAll(linkedList0);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains("p6i(HW8WndXuP)>~!"));
      assertTrue(circularFifoQueue0.contains("p6i(HW8WndXuP)>~!"));
      assertEquals(2, linkedList0.size());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertEquals(2, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isEmpty());
      assertTrue(boolean1);
      
      boolean boolean2 = circularFifoQueue0.remove("p6i(HW8WndXuP)>~!");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(circularFifoQueue0.contains("97/Sq5HR /( ]<"));
      assertFalse(circularFifoQueue0.contains("p6i(HW8WndXuP)>~!"));
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(1, circularFifoQueue0.size());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isEmpty());
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      assertTrue(circularFifoQueue0.isEmpty());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(0, circularFifoQueue0.size());
      assertNotNull(circularFifoQueue0);
      
      Integer integer0 = new Integer(1661);
      assertNotNull(integer0);
      assertEquals(1661, (int)integer0);
      
      boolean boolean0 = circularFifoQueue0.add(integer0);
      assertTrue(circularFifoQueue0.contains(1661));
      assertEquals(1, circularFifoQueue0.size());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertTrue(boolean0);
      
      boolean boolean1 = circularFifoQueue0.add("");
      assertTrue(boolean1 == boolean0);
      assertTrue(circularFifoQueue0.contains(1661));
      assertEquals(2, circularFifoQueue0.size());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertTrue(boolean1);
      
      Object object0 = circularFifoQueue0.get(1);
      assertFalse(circularFifoQueue0.contains(1));
      assertTrue(circularFifoQueue0.contains(1661));
      assertEquals(2, circularFifoQueue0.size());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertNotNull(object0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      assertEquals(32, circularFifoQueue0.maxSize());
      assertEquals(0, circularFifoQueue0.size());
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertNotNull(circularFifoQueue0);
      
      // Undeclared exception!
      try { 
        circularFifoQueue0.get(0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // The specified index (0) is outside the available range [0, 0)
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CircularFifoQueue<String> circularFifoQueue0 = new CircularFifoQueue<String>(610);
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(0, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isFull());
      assertTrue(circularFifoQueue0.isEmpty());
      assertEquals(610, circularFifoQueue0.maxSize());
      assertNotNull(circularFifoQueue0);
      
      boolean boolean0 = circularFifoQueue0.offer("NG");
      assertTrue(circularFifoQueue0.contains("NG"));
      assertEquals(1, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isEmpty());
      assertEquals(610, circularFifoQueue0.maxSize());
      assertTrue(boolean0);
      
      boolean boolean1 = circularFifoQueue0.add(";iK{()");
      assertTrue(boolean1 == boolean0);
      assertTrue(circularFifoQueue0.contains(";iK{()"));
      assertEquals(2, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isEmpty());
      assertEquals(610, circularFifoQueue0.maxSize());
      assertTrue(boolean1);
      
      String string0 = circularFifoQueue0.remove();
      assertTrue(circularFifoQueue0.contains(";iK{()"));
      assertFalse(circularFifoQueue0.contains(string0));
      assertEquals(1, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isEmpty());
      assertEquals(610, circularFifoQueue0.maxSize());
      assertNotNull(string0);
      assertEquals("NG", string0);
      
      CircularFifoQueue<Object> circularFifoQueue1 = new CircularFifoQueue<Object>(circularFifoQueue0);
      assertTrue(circularFifoQueue0.contains(";iK{()"));
      assertFalse(circularFifoQueue0.contains(string0));
      assertTrue(circularFifoQueue1.contains(";iK{()"));
      assertFalse(circularFifoQueue1.contains(610));
      assertEquals(1, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isEmpty());
      assertEquals(610, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue1.isFull());
      assertTrue(circularFifoQueue1.isAtFullCapacity());
      assertEquals(1, circularFifoQueue1.size());
      assertEquals(1, circularFifoQueue1.maxSize());
      assertFalse(circularFifoQueue1.isEmpty());
      assertNotNull(circularFifoQueue1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(0, circularFifoQueue0.size());
      assertTrue(circularFifoQueue0.isEmpty());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isFull());
      assertNotNull(circularFifoQueue0);
      
      Iterator<Object> iterator0 = circularFifoQueue0.iterator();
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(0, circularFifoQueue0.size());
      assertTrue(circularFifoQueue0.isEmpty());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isFull());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CircularFifoQueue<String> circularFifoQueue0 = null;
      try {
        circularFifoQueue0 = new CircularFifoQueue<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Integer) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      CircularFifoQueue<Integer> circularFifoQueue0 = null;
      try {
        circularFifoQueue0 = new CircularFifoQueue<Integer>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Attempted to add null object to queue
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CircularFifoQueue<String> circularFifoQueue0 = new CircularFifoQueue<String>();
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(0, circularFifoQueue0.size());
      assertNotNull(circularFifoQueue0);
      
      boolean boolean0 = circularFifoQueue0.add("");
      assertTrue(circularFifoQueue0.contains(""));
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isEmpty());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(1, circularFifoQueue0.size());
      assertTrue(boolean0);
      
      String string0 = circularFifoQueue0.peek();
      assertTrue(circularFifoQueue0.contains(""));
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isEmpty());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(1, circularFifoQueue0.size());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CircularFifoQueue<String> circularFifoQueue0 = new CircularFifoQueue<String>();
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isEmpty());
      assertEquals(0, circularFifoQueue0.size());
      assertNotNull(circularFifoQueue0);
      
      // Undeclared exception!
      try { 
        circularFifoQueue0.add((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Attempted to add null object to queue
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>(1183);
      assertFalse(circularFifoQueue0.contains(1183));
      assertFalse(circularFifoQueue0.isFull());
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(0, circularFifoQueue0.size());
      assertEquals(1183, circularFifoQueue0.maxSize());
      assertNotNull(circularFifoQueue0);
      
      boolean boolean0 = circularFifoQueue0.isAtFullCapacity();
      assertFalse(circularFifoQueue0.contains(1183));
      assertFalse(circularFifoQueue0.isFull());
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(0, circularFifoQueue0.size());
      assertEquals(1183, circularFifoQueue0.maxSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("Ixn-`R,DBo");
      assertTrue(linkedList0.contains("Ixn-`R,DBo"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      CircularFifoQueue<String> circularFifoQueue0 = new CircularFifoQueue<String>(linkedList0);
      assertTrue(linkedList0.contains("Ixn-`R,DBo"));
      assertTrue(circularFifoQueue0.contains("Ixn-`R,DBo"));
      assertEquals(1, linkedList0.size());
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isEmpty());
      assertEquals(1, circularFifoQueue0.size());
      assertEquals(1, circularFifoQueue0.maxSize());
      assertNotNull(circularFifoQueue0);
      
      boolean boolean1 = circularFifoQueue0.isAtFullCapacity();
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains("Ixn-`R,DBo"));
      assertTrue(circularFifoQueue0.contains("Ixn-`R,DBo"));
      assertEquals(1, linkedList0.size());
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isEmpty());
      assertEquals(1, circularFifoQueue0.size());
      assertEquals(1, circularFifoQueue0.maxSize());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      assertEquals(32, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(0, circularFifoQueue0.size());
      assertNotNull(circularFifoQueue0);
      
      boolean boolean0 = circularFifoQueue0.isEmpty();
      assertEquals(32, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(0, circularFifoQueue0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CircularFifoQueue<String> circularFifoQueue0 = new CircularFifoQueue<String>();
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isEmpty());
      assertEquals(0, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertNotNull(circularFifoQueue0);
      
      boolean boolean0 = circularFifoQueue0.add("");
      assertTrue(circularFifoQueue0.contains(""));
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(1, circularFifoQueue0.size());
      assertTrue(boolean0);
      
      CircularFifoQueue<Object> circularFifoQueue1 = new CircularFifoQueue<Object>(circularFifoQueue0);
      assertTrue(circularFifoQueue0.contains(""));
      assertTrue(circularFifoQueue1.contains(""));
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(1, circularFifoQueue0.size());
      assertFalse(circularFifoQueue1.isFull());
      assertEquals(1, circularFifoQueue1.maxSize());
      assertFalse(circularFifoQueue1.isEmpty());
      assertTrue(circularFifoQueue1.isAtFullCapacity());
      assertEquals(1, circularFifoQueue1.size());
      assertNotNull(circularFifoQueue1);
      
      int int0 = circularFifoQueue1.size();
      assertTrue(circularFifoQueue0.contains(""));
      assertTrue(circularFifoQueue1.contains(""));
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(1, circularFifoQueue0.size());
      assertFalse(circularFifoQueue1.isFull());
      assertEquals(1, circularFifoQueue1.maxSize());
      assertFalse(circularFifoQueue1.isEmpty());
      assertTrue(circularFifoQueue1.isAtFullCapacity());
      assertEquals(1, circularFifoQueue1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      assertEquals(32, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(0, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isFull());
      assertNotNull(circularFifoQueue0);
      
      CircularFifoQueue<Object> circularFifoQueue1 = new CircularFifoQueue<Object>(1661);
      assertFalse(circularFifoQueue1.equals((Object)circularFifoQueue0));
      assertFalse(circularFifoQueue1.contains(1661));
      assertFalse(circularFifoQueue1.isFull());
      assertTrue(circularFifoQueue1.isEmpty());
      assertEquals(1661, circularFifoQueue1.maxSize());
      assertFalse(circularFifoQueue1.isAtFullCapacity());
      assertEquals(0, circularFifoQueue1.size());
      assertNotNull(circularFifoQueue1);
      
      Integer integer0 = new Integer(1661);
      assertNotNull(integer0);
      assertEquals(1661, (int)integer0);
      
      boolean boolean0 = circularFifoQueue1.add(integer0);
      assertFalse(circularFifoQueue1.equals((Object)circularFifoQueue0));
      assertTrue(circularFifoQueue1.contains(1661));
      assertNotSame(circularFifoQueue1, circularFifoQueue0);
      assertFalse(circularFifoQueue1.isEmpty());
      assertFalse(circularFifoQueue1.isFull());
      assertEquals(1, circularFifoQueue1.size());
      assertEquals(1661, circularFifoQueue1.maxSize());
      assertFalse(circularFifoQueue1.isAtFullCapacity());
      assertTrue(boolean0);
      
      boolean boolean1 = circularFifoQueue0.addAll(circularFifoQueue1);
      assertFalse(circularFifoQueue0.equals((Object)circularFifoQueue1));
      assertFalse(circularFifoQueue1.equals((Object)circularFifoQueue0));
      assertTrue(boolean1 == boolean0);
      assertTrue(circularFifoQueue0.contains(1661));
      assertTrue(circularFifoQueue1.contains(1661));
      assertNotSame(circularFifoQueue0, circularFifoQueue1);
      assertNotSame(circularFifoQueue1, circularFifoQueue0);
      assertEquals(32, circularFifoQueue0.maxSize());
      assertEquals(1, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue1.isEmpty());
      assertFalse(circularFifoQueue1.isFull());
      assertEquals(1, circularFifoQueue1.size());
      assertEquals(1661, circularFifoQueue1.maxSize());
      assertFalse(circularFifoQueue1.isAtFullCapacity());
      assertTrue(boolean1);
      
      int int0 = circularFifoQueue0.size();
      assertFalse(circularFifoQueue0.equals((Object)circularFifoQueue1));
      assertTrue(circularFifoQueue0.contains(1661));
      assertNotSame(circularFifoQueue0, circularFifoQueue1);
      assertEquals(32, circularFifoQueue0.maxSize());
      assertEquals(1, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      assertEquals(32, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(0, circularFifoQueue0.size());
      assertNotNull(circularFifoQueue0);
      
      int int0 = circularFifoQueue0.size();
      assertEquals(32, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(0, circularFifoQueue0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.addLast("]+u9E'Mx>");
      assertTrue(linkedList0.contains("]+u9E'Mx>"));
      assertEquals(1, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(" {0");
      assertTrue(linkedList0.contains(" {0"));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean0);
      
      CircularFifoQueue<String> circularFifoQueue0 = new CircularFifoQueue<String>(linkedList0);
      assertTrue(linkedList0.contains(" {0"));
      assertTrue(circularFifoQueue0.contains(" {0"));
      assertEquals(2, linkedList0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(2, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      assertEquals(2, circularFifoQueue0.size());
      assertNotNull(circularFifoQueue0);
      
      CircularFifoQueue<Object> circularFifoQueue1 = new CircularFifoQueue<Object>(circularFifoQueue0);
      assertTrue(linkedList0.contains(" {0"));
      assertTrue(circularFifoQueue0.contains(" {0"));
      assertTrue(circularFifoQueue1.contains(" {0"));
      assertEquals(2, linkedList0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(2, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      assertEquals(2, circularFifoQueue0.size());
      assertFalse(circularFifoQueue1.isEmpty());
      assertFalse(circularFifoQueue1.isFull());
      assertEquals(2, circularFifoQueue1.maxSize());
      assertTrue(circularFifoQueue1.isAtFullCapacity());
      assertEquals(2, circularFifoQueue1.size());
      assertNotNull(circularFifoQueue1);
      
      Object object0 = circularFifoQueue1.remove();
      assertTrue(linkedList0.contains(" {0"));
      assertTrue(circularFifoQueue0.contains(" {0"));
      assertFalse(circularFifoQueue1.contains("]+u9E'Mx>"));
      assertTrue(circularFifoQueue1.contains(" {0"));
      assertEquals(2, linkedList0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(2, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      assertEquals(2, circularFifoQueue0.size());
      assertFalse(circularFifoQueue1.isEmpty());
      assertFalse(circularFifoQueue1.isFull());
      assertEquals(2, circularFifoQueue1.maxSize());
      assertFalse(circularFifoQueue1.isAtFullCapacity());
      assertEquals(1, circularFifoQueue1.size());
      assertNotNull(object0);
      assertEquals("]+u9E'Mx>", object0);
      
      Object[] objectArray0 = circularFifoQueue1.toArray();
      assertEquals(1, objectArray0.length);
      assertTrue(linkedList0.contains(" {0"));
      assertTrue(circularFifoQueue0.contains(" {0"));
      assertFalse(circularFifoQueue1.contains("]+u9E'Mx>"));
      assertTrue(circularFifoQueue1.contains(" {0"));
      assertEquals(2, linkedList0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(2, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      assertEquals(2, circularFifoQueue0.size());
      assertFalse(circularFifoQueue1.isEmpty());
      assertFalse(circularFifoQueue1.isFull());
      assertEquals(2, circularFifoQueue1.maxSize());
      assertFalse(circularFifoQueue1.isAtFullCapacity());
      assertEquals(1, circularFifoQueue1.size());
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>(2);
      assertFalse(circularFifoQueue0.contains(2));
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(2, circularFifoQueue0.maxSize());
      assertEquals(0, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isFull());
      assertNotNull(circularFifoQueue0);
      
      CircularFifoQueue<String> circularFifoQueue1 = new CircularFifoQueue<String>();
      assertFalse(circularFifoQueue1.isAtFullCapacity());
      assertEquals(32, circularFifoQueue1.maxSize());
      assertFalse(circularFifoQueue1.isFull());
      assertTrue(circularFifoQueue1.isEmpty());
      assertEquals(0, circularFifoQueue1.size());
      assertNotNull(circularFifoQueue1);
      
      boolean boolean0 = circularFifoQueue0.offer(circularFifoQueue1);
      assertFalse(circularFifoQueue0.contains(2));
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(2, circularFifoQueue0.maxSize());
      assertEquals(1, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue1.isAtFullCapacity());
      assertEquals(32, circularFifoQueue1.maxSize());
      assertFalse(circularFifoQueue1.isFull());
      assertTrue(circularFifoQueue1.isEmpty());
      assertEquals(0, circularFifoQueue1.size());
      assertTrue(boolean0);
      
      CircularFifoQueue<Integer> circularFifoQueue2 = new CircularFifoQueue<Integer>();
      assertFalse(circularFifoQueue2.contains(2));
      assertFalse(circularFifoQueue2.isFull());
      assertEquals(32, circularFifoQueue2.maxSize());
      assertFalse(circularFifoQueue2.isAtFullCapacity());
      assertEquals(0, circularFifoQueue2.size());
      assertTrue(circularFifoQueue2.isEmpty());
      assertNotNull(circularFifoQueue2);
      
      Stream<Object> stream0 = circularFifoQueue0.parallelStream();
      assertFalse(circularFifoQueue0.contains(2));
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(2, circularFifoQueue0.maxSize());
      assertEquals(1, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isFull());
      assertNotNull(stream0);
      
      boolean boolean1 = circularFifoQueue0.retainAll(circularFifoQueue2);
      assertTrue(boolean1 == boolean0);
      assertFalse(circularFifoQueue0.contains(2));
      assertFalse(circularFifoQueue2.contains(2));
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(2, circularFifoQueue0.maxSize());
      assertEquals(0, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue2.isFull());
      assertEquals(32, circularFifoQueue2.maxSize());
      assertFalse(circularFifoQueue2.isAtFullCapacity());
      assertEquals(0, circularFifoQueue2.size());
      assertTrue(circularFifoQueue2.isEmpty());
      assertTrue(boolean1);
      
      boolean boolean2 = circularFifoQueue0.add(stream0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(circularFifoQueue0.contains(2));
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(2, circularFifoQueue0.maxSize());
      assertEquals(1, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isFull());
      assertTrue(boolean2);
      
      Object object0 = circularFifoQueue0.remove();
      assertFalse(circularFifoQueue0.contains(object0));
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(2, circularFifoQueue0.maxSize());
      assertEquals(0, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isFull());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = null;
      try {
        circularFifoQueue0 = new CircularFifoQueue<Integer>((-716));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.addLast("97/Sq5HR /( ]<");
      assertTrue(linkedList0.contains("97/Sq5HR /( ]<"));
      assertEquals(1, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("(6-HNtr4=Y\"cI-4y");
      assertTrue(linkedList0.contains("(6-HNtr4=Y\"cI-4y"));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add("");
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(""));
      assertEquals(3, linkedList0.size());
      assertTrue(boolean1);
      
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>(linkedList0);
      assertTrue(linkedList0.contains(""));
      assertTrue(circularFifoQueue0.contains(""));
      assertEquals(3, linkedList0.size());
      assertEquals(3, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      assertEquals(3, circularFifoQueue0.maxSize());
      assertNotNull(circularFifoQueue0);
      
      boolean boolean2 = circularFifoQueue0.remove("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(linkedList0.contains(""));
      assertFalse(circularFifoQueue0.contains(""));
      assertTrue(circularFifoQueue0.contains("(6-HNtr4=Y\"cI-4y"));
      assertEquals(3, linkedList0.size());
      assertEquals(2, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(3, circularFifoQueue0.maxSize());
      assertTrue(boolean2);
      
      boolean boolean3 = circularFifoQueue0.addAll(linkedList0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(linkedList0.contains(""));
      assertTrue(circularFifoQueue0.contains(""));
      assertEquals(3, linkedList0.size());
      assertEquals(3, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      assertEquals(3, circularFifoQueue0.maxSize());
      assertTrue(boolean3);
      
      boolean boolean4 = circularFifoQueue0.remove("(6-HNtr4=Y\"cI-4y");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(linkedList0.contains(""));
      assertFalse(circularFifoQueue0.contains("(6-HNtr4=Y\"cI-4y"));
      assertTrue(circularFifoQueue0.contains(""));
      assertEquals(3, linkedList0.size());
      assertEquals(2, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(3, circularFifoQueue0.maxSize());
      assertTrue(boolean4);
      
      boolean boolean5 = circularFifoQueue0.isAtFullCapacity();
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertTrue(linkedList0.contains(""));
      assertFalse(circularFifoQueue0.contains("(6-HNtr4=Y\"cI-4y"));
      assertTrue(circularFifoQueue0.contains(""));
      assertEquals(3, linkedList0.size());
      assertEquals(2, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(3, circularFifoQueue0.maxSize());
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(linkedList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(linkedList0);
      assertTrue(linkedList0.contains(0));
      assertTrue(circularFifoQueue0.contains(0));
      assertEquals(1, linkedList0.size());
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      assertEquals(1, circularFifoQueue0.size());
      assertEquals(1, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertNotNull(circularFifoQueue0);
      
      Integer integer1 = circularFifoQueue0.poll();
      assertTrue(linkedList0.contains(0));
      assertFalse(circularFifoQueue0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, circularFifoQueue0.size());
      assertEquals(1, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      // Undeclared exception!
      try { 
        circularFifoQueue0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // queue is empty
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("p6i(HW8WndXuP)>~!");
      assertTrue(linkedList0.contains("p6i(HW8WndXuP)>~!"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>(linkedList0);
      assertTrue(linkedList0.contains("p6i(HW8WndXuP)>~!"));
      assertTrue(circularFifoQueue0.contains("p6i(HW8WndXuP)>~!"));
      assertEquals(1, linkedList0.size());
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      assertEquals(1, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(1, circularFifoQueue0.maxSize());
      assertNotNull(circularFifoQueue0);
      
      boolean boolean1 = circularFifoQueue0.remove("p6i(HW8WndXuP)>~!");
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains("p6i(HW8WndXuP)>~!"));
      assertFalse(circularFifoQueue0.contains("p6i(HW8WndXuP)>~!"));
      assertEquals(1, linkedList0.size());
      assertEquals(0, circularFifoQueue0.size());
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(1, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        circularFifoQueue0.element();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // queue is empty
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.addLast("]+u9E'Mx>");
      assertTrue(linkedList0.contains("]+u9E'Mx>"));
      assertEquals(1, linkedList0.size());
      
      CircularFifoQueue<String> circularFifoQueue0 = new CircularFifoQueue<String>(linkedList0);
      assertTrue(linkedList0.contains("]+u9E'Mx>"));
      assertTrue(circularFifoQueue0.contains("]+u9E'Mx>"));
      assertEquals(1, linkedList0.size());
      assertEquals(1, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertEquals(1, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertNotNull(circularFifoQueue0);
      
      String string0 = circularFifoQueue0.element();
      assertTrue(linkedList0.contains("]+u9E'Mx>"));
      assertTrue(circularFifoQueue0.contains("]+u9E'Mx>"));
      assertEquals(1, linkedList0.size());
      assertEquals(1, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertEquals(1, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertNotNull(string0);
      assertEquals("]+u9E'Mx>", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertEquals(0, circularFifoQueue0.size());
      assertTrue(circularFifoQueue0.isEmpty());
      assertNotNull(circularFifoQueue0);
      
      Object object0 = circularFifoQueue0.poll();
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertEquals(0, circularFifoQueue0.size());
      assertTrue(circularFifoQueue0.isEmpty());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.addLast("]+u9E'Mx>");
      assertTrue(linkedList0.contains("]+u9E'Mx>"));
      assertEquals(1, linkedList0.size());
      
      CircularFifoQueue<String> circularFifoQueue0 = new CircularFifoQueue<String>(linkedList0);
      assertTrue(linkedList0.contains("]+u9E'Mx>"));
      assertTrue(circularFifoQueue0.contains("]+u9E'Mx>"));
      assertEquals(1, linkedList0.size());
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(1, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertEquals(1, circularFifoQueue0.maxSize());
      assertNotNull(circularFifoQueue0);
      
      CircularFifoQueue<Object> circularFifoQueue1 = new CircularFifoQueue<Object>(circularFifoQueue0);
      assertTrue(linkedList0.contains("]+u9E'Mx>"));
      assertTrue(circularFifoQueue0.contains("]+u9E'Mx>"));
      assertTrue(circularFifoQueue1.contains("]+u9E'Mx>"));
      assertEquals(1, linkedList0.size());
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      assertFalse(circularFifoQueue0.isFull());
      assertEquals(1, circularFifoQueue0.size());
      assertFalse(circularFifoQueue0.isEmpty());
      assertEquals(1, circularFifoQueue0.maxSize());
      assertEquals(1, circularFifoQueue1.maxSize());
      assertFalse(circularFifoQueue1.isEmpty());
      assertFalse(circularFifoQueue1.isFull());
      assertTrue(circularFifoQueue1.isAtFullCapacity());
      assertEquals(1, circularFifoQueue1.size());
      assertNotNull(circularFifoQueue1);
      
      // Undeclared exception!
      try { 
        circularFifoQueue1.get(3607);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // The specified index (3607) is outside the available range [0, 1)
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      assertTrue(circularFifoQueue0.isEmpty());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isFull());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(0, circularFifoQueue0.size());
      assertNotNull(circularFifoQueue0);
      
      // Undeclared exception!
      try { 
        circularFifoQueue0.get((-387));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // The specified index (-387) is outside the available range [0, 0)
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CircularFifoQueue<String> circularFifoQueue0 = new CircularFifoQueue<String>();
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isFull());
      assertTrue(circularFifoQueue0.isEmpty());
      assertEquals(0, circularFifoQueue0.size());
      assertNotNull(circularFifoQueue0);
      
      // Undeclared exception!
      try { 
        circularFifoQueue0.offer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Attempted to add null object to queue
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(0, circularFifoQueue0.size());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isFull());
      assertNotNull(circularFifoQueue0);
      
      Object object0 = circularFifoQueue0.peek();
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(circularFifoQueue0.isAtFullCapacity());
      assertEquals(0, circularFifoQueue0.size());
      assertEquals(32, circularFifoQueue0.maxSize());
      assertFalse(circularFifoQueue0.isFull());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast("]+u9E'Mx>");
      linkedList0.add(" {0");
      CircularFifoQueue<String> circularFifoQueue0 = new CircularFifoQueue<String>(linkedList0);
      CircularFifoQueue<Object> circularFifoQueue1 = new CircularFifoQueue<Object>(circularFifoQueue0);
      circularFifoQueue1.remove();
      boolean boolean0 = circularFifoQueue1.isEmpty();
      assertEquals(1, circularFifoQueue1.size());
      assertEquals(2, circularFifoQueue0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      int int0 = circularFifoQueue0.maxSize();
      assertEquals(32, int0);
      assertEquals(0, circularFifoQueue0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      boolean boolean0 = circularFifoQueue0.isFull();
      assertEquals(32, circularFifoQueue0.maxSize());
      assertEquals(0, circularFifoQueue0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      circularFifoQueue0.clear();
      assertTrue(circularFifoQueue0.isEmpty());
      assertEquals(32, circularFifoQueue0.maxSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      CircularFifoQueue<String> circularFifoQueue0 = null;
      try {
        circularFifoQueue0 = new CircularFifoQueue<String>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }
}
