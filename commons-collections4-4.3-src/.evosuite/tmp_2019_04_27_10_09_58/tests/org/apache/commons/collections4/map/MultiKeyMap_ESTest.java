/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 02:22:15 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.MultiKeyMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiKeyMap_ESTest extends MultiKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      AbstractHashedMap<Object, String> abstractHashedMap0 = new AbstractHashedMap<Object, String>();
      Object object0 = multiKeyMap0.put("(/\"3:t*ZWKK<rz", "", "?QJBcd}[4d(QjFT", "Map must not be null", "", (Object) abstractHashedMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      Object object0 = multiKeyMap0.put("", "xen'[p", "", "", "org.apache.commons.collections4.map.HashedMap", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      Integer integer0 = new Integer(770);
      Object object0 = multiKeyMap0.removeMultiKey((Object) "", (Object) "", (Object) integer0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKeyMap<Object, Integer> multiKeyMap0 = new MultiKeyMap<Object, Integer>();
      Integer integer0 = multiKeyMap0.removeMultiKey((Object) null, (Object) "", (Object) null);
      MultiKeyMap<Integer, String> multiKeyMap1 = new MultiKeyMap<Integer, String>();
      String string0 = multiKeyMap1.put(integer0, integer0, integer0, integer0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      Object object0 = multiKeyMap0.put("&6B?#]Q?Ow]=D2_&", "", "&6B?#]Q?Ow]=D2_&", "&6B?#]Q?Ow]=D2_&", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKeyMap<String, Integer> multiKeyMap0 = new MultiKeyMap<String, Integer>();
      Integer integer0 = multiKeyMap0.put("2D", "2D", "2D", (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      Integer integer0 = new Integer(16);
      multiKeyMap0.put("", "", "", (Object) integer0);
      MultiKeyMap<HashMap<Integer, String>, MultiKeyMap<Integer, String>> multiKeyMap1 = new MultiKeyMap<HashMap<Integer, String>, MultiKeyMap<Integer, String>>();
      Integer integer1 = new Integer(326);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer1, (Object) null, multiKeyMap1);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(326, 16, 16);
      Object object0 = multiKeyMap0.get((Object) integer0, (Object) multiKeyMap1, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKeyMap<MultiKey<String>, String> multiKeyMap0 = new MultiKeyMap<MultiKey<String>, String>();
      boolean boolean0 = multiKeyMap0.containsKey((Object) multiKeyMap0, (Object) "qYkYuLgC&VtN#&M~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<String>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<String>>();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKeyMap0.checkKey(multiKey0);
      assertTrue(multiKeyMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKeyMap<MultiKeyMap<Object, Integer>, String> multiKeyMap0 = new MultiKeyMap<MultiKeyMap<Object, Integer>, String>();
      MultiKeyMap<Object, Integer> multiKeyMap1 = new MultiKeyMap<Object, Integer>();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(multiKeyMap0, multiKeyMap0, multiKeyMap1);
      Integer integer0 = new Integer((-99));
      multiKeyMap1.putIfAbsent(multiKey0, integer0);
      Integer integer1 = multiKeyMap1.put((MultiKey<?>) multiKey0, integer0);
      assertEquals((-99), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(1786);
      multiKeyMap0.put((Integer) null, integer0, integer0, integer0, integer0);
      MapIterator<MultiKey<? extends Integer>, Integer> mapIterator0 = multiKeyMap0.mapIterator();
      assertTrue(mapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      MultiKeyMap<Integer, MultiKey<String>> multiKeyMap1 = new MultiKeyMap<Integer, MultiKey<String>>();
      MultiKeyMap<HashMap<Integer, Object>, AbstractHashedMap<Object, Object>> multiKeyMap2 = new MultiKeyMap<HashMap<Integer, Object>, AbstractHashedMap<Object, Object>>();
      Integer integer0 = new Integer(4);
      int int0 = multiKeyMap2.hash(multiKeyMap1, multiKeyMap0, (Object) null, integer0, (Object) null);
      assertEquals((-8139033), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKeyMap<Integer, MultiKeyMap<String, Object>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKeyMap<String, Object>>();
      MultiKeyMap<MultiKeyMap<Object, Object>, MultiKeyMap<Object, Integer>> multiKeyMap1 = new MultiKeyMap<MultiKeyMap<Object, Object>, MultiKeyMap<Object, Integer>>();
      MultiKeyMap<String, Integer> multiKeyMap2 = new MultiKeyMap<String, Integer>();
      MultiKeyMap<MultiKey<Object>, MultiKey<Integer>> multiKeyMap3 = new MultiKeyMap<MultiKey<Object>, MultiKey<Integer>>();
      int int0 = multiKeyMap3.hash(multiKeyMap1, multiKeyMap0, multiKeyMap2, multiKeyMap1);
      assertEquals((-8165219), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKeyMap<Integer, AbstractHashedMap<String, Object>> multiKeyMap0 = new MultiKeyMap<Integer, AbstractHashedMap<String, Object>>();
      int int0 = multiKeyMap0.hash("rZ$", "", "");
      assertEquals((-8156460), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKeyMap<MultiKey<Object>, Object> multiKeyMap0 = new MultiKeyMap<MultiKey<Object>, Object>();
      MultiKeyMap<String, String> multiKeyMap1 = new MultiKeyMap<String, String>();
      int int0 = multiKeyMap0.hash(multiKeyMap1, multiKeyMap1);
      assertEquals((-8130816), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKeyMap<AbstractHashedMap<String, Object>, MultiKey<Object>> multiKeyMap0 = new MultiKeyMap<AbstractHashedMap<String, Object>, MultiKey<Object>>();
      AbstractHashedMap<MultiKey<? extends AbstractHashedMap<String, Object>>, MultiKey<Object>> abstractHashedMap0 = multiKeyMap0.decorated();
      assertEquals(0, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer integer0 = new Integer((-1558));
      multiKeyMap0.put(integer0, integer0, integer0, integer0, (MultiKey<Integer>) null);
      AbstractHashedMap<MultiKey<? extends Integer>, MultiKey<Integer>> abstractHashedMap0 = multiKeyMap0.decorated();
      assertEquals(1, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKeyMap<HashMap<Object, Object>, MultiKey<Object>> multiKeyMap0 = new MultiKeyMap<HashMap<Object, Object>, MultiKey<Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiKeyMap0.put(hashMap0, hashMap0, hashMap0, hashMap0, hashMap0, (MultiKey<Object>) null);
      MultiKeyMap<HashMap<Object, Object>, MultiKey<Object>> multiKeyMap1 = multiKeyMap0.clone();
      assertFalse(multiKeyMap1.equals((Object)multiKeyMap0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiKeyMap<String, Integer> multiKeyMap0 = new MultiKeyMap<String, Integer>();
      Integer integer0 = new Integer(1905);
      MultiKeyMap<MultiKey<Object>, MultiKey<Integer>> multiKeyMap1 = new MultiKeyMap<MultiKey<Object>, MultiKey<Integer>>();
      multiKeyMap1.map = null;
      // Undeclared exception!
      try { 
        multiKeyMap1.removeAll((Object) multiKeyMap0, (Object) "", (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiKeyMap<MultiKey<Object>, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<MultiKey<Object>, MultiKey<Integer>>();
      multiKeyMap0.map = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        multiKeyMap0.removeAll(object0, (Object) "getKey() can only be called after next() and before remove()");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiKeyMap<Object, Object> multiKeyMap0 = new MultiKeyMap<Object, Object>();
      Integer integer0 = new Integer(303);
      multiKeyMap0.map = null;
      // Undeclared exception!
      try { 
        multiKeyMap0.removeAll((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiKeyMap<Object, String> multiKeyMap0 = new MultiKeyMap<Object, String>();
      // Undeclared exception!
      try { 
        multiKeyMap0.putAll((Map<? extends MultiKey<?>, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiKeyMap<String, MultiKey<String>> multiKeyMap0 = new MultiKeyMap<String, MultiKey<String>>();
      // Undeclared exception!
      try { 
        multiKeyMap0.put((MultiKey<? extends String>) null, (MultiKey<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      multiKeyMap0.map = null;
      // Undeclared exception!
      try { 
        multiKeyMap0.put("", "", "", "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiKeyMap<MultiKeyMap<Object, Object>, Object> multiKeyMap0 = new MultiKeyMap<MultiKeyMap<Object, Object>, Object>();
      MultiKeyMap<Object, Object> multiKeyMap1 = new MultiKeyMap<Object, Object>();
      multiKeyMap0.map = null;
      // Undeclared exception!
      try { 
        multiKeyMap0.put(multiKeyMap1, multiKeyMap1, multiKeyMap1, (Object) multiKeyMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiKeyMap<Object, MultiKeyMap<Object, Object>> multiKeyMap0 = new MultiKeyMap<Object, MultiKeyMap<Object, Object>>();
      multiKeyMap0.map = null;
      // Undeclared exception!
      try { 
        multiKeyMap0.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiKeyMap<MultiKeyMap<Object, Object>, MultiKeyMap<Object, Integer>> multiKeyMap0 = new MultiKeyMap<MultiKeyMap<Object, Object>, MultiKeyMap<Object, Integer>>();
      Integer integer0 = new Integer(1905);
      MultiKeyMap<MultiKey<Object>, MultiKey<Integer>> multiKeyMap1 = new MultiKeyMap<MultiKey<Object>, MultiKey<Integer>>();
      multiKeyMap1.map = null;
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiKeyMap1.containsKey((Object) abstractHashedMap0, (Object) multiKeyMap0, (Object) "", (Object) abstractHashedMap0, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiKeyMap<Integer, MultiKeyMap<String, Object>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKeyMap<String, Object>>();
      MapIterator<MultiKey<? extends Integer>, MultiKeyMap<String, Object>> mapIterator0 = multiKeyMap0.mapIterator();
      MultiKeyMap<MultiKeyMap<Object, Object>, MultiKeyMap<Object, Integer>> multiKeyMap1 = new MultiKeyMap<MultiKeyMap<Object, Object>, MultiKeyMap<Object, Integer>>();
      Integer integer0 = new Integer(1905);
      MultiKeyMap<MultiKey<Object>, MultiKey<Integer>> multiKeyMap2 = new MultiKeyMap<MultiKey<Object>, MultiKey<Integer>>();
      multiKeyMap2.map = null;
      // Undeclared exception!
      try { 
        multiKeyMap2.containsKey((Object) multiKeyMap1, (Object) mapIterator0, (Object) multiKeyMap1, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      Integer integer0 = new Integer(16);
      multiKeyMap0.put("", "", "", (Object) integer0);
      multiKeyMap0.removeMultiKey((Object) multiKeyMap0, (Object) "", (Object) multiKeyMap0);
      MultiKeyMap<String, String> multiKeyMap1 = new MultiKeyMap<String, String>();
      Object object0 = multiKeyMap0.removeMultiKey((Object) null, (Object) "", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Object> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Object>();
      // Undeclared exception!
      try { 
        multiKeyMap0.checkKey((MultiKey<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiKeyMap<Integer, AbstractHashedMap<String, Object>> multiKeyMap0 = new MultiKeyMap<Integer, AbstractHashedMap<String, Object>>();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1380);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0[0], integerArray0[0], integer0, integer0);
      AbstractHashedMap<String, Object> abstractHashedMap0 = new AbstractHashedMap<String, Object>(1380);
      multiKeyMap0.putIfAbsent(multiKey0, abstractHashedMap0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integerArray0[0], (Object) integerArray0[0], (Object) integerArray0[0], (Object) integerArray0[0]);
      assertEquals(0, multiKeyMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      multiKeyMap0.put("", (String) null, "", (String) null, (Object) "");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = multiKeyMap0.removeAll((Object) "", (Object) null, (Object) "", (Object) biConsumer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiKeyMap<MultiKey<Object>, String> multiKeyMap0 = new MultiKeyMap<MultiKey<Object>, String>();
      MultiKeyMap<Integer, HashMap<Object, Object>> multiKeyMap1 = new MultiKeyMap<Integer, HashMap<Object, Object>>();
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>();
      Integer integer0 = new Integer((-5));
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiKeyMap1.put(integer0, (Integer) null, (Integer) null, integer0, hashMap0);
      boolean boolean0 = multiKeyMap1.removeAll((Object) integer0, (Object) abstractHashedMap0, (Object) integer0, (Object) multiKeyMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiKeyMap<Object, Object> multiKeyMap0 = new MultiKeyMap<Object, Object>();
      Integer integer0 = new Integer(1723);
      multiKeyMap0.put((Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) null, (Object) null, (Object) integer0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      MultiKey<String> multiKey0 = new MultiKey<String>("QSx&7s/MA", (String) null, "");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiKeyMap0.merge(multiKey0, "", biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = multiKeyMap0.removeAll((Object) "", (Object) null, (Object) "", (Object) biConsumer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiKeyMap<Integer, Object> multiKeyMap0 = new MultiKeyMap<Integer, Object>();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3100);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      multiKeyMap0.put(integer2, integer2, integer2, (Object) integer2);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer2, (Object) integer1, (Object) integerArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiKeyMap<Integer, Object> multiKeyMap0 = new MultiKeyMap<Integer, Object>();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3100);
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      multiKeyMap0.put(integerArray0[1], integerArray0[1], integerArray0[1], (Object) integerArray0[1]);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) integer0, (Object) integerArray0[0]);
      assertFalse(multiKeyMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiKeyMap<HashMap<Object, Object>, MultiKey<Object>> multiKeyMap0 = new MultiKeyMap<HashMap<Object, Object>, MultiKey<Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiKeyMap0.put(hashMap0, hashMap0, hashMap0, hashMap0, hashMap0, (MultiKey<Object>) null);
      Integer integer0 = new Integer(1);
      boolean boolean0 = multiKeyMap0.removeAll((Object) "->N</6", (Object) multiKeyMap0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiKeyMap<HashMap<String, String>, Integer> multiKeyMap0 = new MultiKeyMap<HashMap<String, String>, Integer>();
      MultiKeyMap<Object, Integer> multiKeyMap1 = new MultiKeyMap<Object, Integer>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Integer integer0 = new Integer(1640);
      multiKeyMap0.put(hashMap0, hashMap0, integer0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) multiKeyMap1, (Object) multiKeyMap1, (Object) multiKeyMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(1032);
      Integer integer1 = multiKeyMap0.put(integer0, integer0, integer0);
      multiKeyMap0.put(integer0, integer1, (Integer) null, integer1, integer1, integer1);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(1032);
      multiKeyMap0.put((Integer) null, integer0, (Integer) null, integer0, integer0, integer0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(1786);
      multiKeyMap0.put((Integer) null, integer0, integer0, integer0, integer0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      MultiKey<String> multiKey0 = new MultiKey<String>("QSx&7s/MA", (String) null, "");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiKeyMap0.merge(multiKey0, "", biFunction0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) null, (Object) multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiKeyMap0.computeIfAbsent(multiKey0, unaryOperator0);
      Integer integer0 = new Integer(5);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiKeyMap<MultiKeyMap<Integer, Object>, Object> multiKeyMap0 = new MultiKeyMap<MultiKeyMap<Integer, Object>, Object>();
      MultiKeyMap<Object, String> multiKeyMap1 = new MultiKeyMap<Object, String>();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(multiKeyMap0, multiKeyMap0, multiKeyMap0);
      multiKeyMap1.putIfAbsent(multiKey0, "");
      boolean boolean0 = multiKeyMap1.removeAll((Object) multiKeyMap0);
      assertTrue(multiKeyMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiKeyMap<Integer, String> multiKeyMap0 = new MultiKeyMap<Integer, String>();
      Integer integer0 = new Integer(1671);
      multiKeyMap0.put((Integer) null, integer0, integer0, "H");
      boolean boolean0 = multiKeyMap0.removeAll((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiKeyMap<MultiKey<Object>, String> multiKeyMap0 = new MultiKeyMap<MultiKey<Object>, String>();
      Integer integer0 = new Integer(4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, integer0, (Object) null);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey0, "m,qtKsh[h8r0n#XeK5k");
      boolean boolean0 = multiKeyMap0.removeAll((Object) "-xXr:63-k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiKeyMap<Object, String> multiKeyMap0 = new MultiKeyMap<Object, String>();
      MultiKeyMap<String, Object> multiKeyMap1 = new MultiKeyMap<String, Object>();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiKeyMap1.computeIfAbsent(multiKey0, unaryOperator0);
      boolean boolean0 = multiKeyMap1.removeAll((Object) multiKeyMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiKeyMap<MultiKey<Object>, String> multiKeyMap0 = new MultiKeyMap<MultiKey<Object>, String>();
      Integer integer0 = new Integer(9);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, integer0, (Object) null);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey0, "m,qtKsh[h8r0n#XeK5k");
      boolean boolean0 = multiKeyMap0.removeAll((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiKeyMap<Integer, String> multiKeyMap0 = new MultiKeyMap<Integer, String>();
      Integer integer0 = new Integer(1671);
      multiKeyMap0.getOrDefault(integer0, "H");
      Integer integer1 = new Integer((-8165219));
      Integer integer2 = new Integer((-8165219));
      Integer integer3 = new Integer(285);
      multiKeyMap0.put(integer1, integer1, integer2, (Integer) null, integer3, "8MtQ?.9$qNG");
      MultiKeyMap<Object, Object> multiKeyMap1 = new MultiKeyMap<Object, Object>();
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, multiKeyMap1);
      boolean boolean0 = multiKeyMap0.containsKey((Object) null, (Object) multiKeyMap0, (Object) "MultiKey[java.lang.Object@a341bf2, org.apache.commons.collections4.map.HashedMap@0000000026]", (Object) multiKey0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, MultiKeyMap<Integer, Integer>> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, MultiKeyMap<Integer, Integer>>();
      MultiKeyMap<Object, MultiKeyMap<Object, String>> multiKeyMap1 = new MultiKeyMap<Object, MultiKeyMap<Object, String>>();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(multiKeyMap0, multiKeyMap0);
      MultiKeyMap<Object, String> multiKeyMap2 = multiKeyMap1.removeMultiKey((Object) multiKey0, (Object) null, (Object) null, (Object) null, (Object) multiKey0);
      assertNull(multiKeyMap2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      multiKeyMap0.put("", "xen'[p", "", "", "", (Object) null);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = multiKeyMap0.removeAll((Object) "", (Object) null, (Object) "", (Object) biConsumer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiKeyMap<Integer, String> multiKeyMap0 = new MultiKeyMap<Integer, String>();
      Integer integer0 = new Integer(1671);
      multiKeyMap0.getOrDefault(integer0, "H");
      Integer integer1 = new Integer((-8165219));
      Integer integer2 = new Integer((-8165219));
      Integer integer3 = new Integer(285);
      Integer integer4 = new Integer((-8200661));
      multiKeyMap0.put((Integer) null, integer4, integer1, (Integer) null, ",");
      String string0 = multiKeyMap0.put(integer1, integer1, integer2, (Integer) null, integer3, "8MtQ?.9$qNG");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiKeyMap<String, Integer> multiKeyMap0 = new MultiKeyMap<String, Integer>();
      Integer integer0 = new Integer(2066);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "org.apache.commons.collections4.map.AbstractIterableMap", "", "");
      multiKeyMap0.put((MultiKey<? extends String>) multiKey0, integer0);
      boolean boolean0 = multiKeyMap0.containsKey((Object) integer0, (Object) "", (Object) null, (Object) null, (Object) "\"G");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MultiKeyMap<Integer, MultiKeyMap<String, Object>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKeyMap<String, Object>>();
      MultiKeyMap<MultiKeyMap<Object, Object>, MultiKeyMap<Object, Integer>> multiKeyMap1 = new MultiKeyMap<MultiKeyMap<Object, Object>, MultiKeyMap<Object, Integer>>();
      MultiKeyMap<Object, Integer> multiKeyMap2 = multiKeyMap1.get((Object) multiKeyMap0, (Object) "org.apache.commons.collections4.map.AbstractIterableMap", (Object) multiKeyMap0, (Object) "org.apache.commons.collections4.map.AbstractIterableMap", (Object) multiKeyMap0);
      assertNull(multiKeyMap2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MultiKeyMap<MultiKeyMap<Object, Integer>, String> multiKeyMap0 = new MultiKeyMap<MultiKeyMap<Object, Integer>, String>();
      Integer integer0 = new Integer((-99));
      MultiKeyMap<Object, String> multiKeyMap1 = new MultiKeyMap<Object, String>();
      boolean boolean0 = multiKeyMap1.containsKey((Object) null, (Object) integer0, (Object) null, (Object) multiKeyMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      MultiKeyMap<MultiKey<Object>, String> multiKeyMap1 = new MultiKeyMap<MultiKey<Object>, String>();
      Integer integer0 = new Integer(4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, integer0, (Object) null);
      multiKeyMap1.put(multiKey0, multiKey0, multiKey0, multiKey0, "m,qtKsh[h8r0n#XeK5k");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyMap0, multiKeyMap0, multiKeyMap0, multiKeyMap1);
      multiKeyMap1.put(multiKey1, multiKey1, multiKey1, multiKey1, "zUTU");
      assertEquals(2, multiKeyMap1.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MultiKeyMap<MultiKey<Object>, String> multiKeyMap0 = new MultiKeyMap<MultiKey<Object>, String>();
      Integer integer0 = new Integer(9);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, integer0, (Object) null);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey0, "m,qtKsh[h8r0n#XeK5k");
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey0, "zUTU");
      assertEquals(1, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MultiKeyMap<String, Integer> multiKeyMap0 = new MultiKeyMap<String, Integer>();
      MultiKeyMap<Object, MultiKeyMap<Integer, Integer>> multiKeyMap1 = new MultiKeyMap<Object, MultiKeyMap<Integer, Integer>>();
      Integer integer0 = new Integer(4);
      multiKeyMap0.put("Map must not be null", "Ghh)Sm4uf<BR4|6_!", integer0);
      boolean boolean0 = multiKeyMap0.containsKey((Object) multiKeyMap1, (Object) "z ", (Object) integer0, (Object) "z ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      Integer integer0 = new Integer(16);
      Object object0 = multiKeyMap0.put("", "", "", (Object) integer0);
      MultiKeyMap<MultiKeyMap<Object, Object>, Object> multiKeyMap1 = new MultiKeyMap<MultiKeyMap<Object, Object>, Object>();
      Object object1 = multiKeyMap1.get(object0, (Object) null, (Object) "", (Object) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MultiKeyMap<String, Integer> multiKeyMap0 = new MultiKeyMap<String, Integer>();
      MultiKeyMap<Object, Object> multiKeyMap1 = new MultiKeyMap<Object, Object>();
      Integer integer0 = new Integer((-8139033));
      multiKeyMap0.put("65y<;,a`QoAW.*>`SI", "b;7}Sy^~bw", "J8]o[*=16", integer0);
      multiKeyMap0.removeMultiKey((Object) multiKeyMap0, (Object) multiKeyMap0, (Object) multiKeyMap1);
      assertEquals(1, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MultiKeyMap<Integer, String> multiKeyMap0 = new MultiKeyMap<Integer, String>();
      Integer integer0 = new Integer(1671);
      multiKeyMap0.getOrDefault(integer0, "H");
      Integer integer1 = new Integer((-8165219));
      Integer integer2 = new Integer((-8165219));
      Integer integer3 = new Integer((-8200661));
      multiKeyMap0.put((Integer) null, integer3, integer1, (Integer) null, ",");
      multiKeyMap0.put(integer1, integer1, integer2, (Integer) null, integer0, "8MtQ?.9$qNG");
      Integer integer4 = new Integer(285);
      Integer integer5 = new Integer((-937));
      String string0 = multiKeyMap0.put((Integer) null, integer4, integer5, "H");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MultiKeyMap<Integer, String> multiKeyMap0 = new MultiKeyMap<Integer, String>();
      Integer integer0 = new Integer(1671);
      multiKeyMap0.getOrDefault(integer0, "H");
      Integer integer1 = new Integer((-8165219));
      Integer integer2 = new Integer((-8165219));
      multiKeyMap0.put(integer1, integer1, integer2, (Integer) null, integer1, "8MtQ?.9$qNG");
      Integer integer3 = new Integer(285);
      Integer integer4 = new Integer((-937));
      String string0 = multiKeyMap0.put((Integer) null, integer3, integer4, "H");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MultiKeyMap<MultiKeyMap<Object, Integer>, String> multiKeyMap0 = new MultiKeyMap<MultiKeyMap<Object, Integer>, String>();
      Integer integer0 = new Integer((-99));
      MultiKeyMap<HashMap<Object, String>, MultiKey<String>> multiKeyMap1 = new MultiKeyMap<HashMap<Object, String>, MultiKey<String>>();
      Object object0 = new Object();
      boolean boolean0 = multiKeyMap1.containsKey(object0, (Object) integer0, (Object) multiKeyMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      Integer integer0 = new Integer(16);
      multiKeyMap0.put("", "", "", (Object) integer0);
      multiKeyMap0.put("", "", "", "", (Object) null);
      MultiKeyMap<HashMap<Integer, String>, MultiKeyMap<Integer, String>> multiKeyMap1 = new MultiKeyMap<HashMap<Integer, String>, MultiKeyMap<Integer, String>>();
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(326, 16, 16);
      Object object0 = multiKeyMap0.get((Object) integer0, (Object) multiKeyMap1, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MultiKeyMap<String, Object> multiKeyMap0 = new MultiKeyMap<String, Object>();
      Object object0 = multiKeyMap0.put("QSx&7s/MA", "", "", (Object) null);
      Object object1 = multiKeyMap0.removeMultiKey((Object) null, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MultiKeyMap<Integer, String> multiKeyMap0 = new MultiKeyMap<Integer, String>();
      Integer integer0 = new Integer(1671);
      multiKeyMap0.getOrDefault(integer0, "H");
      Integer integer1 = new Integer((-8165219));
      Integer integer2 = new Integer((-8165219));
      multiKeyMap0.put(integer1, integer1, integer2, (Integer) null, integer1, "8MtQ?.9$qNG");
      Integer integer3 = new Integer((-109));
      multiKeyMap0.removeMultiKey((Object) "H", (Object) integer3);
      assertFalse(multiKeyMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MultiKeyMap<MultiKey<Object>, String> multiKeyMap0 = new MultiKeyMap<MultiKey<Object>, String>();
      Integer integer0 = new Integer(9);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, integer0, (Object) null);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey0, "m,qtKsh[h8r0n#XeK5k");
      multiKeyMap0.put(multiKey0, multiKey0, "MultiKey[9, null, 44, null]");
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MultiKeyMap<MultiKeyMap<Object, Integer>, String> multiKeyMap0 = new MultiKeyMap<MultiKeyMap<Object, Integer>, String>();
      MultiKeyMap<Object, Integer> multiKeyMap1 = new MultiKeyMap<Object, Integer>();
      multiKeyMap0.put(multiKeyMap1, multiKeyMap1, "[]");
      multiKeyMap0.put(multiKeyMap1, multiKeyMap1, "[]");
      assertEquals(1, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MultiKeyMap<Integer, Object> multiKeyMap0 = new MultiKeyMap<Integer, Object>();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3100);
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Integer integer1 = new Integer(0);
      multiKeyMap0.put(integer1, integer1, integer1, (Object) integer1);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer1, (Object) integerArray0[0], (Object) integerArray0[0]);
      MultiKeyMap<Object, Object> multiKeyMap1 = new MultiKeyMap<Object, Object>();
      multiKeyMap1.put((Object) null, (Object) integerArray0[0], (Object) integer0, (Object) integerArray0[0]);
      MultiKeyMap<String, Integer> multiKeyMap2 = new MultiKeyMap<String, Integer>();
      MultiKeyMap<Integer, AbstractHashedMap<String, String>> multiKeyMap3 = new MultiKeyMap<Integer, AbstractHashedMap<String, String>>();
      MultiKeyMap<MultiKey<String>, String> multiKeyMap4 = new MultiKeyMap<MultiKey<String>, String>();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey1 = new MultiKey<String>("LY8NI'zd+(kzbh+JQy", "org.apache.commons.collections4.map.HashedMap", "LY8NI'zd+(kzbh+JQy", "WS6@? @VhoNcH~k!%]|");
      MultiKey<String> multiKey2 = new MultiKey<String>("org.apache.commons.collections4.map.AbstractHashedMap$KeySet", "org.apache.commons.collections4.map.HashedMap", (String) null, "fP!jBh/;k{2tkPF", "P\"#fHd[.8>[#");
      MultiKey<String> multiKey3 = new MultiKey<String>("(Fr<[^>OQ8*q\"", "fP!jBh/;k{2tkPF", "P\"#fHd[.8>[#", "org.apache.commons.collections4.map.AbstractHashedMap$KeySet", "");
      MultiKey<String> multiKey4 = new MultiKey<String>("", "P\"#fHd[.8>[#", "org.apache.commons.collections4.map.AbstractHashedMap$KeySet", "P\"#fHd[.8>[#");
      MultiKey<String> multiKey5 = new MultiKey<String>((String) null, "");
      MultiKey<String> multiKey6 = new MultiKey<String>("Map must be empty", "Map must be empty", "org.apache.commons.collections4.map.AbstractHashedMap$KeySet");
      MultiKey<String> multiKey7 = new MultiKey<String>("", "fP!jBh/;k{2tkPF", "(Fr<[^>OQ8*q\"", "Map must not be null");
      MultiKey<MultiKey<String>> multiKey8 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKeyMap4.putIfAbsent(multiKey8, (String) null);
      boolean boolean1 = multiKeyMap4.containsKey((Object) multiKeyMap4, (Object) "org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MultiKeyMap<MultiKeyMap<Object, Integer>, String> multiKeyMap0 = new MultiKeyMap<MultiKeyMap<Object, Integer>, String>();
      MultiKeyMap<Object, Integer> multiKeyMap1 = new MultiKeyMap<Object, Integer>();
      multiKeyMap0.put(multiKeyMap1, multiKeyMap1, "");
      boolean boolean0 = multiKeyMap0.containsKey((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MultiKeyMap<String, Integer> multiKeyMap0 = new MultiKeyMap<String, Integer>();
      MultiKeyMap<Object, Object> multiKeyMap1 = new MultiKeyMap<Object, Object>();
      Integer integer0 = new Integer(0);
      multiKeyMap0.put("Map must be empty", "Map must be empty", integer0);
      multiKeyMap1.putAll(multiKeyMap0);
      Object object0 = multiKeyMap1.get((Object) multiKeyMap0, (Object) multiKeyMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MultiKeyMap<String, Integer> multiKeyMap0 = new MultiKeyMap<String, Integer>();
      MultiKeyMap<Object, Object> multiKeyMap1 = new MultiKeyMap<Object, Object>();
      Integer integer0 = new Integer((-8139033));
      Integer integer1 = multiKeyMap0.put("65y<;,a`QoAW.*>`SI", "b;7}Sy^~bw", "J8]o[*=16", integer0);
      multiKeyMap0.put("Map must be empty", "Map must be empty", integer1);
      multiKeyMap1.putAll(multiKeyMap0);
      multiKeyMap1.get((Object) multiKeyMap0, (Object) null);
      assertFalse(multiKeyMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MultiKeyMap<Integer, AbstractHashedMap<String, Object>> multiKeyMap0 = new MultiKeyMap<Integer, AbstractHashedMap<String, Object>>();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1380);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0[0], integerArray0[0], integer0, integer0);
      AbstractHashedMap<String, Object> abstractHashedMap0 = new AbstractHashedMap<String, Object>(1380);
      multiKeyMap0.putIfAbsent(multiKey0, abstractHashedMap0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0);
      assertFalse(boolean0);
  }
}
