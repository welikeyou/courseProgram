/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:34:29 GMT 2019
 */

package org.apache.commons.collections4.trie.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.trie.KeyAnalyzer;
import org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringKeyAnalyzer_ESTest extends StringKeyAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.isPrefix("yA#I", 0, 1409, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot determine prefix outside of Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.isPrefix("org.apache.commons.collections4.trie.KeyAnalyzer", 418, 88, "org.apache.commons.collections4.trie.KeyAnalyzer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot determine prefix outside of Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      
      boolean boolean0 = stringKeyAnalyzer0.isBitSet("org.apache.commons.collections4.trie.KeyAnalyzer", 26, 1527);
      assertTrue(boolean0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      
      boolean boolean0 = stringKeyAnalyzer0.isBitSet("", 0, 0);
      assertFalse(boolean0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.bitIndex("org.apache.commons.collections4.trie.KeyAnalyzer", 16, 768, "org.apache.commons.collections4.trie.KeyAnalyzer", 16, 768);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      
      int int0 = stringKeyAnalyzer0.bitIndex("kGW", 0, 0, "_]*`=", 32768, 0);
      assertEquals((-1), int0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.bitIndex("P;coXt_", 0, 0, "P;coXt_", 0, 3133);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.bitIndex("_v@OSZ]2", 1504, 1881, "_v@OSZ]2", 0, 2959);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.bitIndex("org.apache.commons.collections4.trie.KeyAnalyzer", 16, 16, "", (-1), (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.bitIndex("org.apache.commons.collections4.trie.KeyAnalyzer", 26, 0, "5{~N,c.?", (-1313), (-1313));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      
      boolean boolean0 = stringKeyAnalyzer0.isPrefix("Xozy", 0, 16, "");
      assertFalse(boolean0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.isPrefix("3/\"7c%.HgPf", 16, 0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.isPrefix("2o", 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.isBitSet("", (-1210), (-3));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.bitIndex((String) null, 48, 48, "", 16, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      
      boolean boolean0 = stringKeyAnalyzer0.isPrefix("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 16, 16, "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertTrue(boolean0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.isPrefix("T'kKdl9u$_\"r", 16, (-1), "Ppi`(B0r_;!%7&uyCZK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot determine prefix outside of Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.isPrefix("ihWmJr4VeO( L", (-1899), (-1899), "org.apache.commons.collections4.trie.KeyAnalyzer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot determine prefix outside of Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      
      boolean boolean0 = stringKeyAnalyzer0.isBitSet("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 0, (-1));
      assertFalse(boolean0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      
      boolean boolean0 = stringKeyAnalyzer0.isBitSet((String) null, (-3), (-3));
      assertFalse(boolean0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      
      int int0 = stringKeyAnalyzer0.bitIndex("org.apache.commons.collections4.trie.KeyAnalyzer", 0, 16, "org.apache.commons.collections4.trie.KeyAnalyzer", 0, 0);
      assertEquals(9, int0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      assertNotNull(stringKeyAnalyzer0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
      
      int int0 = stringKeyAnalyzer0.bitIndex((String) null, 0, 0, (String) null, 0, 16);
      assertEquals((-1), int0);
      assertEquals(16, stringKeyAnalyzer0.bitsPerElement());
      assertEquals((-1), KeyAnalyzer.NULL_BIT_KEY);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
      assertEquals(16, StringKeyAnalyzer.LENGTH);
      assertEquals((-2), KeyAnalyzer.EQUAL_BIT_KEY);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      int int0 = stringKeyAnalyzer0.bitIndex("org.apache.commons.collections4.trie.KeyAnalyzer", 16, 16, "org.apache.commons.collections4.trie.KeyAnalyzer", 16, 16);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.bitIndex("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 16, 16, "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.bitIndex(" Q@Z6-ef*28l1", 16, (-3), " Q@Z6-ef*28l1", 16, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.bitIndex("org.apache.commons.collections4.trie.KeyAnalyzer", 16, 12, "org.apache.commons.collections4.trie.KeyAnalyzer", 12, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      int int0 = stringKeyAnalyzer0.bitIndex("T'kKdl9u$_\"r", (-1232), (-1232), "", (-1232), (-1232));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      // Undeclared exception!
      try { 
        stringKeyAnalyzer0.bitIndex("org.apache.commons.collections4.trie.KeyAnalyzer", (-45), (-45), "org.apache.commons.collections4.trie.KeyAnalyzer", 16, (-45));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      int int0 = stringKeyAnalyzer0.lengthInBits("Ppi`(B0r_;!%7&uyCZK");
      assertEquals(304, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      int int0 = stringKeyAnalyzer0.bitsPerElement();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      int int0 = stringKeyAnalyzer0.lengthInBits((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      boolean boolean0 = stringKeyAnalyzer0.isBitSet("Ppi`(B0r_;!%7&uyCZK", (-3), (-2));
      assertFalse(boolean0);
  }
}
