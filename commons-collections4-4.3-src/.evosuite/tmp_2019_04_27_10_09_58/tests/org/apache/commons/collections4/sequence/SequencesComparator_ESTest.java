/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 02:58:13 GMT 2019
 */

package org.apache.commons.collections4.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.sequence.EditScript;
import org.apache.commons.collections4.sequence.SequencesComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SequencesComparator_ESTest extends SequencesComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.add("N!(^");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("N!(^"));
      assertEquals(1, linkedList1.size());
      
      boolean boolean1 = linkedList1.add("N!(^");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("N!(^"));
      assertEquals(2, linkedList1.size());
      
      boolean boolean2 = linkedList1.add("org.apache.commons.collections4.sequence.SequencesComparator$Snake");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("N!(^"));
      assertEquals(3, linkedList1.size());
      
      SequencesComparator<String> sequencesComparator0 = new SequencesComparator<String>(linkedList0, linkedList1, defaultEquator0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.contains("N!(^"));
      assertTrue(linkedList1.contains("N!(^"));
      assertEquals(0, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(sequencesComparator0);
      
      boolean boolean3 = linkedList0.add("N!(^");
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.contains("org.apache.commons.collections4.sequence.SequencesComparator$Snake"));
      assertTrue(linkedList0.contains("N!(^"));
      assertEquals(1, linkedList0.size());
      
      boolean boolean4 = linkedList0.add("N!(^");
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.contains("org.apache.commons.collections4.sequence.SequencesComparator$Snake"));
      assertTrue(linkedList0.contains("N!(^"));
      assertEquals(2, linkedList0.size());
      
      EditScript<String> editScript0 = sequencesComparator0.getScript();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.contains("org.apache.commons.collections4.sequence.SequencesComparator$Snake"));
      assertTrue(linkedList0.contains("N!(^"));
      assertTrue(linkedList1.contains("N!(^"));
      assertEquals(2, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertEquals(1, editScript0.getModifications());
      assertEquals(2, editScript0.getLCSLength());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(editScript0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.add("org.apache.commons.collections4.sequence.SequencesComparator");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("org.apache.commons.collections4.sequence.SequencesComparator"));
      assertEquals(1, linkedList1.size());
      
      boolean boolean1 = linkedList1.add("N!?^");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(2, linkedList1.size());
      
      boolean boolean2 = linkedList0.offerFirst("N!?^");
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.contains("org.apache.commons.collections4.sequence.SequencesComparator"));
      assertTrue(linkedList0.contains("N!?^"));
      assertEquals(1, linkedList0.size());
      
      boolean boolean3 = linkedList1.add("N!?^");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(3, linkedList1.size());
      
      boolean boolean4 = linkedList0.add("N!?^");
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.contains("org.apache.commons.collections4.sequence.SequencesComparator"));
      assertTrue(linkedList0.contains("N!?^"));
      assertEquals(2, linkedList0.size());
      
      boolean boolean5 = linkedList0.add("N!?^");
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.contains("org.apache.commons.collections4.sequence.SequencesComparator"));
      assertTrue(linkedList0.contains("N!?^"));
      assertEquals(3, linkedList0.size());
      
      boolean boolean6 = linkedList0.add("N!?^");
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.contains("org.apache.commons.collections4.sequence.SequencesComparator"));
      assertTrue(linkedList0.contains("N!?^"));
      assertEquals(4, linkedList0.size());
      
      SequencesComparator<String> sequencesComparator0 = new SequencesComparator<String>(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.contains("org.apache.commons.collections4.sequence.SequencesComparator"));
      assertTrue(linkedList0.contains("N!?^"));
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(4, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertNotNull(sequencesComparator0);
      
      EditScript<String> editScript0 = sequencesComparator0.getScript();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.contains("org.apache.commons.collections4.sequence.SequencesComparator"));
      assertTrue(linkedList0.contains("N!?^"));
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(4, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertEquals(3, editScript0.getModifications());
      assertEquals(2, editScript0.getLCSLength());
      assertNotNull(editScript0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.add("N!?^");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(1, linkedList1.size());
      
      boolean boolean1 = linkedList1.add("N!?^");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(2, linkedList1.size());
      
      boolean boolean2 = linkedList1.add("N!?^");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(3, linkedList1.size());
      
      boolean boolean3 = linkedList1.add("N!?^");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(4, linkedList1.size());
      
      SequencesComparator<String> sequencesComparator0 = new SequencesComparator<String>(linkedList0, linkedList1, defaultEquator0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.contains("N!?^"));
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(0, linkedList0.size());
      assertEquals(4, linkedList1.size());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(sequencesComparator0);
      
      boolean boolean4 = linkedList1.add("W.4?dDFX\"i");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(5, linkedList1.size());
      
      boolean boolean5 = linkedList0.add("");
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5);
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains("N!?^"));
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        sequencesComparator0.getScript();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.collections4.sequence.SequencesComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.add("");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains(""));
      assertEquals(1, linkedList1.size());
      
      boolean boolean1 = linkedList0.offerFirst("");
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.contains(""));
      assertEquals(1, linkedList0.size());
      
      SequencesComparator<String> sequencesComparator0 = new SequencesComparator<String>(linkedList0, linkedList1, defaultEquator0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList0.contains(""));
      assertTrue(linkedList1.contains(""));
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(sequencesComparator0);
      
      boolean boolean2 = linkedList0.add("L~&#IO&v^F^F^wMoS+");
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.contains(""));
      assertEquals(2, linkedList0.size());
      
      boolean boolean3 = linkedList0.add("");
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.contains(""));
      assertEquals(3, linkedList0.size());
      
      EditScript<String> editScript0 = sequencesComparator0.getScript();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.contains(""));
      assertTrue(linkedList1.contains(""));
      assertFalse(linkedList1.contains("L~&#IO&v^F^F^wMoS+"));
      assertEquals(3, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals(1, editScript0.getLCSLength());
      assertEquals(2, editScript0.getModifications());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(editScript0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(0));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(integer0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(0));
      assertEquals(2, linkedList0.size());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      SequencesComparator<Integer> sequencesComparator0 = new SequencesComparator<Integer>(linkedList0, linkedList0, defaultEquator0);
      assertTrue(linkedList0.contains(0));
      assertEquals(2, linkedList0.size());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(sequencesComparator0);
      
      EditScript<Integer> editScript0 = sequencesComparator0.getScript();
      assertTrue(linkedList0.contains(0));
      assertEquals(2, linkedList0.size());
      assertEquals(0, editScript0.getModifications());
      assertEquals(2, editScript0.getLCSLength());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(editScript0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add((Object) integer0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(0));
      assertEquals(1, linkedList0.size());
      
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(linkedList0, linkedList0, (Equator<? super Object>) null);
      assertTrue(linkedList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertNotNull(sequencesComparator0);
      
      // Undeclared exception!
      try { 
        sequencesComparator0.getScript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.sequence.SequencesComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      SequencesComparator<Object> sequencesComparator0 = null;
      try {
        sequencesComparator0 = new SequencesComparator<Object>((List<Object>) null, linkedList0, defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.sequence.SequencesComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SequencesComparator<Object> sequencesComparator0 = null;
      try {
        sequencesComparator0 = new SequencesComparator<Object>((List<Object>) null, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.sequence.SequencesComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.add("org.apache.commons.collections4.sequence.SequencesComparator");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("org.apache.commons.collections4.sequence.SequencesComparator"));
      assertEquals(1, linkedList1.size());
      
      boolean boolean1 = linkedList1.add("");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("org.apache.commons.collections4.sequence.SequencesComparator"));
      assertEquals(2, linkedList1.size());
      
      SequencesComparator<String> sequencesComparator0 = new SequencesComparator<String>(linkedList0, linkedList1, defaultEquator0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.contains("org.apache.commons.collections4.sequence.SequencesComparator"));
      assertTrue(linkedList1.contains("org.apache.commons.collections4.sequence.SequencesComparator"));
      assertEquals(0, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(sequencesComparator0);
      
      boolean boolean2 = linkedList0.add("L~&#IO&v^F^F^wMoS+");
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.contains("L~&#IO&v^F^F^wMoS+"));
      assertFalse(linkedList0.contains(""));
      assertEquals(1, linkedList0.size());
      
      boolean boolean3 = linkedList0.add("");
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains("org.apache.commons.collections4.sequence.SequencesComparator"));
      assertEquals(2, linkedList0.size());
      
      EditScript<String> editScript0 = sequencesComparator0.getScript();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains("org.apache.commons.collections4.sequence.SequencesComparator"));
      assertTrue(linkedList1.contains(""));
      assertFalse(linkedList1.contains("L~&#IO&v^F^F^wMoS+"));
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertEquals(1, editScript0.getLCSLength());
      assertEquals(2, editScript0.getModifications());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(editScript0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.add("N!?^");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(1, linkedList1.size());
      
      boolean boolean1 = linkedList1.add("N!?^");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(2, linkedList1.size());
      
      boolean boolean2 = linkedList1.add("N!?^");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(3, linkedList1.size());
      
      boolean boolean3 = linkedList1.add("N!?^");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(4, linkedList1.size());
      
      SequencesComparator<String> sequencesComparator0 = new SequencesComparator<String>(linkedList0, linkedList1, defaultEquator0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.contains("N!?^"));
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(0, linkedList0.size());
      assertEquals(4, linkedList1.size());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(sequencesComparator0);
      
      boolean boolean4 = linkedList1.add("W.4?dDFX\"i");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(5, linkedList1.size());
      
      boolean boolean5 = linkedList0.add("N!?^");
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5);
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.contains("N!?^"));
      assertFalse(linkedList0.contains("W.4?dDFX\"i"));
      assertEquals(1, linkedList0.size());
      
      EditScript<String> editScript0 = sequencesComparator0.getScript();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.contains("N!?^"));
      assertFalse(linkedList0.contains("W.4?dDFX\"i"));
      assertTrue(linkedList1.contains("N!?^"));
      assertEquals(1, linkedList0.size());
      assertEquals(5, linkedList1.size());
      assertEquals(1, editScript0.getLCSLength());
      assertEquals(4, editScript0.getModifications());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(editScript0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("N!(^");
      linkedList1.add("org.apache.commons.collections4.sequence.SequencesComparator$Snake");
      SequencesComparator<String> sequencesComparator0 = new SequencesComparator<String>(linkedList0, linkedList1, defaultEquator0);
      linkedList1.add("org.apache.commons.collections4.sequence.SequencesComparator$Snake");
      linkedList0.add("N!(^");
      EditScript<String> editScript0 = sequencesComparator0.getScript();
      assertEquals(2, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("N!?^");
      linkedList0.offerFirst("N!?^");
      SequencesComparator<String> sequencesComparator0 = new SequencesComparator<String>(linkedList0, linkedList1, defaultEquator0);
      linkedList0.add("OH24A&Dp4");
      linkedList0.add("");
      EditScript<String> editScript0 = sequencesComparator0.getScript();
      assertEquals(2, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("");
      linkedList1.add("");
      linkedList1.add("");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SequencesComparator<String> sequencesComparator0 = new SequencesComparator<String>(linkedList0, linkedList1, defaultEquator0);
      linkedList0.add("nGV8PakL=RH Ga0@h");
      EditScript<String> editScript0 = sequencesComparator0.getScript();
      assertEquals(4, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("org.apache.commons.collections4.sequence.SequencesComparator");
      linkedList1.add("N!?^");
      linkedList0.offerFirst("N!?^");
      linkedList0.add("N!?^");
      linkedList0.add("N!?^");
      SequencesComparator<String> sequencesComparator0 = new SequencesComparator<String>(linkedList0, linkedList1);
      EditScript<String> editScript0 = sequencesComparator0.getScript();
      assertEquals(3, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.offerFirst("N!?^");
      SequencesComparator<String> sequencesComparator0 = new SequencesComparator<String>(linkedList0, linkedList1, defaultEquator0);
      EditScript<String> editScript0 = sequencesComparator0.getScript();
      assertEquals(1, editScript0.getModifications());
  }
}
