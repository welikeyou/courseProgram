/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 04:37:07 GMT 2019
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.collection.TransformedCollection;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.list.TransformedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformedList_ESTest extends TransformedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TransformedList<Integer> transformedList0 = TransformedList.transformingList((List<Integer>) linkedList0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      List<Integer> list0 = transformedList0.subList(0, 0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, InstanceofPredicate> transformer0 = ConstantTransformer.nullTransformer();
      TransformedList<Object> transformedList0 = TransformedList.transformingList((List<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
      Object object0 = new Object();
      linkedList0.add(object0);
      TransformedCollection.transformedCollection((Collection<Object>) transformedList0, (Transformer<? super Object, ?>) transformer0);
      Predicate<String> predicate0 = EqualPredicate.equalPredicate("");
      AndPredicate<String> andPredicate0 = new AndPredicate<String>(predicate0, predicate0);
      Object object1 = transformedList0.set(0, andPredicate0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Class<Integer> class0 = Integer.class;
      linkedList0.add((Object) class0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      TransformedList<Object> transformedList0 = TransformedList.transformingList((List<Object>) linkedList0, (Transformer<? super Object, ?>) constantTransformer0);
      PredicateTransformer<Integer> predicateTransformer0 = new PredicateTransformer<Integer>(instanceofPredicate0);
      Integer integer0 = new Integer(0);
      Boolean boolean0 = predicateTransformer0.transform(integer0);
      transformedList0.add(0, (Object) boolean0);
      Class<String> class1 = String.class;
      Class class2 = (Class)transformedList0.set(1, class1);
      assertEquals(17, class2.getModifiers());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, InstanceofPredicate> transformer0 = ConstantTransformer.nullTransformer();
      TransformedList<Object> transformedList0 = TransformedList.transformingList((List<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
      Object object0 = new Object();
      linkedList0.add(object0);
      ListIterator<Object> listIterator0 = transformedList0.listIterator(0);
      TransformedList.TransformedListIterator transformedList_TransformedListIterator0 = transformedList0.new TransformedListIterator(listIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      transformedList_TransformedListIterator0.forEachRemaining(consumer0);
      transformedList_TransformedListIterator0.set(transformer0);
      assertTrue(transformedList_TransformedListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      HashMap<Object, InstanceofPredicate> hashMap0 = new HashMap<Object, InstanceofPredicate>(2387, 2387);
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = MapTransformer.mapTransformer((Map<? super InstanceofPredicate, ? extends InstanceofPredicate>) hashMap0);
      TransformedList<InstanceofPredicate> transformedList0 = TransformedList.transformingList((List<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      ListIterator<InstanceofPredicate> listIterator0 = transformedList0.listIterator();
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("");
      TransformedList<Integer> transformedList0 = TransformedList.transformedList((List<Integer>) linkedList0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      ListIterator<Integer> listIterator0 = transformedList0.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Class<Integer> class0 = Integer.class;
      linkedList0.add((Object) class0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      TransformedList<Object> transformedList0 = TransformedList.transformingList((List<Object>) linkedList0, (Transformer<? super Object, ?>) constantTransformer0);
      transformedList0.addAll(1, (Collection<?>) linkedList0);
      int int0 = transformedList0.lastIndexOf(instanceofPredicate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<InstanceofPredicate, Transformer<Object, InstanceofPredicate>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, InstanceofPredicate>>();
      Transformer<Object, InstanceofPredicate> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends InstanceofPredicate>>) hashMap0);
      TransformedList<Object> transformedList0 = TransformedList.transformingList((List<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
      List<Object> list0 = transformedList0.getList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("~9kHhk70(_oFr{eNY");
      linkedList0.add("Y\"1jE#}i>51!C]x2");
      TransformedList<String> transformedList0 = TransformedList.transformingList((List<String>) linkedList0, (Transformer<? super String, ? extends String>) constantTransformer0);
      List<String> list0 = transformedList0.getList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        TransformedList.transformingList((List<String>) linkedList0, (Transformer<? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.collection.TransformedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      linkedList0.add((Predicate<Object>) uniquePredicate0);
      // Undeclared exception!
      try { 
        TransformedList.transformedList((List<Predicate<Object>>) linkedList0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      ClosureTransformer<InstanceofPredicate> closureTransformer0 = new ClosureTransformer<InstanceofPredicate>(transformerClosure0);
      // Undeclared exception!
      try { 
        TransformedList.transformedList((List<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) closureTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      // Undeclared exception!
      try { 
        TransformedList.transformedList((List<InstanceofPredicate>) null, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ConstantTransformer<Object, LinkedList<Object>> constantTransformer0 = new ConstantTransformer<Object, LinkedList<Object>>(linkedList1);
      TransformedList<LinkedList<Object>> transformedList0 = new TransformedList<LinkedList<Object>>(linkedList0, constantTransformer0);
      // Undeclared exception!
      try { 
        transformedList0.subList(627, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(627) > toIndex(0)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TransformedList<Object> transformedList0 = TransformedList.transformedList((List<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedList0.set(0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Transformer<String, String> transformer0 = NOPTransformer.nopTransformer();
      TransformedList<String> transformedList0 = TransformedList.transformingList((List<String>) linkedList0, (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        transformedList0.listIterator((-770));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -770, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2614));
      linkedList0.add(integer0);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("XurKoJN#");
      TransformedList<Integer> transformedList0 = TransformedList.transformingList((List<Integer>) linkedList0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        transformedList0.addAll((-1128), (Collection<? extends Integer>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'XurKoJN#' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashMap0);
      TransformedList<Boolean> transformedList0 = new TransformedList<Boolean>(linkedList0, transformer0);
      // Undeclared exception!
      try { 
        transformedList0.addAll(1006, (Collection<? extends Boolean>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1006, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, InstanceofPredicate> transformer0 = ConstantTransformer.constantTransformer(instanceofPredicate0);
      IfTransformer<Object, InstanceofPredicate> ifTransformer0 = new IfTransformer<Object, InstanceofPredicate>((Predicate<? super Object>) null, transformer0, transformer0);
      TransformedList<Object> transformedList0 = TransformedList.transformedList((List<Object>) linkedList0, (Transformer<? super Object, ?>) ifTransformer0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        transformedList0.add(0, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<InstanceofPredicate, Transformer<Object, InstanceofPredicate>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, InstanceofPredicate>>();
      Transformer<Object, Object> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ?>>) hashMap0);
      TransformedList<Object> transformedList0 = TransformedList.transformedList((List<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedList0.add((-134), (Object) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -134, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      TransformedList<Integer> transformedList0 = null;
      try {
        transformedList0 = new TransformedList<Integer>((List<Integer>) null, transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedList<Integer> transformedList0 = TransformedList.transformedList((List<Integer>) linkedList0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      boolean boolean0 = transformedList0.equals(transformer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("G'eeeIc}S");
      TransformedList<InstanceofPredicate> transformedList0 = TransformedList.transformedList((List<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      boolean boolean0 = transformedList0.equals(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Class<Integer> class0 = Integer.class;
      linkedList0.add((Object) class0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      TransformedList<Object> transformedList0 = TransformedList.transformedList((List<Object>) linkedList0, (Transformer<? super Object, ?>) constantTransformer0);
      int int0 = transformedList0.lastIndexOf(instanceofPredicate0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TransformedList<Integer> transformedList0 = TransformedList.transformedList((List<Integer>) linkedList0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        transformedList0.subList((-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      ConstantFactory<InstanceofPredicate> constantFactory0 = new ConstantFactory<InstanceofPredicate>((InstanceofPredicate) null);
      FactoryTransformer<Object, InstanceofPredicate> factoryTransformer0 = new FactoryTransformer<Object, InstanceofPredicate>(constantFactory0);
      TransformedList<InstanceofPredicate> transformedList0 = TransformedList.transformedList((List<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) factoryTransformer0);
      // Undeclared exception!
      try { 
        transformedList0.get((-4370));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4370, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      LinkedList<Transformer<Object, InstanceofPredicate>> linkedList0 = new LinkedList<Transformer<Object, InstanceofPredicate>>();
      Transformer<Object, Transformer<Object, InstanceofPredicate>>[] transformerArray0 = (Transformer<Object, Transformer<Object, InstanceofPredicate>>[]) Array.newInstance(Transformer.class, 1);
      Transformer<Object, Transformer<Object, InstanceofPredicate>> transformer0 = ExceptionTransformer.exceptionTransformer();
      SwitchTransformer<Transformer<Object, InstanceofPredicate>, Transformer<Object, InstanceofPredicate>> switchTransformer0 = new SwitchTransformer<Transformer<Object, InstanceofPredicate>, Transformer<Object, InstanceofPredicate>>(predicateArray0, transformerArray0, transformer0);
      TransformedList<Transformer<Object, InstanceofPredicate>> transformedList0 = TransformedList.transformingList((List<Transformer<Object, InstanceofPredicate>>) linkedList0, (Transformer<? super Transformer<Object, InstanceofPredicate>, ? extends Transformer<Object, InstanceofPredicate>>) switchTransformer0);
      int int0 = transformedList0.lastIndexOf(predicateArray0[1]);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("XurKoJN#");
      TransformedList<Integer> transformedList0 = TransformedList.transformingList((List<Integer>) linkedList0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      transformedList0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      TransformedList<Object> transformedList0 = TransformedList.transformingList((List<Object>) linkedList0, (Transformer<? super Object, ?>) constantTransformer0);
      boolean boolean0 = transformedList0.addAll(0, (Collection<?>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantFactory<InstanceofPredicate> constantFactory0 = new ConstantFactory<InstanceofPredicate>((InstanceofPredicate) null);
      Transformer<Object, InstanceofPredicate> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends InstanceofPredicate>) constantFactory0);
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Transformer<Object, Closure<Object>> transformer1 = ConstantTransformer.constantTransformer(closure0);
      TransformedList<Closure<Object>> transformedList0 = TransformedList.transformingList((List<Closure<Object>>) linkedList0, (Transformer<? super Closure<Object>, ? extends Closure<Object>>) transformer1);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      // Undeclared exception!
      try { 
        transformedList0.set(852, transformerClosure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 852, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedList<Integer> transformedList0 = new TransformedList<Integer>(linkedList0, transformer0);
      Integer integer0 = new Integer(3);
      // Undeclared exception!
      try { 
        transformedList0.add(0, integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      LinkedList<Transformer<Object, InstanceofPredicate>> linkedList0 = new LinkedList<Transformer<Object, InstanceofPredicate>>();
      Transformer<Object, Transformer<Object, InstanceofPredicate>>[] transformerArray0 = (Transformer<Object, Transformer<Object, InstanceofPredicate>>[]) Array.newInstance(Transformer.class, 1);
      Transformer<Object, Transformer<Object, InstanceofPredicate>> transformer0 = ExceptionTransformer.exceptionTransformer();
      SwitchTransformer<Transformer<Object, InstanceofPredicate>, Transformer<Object, InstanceofPredicate>> switchTransformer0 = new SwitchTransformer<Transformer<Object, InstanceofPredicate>, Transformer<Object, InstanceofPredicate>>(predicateArray0, transformerArray0, transformer0);
      TransformedList<Transformer<Object, InstanceofPredicate>> transformedList0 = TransformedList.transformingList((List<Transformer<Object, InstanceofPredicate>>) linkedList0, (Transformer<? super Transformer<Object, InstanceofPredicate>, ? extends Transformer<Object, InstanceofPredicate>>) switchTransformer0);
      // Undeclared exception!
      try { 
        transformedList0.remove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      Transformer<Object, LinkedList<String>> transformer0 = InvokerTransformer.invokerTransformer("Ty-'z5^UT27h?:#\"");
      TransformedList<LinkedList<String>> transformedList0 = TransformedList.transformingList((List<LinkedList<String>>) linkedList0, (Transformer<? super LinkedList<String>, ? extends LinkedList<String>>) transformer0);
      int int0 = transformedList0.indexOf(linkedList0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, InstanceofPredicate> transformer0 = ConstantTransformer.nullTransformer();
      TransformedList<Object> transformedList0 = TransformedList.transformingList((List<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
      ListIterator<Object> listIterator0 = transformedList0.listIterator(0);
      TransformedList.TransformedListIterator transformedList_TransformedListIterator0 = transformedList0.new TransformedListIterator(listIterator0);
      // Undeclared exception!
      try { 
        transformedList_TransformedListIterator0.set(transformer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Transformer<Object, InstanceofPredicate>> linkedList0 = new LinkedList<Transformer<Object, InstanceofPredicate>>();
      HashMap<Transformer<Object, InstanceofPredicate>, Transformer<Object, InstanceofPredicate>> hashMap0 = new HashMap<Transformer<Object, InstanceofPredicate>, Transformer<Object, InstanceofPredicate>>();
      Transformer<Transformer<Object, InstanceofPredicate>, Transformer<Object, InstanceofPredicate>> transformer0 = MapTransformer.mapTransformer((Map<? super Transformer<Object, InstanceofPredicate>, ? extends Transformer<Object, InstanceofPredicate>>) hashMap0);
      TransformedList<Transformer<Object, InstanceofPredicate>> transformedList0 = TransformedList.transformingList((List<Transformer<Object, InstanceofPredicate>>) linkedList0, (Transformer<? super Transformer<Object, InstanceofPredicate>, ? extends Transformer<Object, InstanceofPredicate>>) transformer0);
      ListIterator<Transformer<Object, InstanceofPredicate>> listIterator0 = (ListIterator<Transformer<Object, InstanceofPredicate>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      TransformedList.TransformedListIterator transformedList_TransformedListIterator0 = transformedList0.new TransformedListIterator(listIterator0);
      ConstantFactory<InstanceofPredicate> constantFactory0 = new ConstantFactory<InstanceofPredicate>((InstanceofPredicate) null);
      Transformer<Object, InstanceofPredicate> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends InstanceofPredicate>) constantFactory0);
      transformedList_TransformedListIterator0.add(transformer1);
      assertFalse(transformedList_TransformedListIterator0.hasNext());
  }
}
